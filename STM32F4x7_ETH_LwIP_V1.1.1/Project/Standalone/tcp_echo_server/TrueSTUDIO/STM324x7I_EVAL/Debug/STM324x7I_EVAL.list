
C:\Users\Jason\Documents\IoT\STM32F4x7_ETH_LwIP_V1.1.1\Project\Standalone\tcp_echo_server\TrueSTUDIO\STM324x7I_EVAL\Debug\STM324x7I_EVAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000019c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a730  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000150c  0800a8d0  0800a8d0  0001a8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bddc  0800bddc  0001bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bde8  0800bde8  0001bde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000574  20000000  0800bdec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020574  2**0
                  CONTENTS
  8 .bss          00008088  20000574  20000574  00020574  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200085fc  200085fc  00020574  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020574  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d5a8  00000000  00000000  000205a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000050e8  00000000  00000000  0003db4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000e293  00000000  00000000  00042c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  00050ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002030  00000000  00000000  00052088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008f69  00000000  00000000  000540b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000607e  00000000  00000000  0005d021  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  0006309f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003a68  00000000  00000000  00063120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000574 	.word	0x20000574
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a8b8 	.word	0x0800a8b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000578 	.word	0x20000578
 80001dc:	0800a8b8 	.word	0x0800a8b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460e      	mov	r6, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9d08      	ldr	r5, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d150      	bne.n	8000c92 <__udivmoddi4+0xb2>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96c      	bls.n	8000cd0 <__udivmoddi4+0xf0>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0420 	rsb	r4, lr, #32
 8000c04:	fa20 f404 	lsr.w	r4, r0, r4
 8000c08:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c0c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c10:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c1c:	0c22      	lsrs	r2, r4, #16
 8000c1e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c22:	fa1f f887 	uxth.w	r8, r7
 8000c26:	fb09 c610 	mls	r6, r9, r0, ip
 8000c2a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c2e:	fb00 f308 	mul.w	r3, r0, r8
 8000c32:	42b3      	cmp	r3, r6
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x6a>
 8000c36:	19f6      	adds	r6, r6, r7
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 8122 	bcs.w	8000e84 <__udivmoddi4+0x2a4>
 8000c40:	42b3      	cmp	r3, r6
 8000c42:	f240 811f 	bls.w	8000e84 <__udivmoddi4+0x2a4>
 8000c46:	3802      	subs	r0, #2
 8000c48:	443e      	add	r6, r7
 8000c4a:	1af6      	subs	r6, r6, r3
 8000c4c:	b2a2      	uxth	r2, r4
 8000c4e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c52:	fb09 6613 	mls	r6, r9, r3, r6
 8000c56:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c5a:	fb03 f808 	mul.w	r8, r3, r8
 8000c5e:	45a0      	cmp	r8, r4
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x96>
 8000c62:	19e4      	adds	r4, r4, r7
 8000c64:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x2a0>
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x2a0>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	443c      	add	r4, r7
 8000c76:	ebc8 0404 	rsb	r4, r8, r4
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d062      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c84:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c88:	2300      	movs	r3, #0
 8000c8a:	602c      	str	r4, [r5, #0]
 8000c8c:	606b      	str	r3, [r5, #4]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0xc6>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d055      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	f040 8090 	bne.w	8000dd0 <__udivmoddi4+0x1f0>
 8000cb0:	42b3      	cmp	r3, r6
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xda>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb66 0603 	sbc.w	r6, r6, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	46b4      	mov	ip, r6
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d040      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cc8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	b912      	cbnz	r2, 8000cd8 <__udivmoddi4+0xf8>
 8000cd2:	2701      	movs	r7, #1
 8000cd4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cd8:	fab7 fe87 	clz	lr, r7
 8000cdc:	f1be 0f00 	cmp.w	lr, #0
 8000ce0:	d135      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce2:	1bf3      	subs	r3, r6, r7
 8000ce4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb08 3610 	mls	r6, r8, r0, r3
 8000cf8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cfc:	fb0c f300 	mul.w	r3, ip, r0
 8000d00:	42b3      	cmp	r3, r6
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19f6      	adds	r6, r6, r7
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42b3      	cmp	r3, r6
 8000d0e:	f200 80ce 	bhi.w	8000eae <__udivmoddi4+0x2ce>
 8000d12:	4610      	mov	r0, r2
 8000d14:	1af6      	subs	r6, r6, r3
 8000d16:	b2a2      	uxth	r2, r4
 8000d18:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d1c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d20:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d24:	fb0c fc03 	mul.w	ip, ip, r3
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b5 	bhi.w	8000ea4 <__udivmoddi4+0x2c4>
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	ebcc 0404 	rsb	r4, ip, r4
 8000d40:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d44:	e79c      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000d46:	4629      	mov	r1, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0120 	rsb	r1, lr, #32
 8000d52:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d62:	40ce      	lsrs	r6, r1
 8000d64:	ea49 0903 	orr.w	r9, r9, r3
 8000d68:	fbb6 faf8 	udiv	sl, r6, r8
 8000d6c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d70:	fb08 661a 	mls	r6, r8, sl, r6
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d7c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d80:	429a      	cmp	r2, r3
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1be>
 8000d88:	19db      	adds	r3, r3, r7
 8000d8a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d8e:	f080 8087 	bcs.w	8000ea0 <__udivmoddi4+0x2c0>
 8000d92:	429a      	cmp	r2, r3
 8000d94:	f240 8084 	bls.w	8000ea0 <__udivmoddi4+0x2c0>
 8000d98:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d9c:	443b      	add	r3, r7
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	fa1f f989 	uxth.w	r9, r9
 8000da4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dac:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000db0:	fb01 f60c 	mul.w	r6, r1, ip
 8000db4:	429e      	cmp	r6, r3
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x1e8>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dbe:	d26b      	bcs.n	8000e98 <__udivmoddi4+0x2b8>
 8000dc0:	429e      	cmp	r6, r3
 8000dc2:	d969      	bls.n	8000e98 <__udivmoddi4+0x2b8>
 8000dc4:	3902      	subs	r1, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dce:	e78e      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dd0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dd4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	4323      	orrs	r3, r4
 8000ddc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000de0:	fa06 f401 	lsl.w	r4, r6, r1
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000dec:	433c      	orrs	r4, r7
 8000dee:	fbb6 f9fc 	udiv	r9, r6, ip
 8000df2:	0c27      	lsrs	r7, r4, #16
 8000df4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000df8:	fa1f f883 	uxth.w	r8, r3
 8000dfc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e00:	fb09 f708 	mul.w	r7, r9, r8
 8000e04:	42b7      	cmp	r7, r6
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x242>
 8000e10:	18f6      	adds	r6, r6, r3
 8000e12:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e16:	d241      	bcs.n	8000e9c <__udivmoddi4+0x2bc>
 8000e18:	42b7      	cmp	r7, r6
 8000e1a:	d93f      	bls.n	8000e9c <__udivmoddi4+0x2bc>
 8000e1c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e20:	441e      	add	r6, r3
 8000e22:	1bf6      	subs	r6, r6, r7
 8000e24:	b2a0      	uxth	r0, r4
 8000e26:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e2a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e2e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e32:	fb04 f808 	mul.w	r8, r4, r8
 8000e36:	45b8      	cmp	r8, r7
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x26a>
 8000e3a:	18ff      	adds	r7, r7, r3
 8000e3c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e40:	d228      	bcs.n	8000e94 <__udivmoddi4+0x2b4>
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d926      	bls.n	8000e94 <__udivmoddi4+0x2b4>
 8000e46:	3c02      	subs	r4, #2
 8000e48:	441f      	add	r7, r3
 8000e4a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e4e:	ebc8 0707 	rsb	r7, r8, r7
 8000e52:	fba0 8902 	umull	r8, r9, r0, r2
 8000e56:	454f      	cmp	r7, r9
 8000e58:	4644      	mov	r4, r8
 8000e5a:	464e      	mov	r6, r9
 8000e5c:	d314      	bcc.n	8000e88 <__udivmoddi4+0x2a8>
 8000e5e:	d029      	beq.n	8000eb4 <__udivmoddi4+0x2d4>
 8000e60:	b365      	cbz	r5, 8000ebc <__udivmoddi4+0x2dc>
 8000e62:	ebba 0304 	subs.w	r3, sl, r4
 8000e66:	eb67 0706 	sbc.w	r7, r7, r6
 8000e6a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	40cf      	lsrs	r7, r1
 8000e72:	ea4e 0303 	orr.w	r3, lr, r3
 8000e76:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	4613      	mov	r3, r2
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x96>
 8000e84:	4610      	mov	r0, r2
 8000e86:	e6e0      	b.n	8000c4a <__udivmoddi4+0x6a>
 8000e88:	ebb8 0402 	subs.w	r4, r8, r2
 8000e8c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7e5      	b.n	8000e60 <__udivmoddi4+0x280>
 8000e94:	4604      	mov	r4, r0
 8000e96:	e7d8      	b.n	8000e4a <__udivmoddi4+0x26a>
 8000e98:	4611      	mov	r1, r2
 8000e9a:	e795      	b.n	8000dc8 <__udivmoddi4+0x1e8>
 8000e9c:	4681      	mov	r9, r0
 8000e9e:	e7c0      	b.n	8000e22 <__udivmoddi4+0x242>
 8000ea0:	468a      	mov	sl, r1
 8000ea2:	e77c      	b.n	8000d9e <__udivmoddi4+0x1be>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e748      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xe4>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	443e      	add	r6, r7
 8000eb2:	e72f      	b.n	8000d14 <__udivmoddi4+0x134>
 8000eb4:	45c2      	cmp	sl, r8
 8000eb6:	d3e7      	bcc.n	8000e88 <__udivmoddi4+0x2a8>
 8000eb8:	463e      	mov	r6, r7
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x280>
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4a3b      	ldr	r2, [pc, #236]	; (8000fb8 <SystemInit+0xf0>)
 8000eca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000ece:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ed6:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <SystemInit+0xf4>)
 8000ed8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eda:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000edc:	f042 0201 	orr.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ee2:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000eea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000eee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ef0:	4a33      	ldr	r2, [pc, #204]	; (8000fc0 <SystemInit+0xf8>)
 8000ef2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ef4:	681a      	ldr	r2, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef6:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000efc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000efe:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f00:	9100      	str	r1, [sp, #0]
 8000f02:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f0a:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f12:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8000f14:	9a00      	ldr	r2, [sp, #0]
 8000f16:	3201      	adds	r2, #1
 8000f18:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	b91a      	cbnz	r2, 8000f26 <SystemInit+0x5e>
 8000f1e:	9a00      	ldr	r2, [sp, #0]
 8000f20:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000f24:	d1f2      	bne.n	8000f0c <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f26:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <SystemInit+0xf4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000f2e:	bf18      	it	ne
 8000f30:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f32:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d005      	beq.n	8000f46 <SystemInit+0x7e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <SystemInit+0xf0>)
 8000f3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f40:	609a      	str	r2, [r3, #8]
#endif
}
 8000f42:	b002      	add	sp, #8
 8000f44:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <SystemInit+0xf4>)
    PWR->CR |= PWR_CR_VOS;
 8000f48:	491e      	ldr	r1, [pc, #120]	; (8000fc4 <SystemInit+0xfc>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000f52:	680a      	ldr	r2, [r1, #0]
 8000f54:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000f58:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f64:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000f6c:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <SystemInit+0x100>)
 8000f70:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f78:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	0192      	lsls	r2, r2, #6
 8000f7e:	d5fc      	bpl.n	8000f7a <SystemInit+0xb2>
    {
    }
   
    if ((DBGMCU->IDCODE >> 16) == 0x1001)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <SystemInit+0x104>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f241 0301 	movw	r3, #4097	; 0x1001
 8000f88:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <SystemInit+0x108>)
    {
      /* STM32F40x/41x Revision Z devices: prefetch is supported  */
      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
      FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000f8e:	bf0c      	ite	eq
 8000f90:	f240 7205 	movweq	r2, #1797	; 0x705
    }
    else
    {
      /* STM32F40x/41x Revision A devices: prefetch is not supported  */
      /* Configure Flash Instruction cache, Data cache and wait state */
      FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000f94:	f240 6205 	movwne	r2, #1541	; 0x605
 8000f98:	601a      	str	r2, [r3, #0]
    }

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <SystemInit+0xf4>)
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	f022 0203 	bic.w	r2, r2, #3
 8000fa2:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	f042 0202 	orr.w	r2, r2, #2
 8000faa:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	f002 020c 	and.w	r2, r2, #12
 8000fb2:	2a08      	cmp	r2, #8
 8000fb4:	d1fa      	bne.n	8000fac <SystemInit+0xe4>
 8000fb6:	e7c0      	b.n	8000f3a <SystemInit+0x72>
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	24003010 	.word	0x24003010
 8000fc4:	40007000 	.word	0x40007000
 8000fc8:	07405419 	.word	0x07405419
 8000fcc:	e0042000 	.word	0xe0042000
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8000fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd8:	4606      	mov	r6, r0
 8000fda:	b085      	sub	sp, #20
 8000fdc:	4689      	mov	r9, r1
 8000fde:	4690      	mov	r8, r2
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8000fe0:	2124      	movs	r1, #36	; 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f001 f9e7 	bl	80023b8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8000fea:	4605      	mov	r5, r0
 8000fec:	b360      	cbz	r0, 8001048 <icmp_send_response.isra.0+0x74>
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8000fee:	6844      	ldr	r4, [r0, #4]
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8000ff0:	6837      	ldr	r7, [r6, #0]
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
 8000ff2:	f884 9000 	strb.w	r9, [r4]
  icmphdr->code = code;
  icmphdr->id = 0;
 8000ff6:	2300      	movs	r3, #0
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
 8000ff8:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->id = 0;
 8000ffc:	7123      	strb	r3, [r4, #4]
 8000ffe:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8001000:	71a3      	strb	r3, [r4, #6]
 8001002:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8001004:	6842      	ldr	r2, [r0, #4]
 8001006:	6833      	ldr	r3, [r6, #0]
 8001008:	3208      	adds	r2, #8
 800100a:	f103 011c 	add.w	r1, r3, #28
 800100e:	f853 0b04 	ldr.w	r0, [r3], #4
 8001012:	f842 0b04 	str.w	r0, [r2], #4
 8001016:	428b      	cmp	r3, r1
 8001018:	d1f9      	bne.n	800100e <icmp_send_response.isra.0+0x3a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 800101a:	2600      	movs	r6, #0
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800101c:	8969      	ldrh	r1, [r5, #10]
  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 800101e:	70a6      	strb	r6, [r4, #2]
 8001020:	70e6      	strb	r6, [r4, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8001022:	4620      	mov	r0, r4
 8001024:	f000 f8ca 	bl	80011bc <inet_chksum>
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 8001028:	aa04      	add	r2, sp, #16
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800102a:	8060      	strh	r0, [r4, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f842 3d04 	str.w	r3, [r2, #-4]!
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	9600      	str	r6, [sp, #0]
 8001038:	23ff      	movs	r3, #255	; 0xff
 800103a:	4631      	mov	r1, r6
 800103c:	4628      	mov	r0, r5
 800103e:	f000 fa1d 	bl	800147c <ip_output>
  pbuf_free(q);
 8001042:	4628      	mov	r0, r5
 8001044:	f001 f992 	bl	800236c <pbuf_free>
}
 8001048:	b005      	add	sp, #20
 800104a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001050 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8001050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 8001054:	6846      	ldr	r6, [r0, #4]
  hlen = IPH_HL(iphdr) * 4;
 8001056:	7835      	ldrb	r5, [r6, #0]
 8001058:	f005 050f 	and.w	r5, r5, #15
 800105c:	00ad      	lsls	r5, r5, #2
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 800105e:	f1c5 0a00 	rsb	sl, r5, #0
 8001062:	fa0f fa8a 	sxth.w	sl, sl
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8001066:	4689      	mov	r9, r1
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  hlen = IPH_HL(iphdr) * 4;
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 8001068:	4651      	mov	r1, sl
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800106a:	4604      	mov	r4, r0
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  hlen = IPH_HL(iphdr) * 4;
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 800106c:	f001 f952 	bl	8002314 <pbuf_header>
 8001070:	2800      	cmp	r0, #0
 8001072:	d162      	bne.n	800113a <icmp_input+0xea>
 8001074:	8923      	ldrh	r3, [r4, #8]
 8001076:	2b03      	cmp	r3, #3
 8001078:	d95f      	bls.n	800113a <icmp_input+0xea>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800107a:	6863      	ldr	r3, [r4, #4]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b08      	cmp	r3, #8
 8001080:	d15b      	bne.n	800113a <icmp_input+0xea>
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 8001082:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800114c <icmp_input+0xfc>
 8001086:	f8d8 7000 	ldr.w	r7, [r8]
        accepted = 0;
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 800108a:	4649      	mov	r1, r9
 800108c:	4638      	mov	r0, r7
 800108e:	f000 fa11 	bl	80014b4 <ip4_addr_isbroadcast>
 8001092:	2800      	cmp	r0, #0
 8001094:	d151      	bne.n	800113a <icmp_input+0xea>
        accepted = 0;
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 8001096:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
 800109a:	2fe0      	cmp	r7, #224	; 0xe0
 800109c:	d04d      	beq.n	800113a <icmp_input+0xea>
        return;
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800109e:	8923      	ldrh	r3, [r4, #8]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d94a      	bls.n	800113a <icmp_input+0xea>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
 80010a4:	4620      	mov	r0, r4
 80010a6:	f000 f88f 	bl	80011c8 <inet_chksum_pbuf>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d145      	bne.n	800113a <icmp_input+0xea>
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 80010ae:	2122      	movs	r1, #34	; 0x22
 80010b0:	4620      	mov	r0, r4
  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  hlen = IPH_HL(iphdr) * 4;
 80010b2:	b22d      	sxth	r5, r5
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 80010b4:	f001 f92e 	bl	8002314 <pbuf_header>
 80010b8:	b1d0      	cbz	r0, 80010f0 <icmp_input+0xa0>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 80010ba:	4629      	mov	r1, r5
 80010bc:	4620      	mov	r0, r4
 80010be:	f001 f929 	bl	8002314 <pbuf_header>
 80010c2:	4602      	mov	r2, r0
 80010c4:	bbc8      	cbnz	r0, 800113a <icmp_input+0xea>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80010c6:	8921      	ldrh	r1, [r4, #8]
 80010c8:	2002      	movs	r0, #2
 80010ca:	f001 f975 	bl	80023b8 <pbuf_alloc>
      if (r == NULL) {
 80010ce:	4607      	mov	r7, r0
 80010d0:	b398      	cbz	r0, 800113a <icmp_input+0xea>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80010d2:	4621      	mov	r1, r4
 80010d4:	f001 fa3e 	bl	8002554 <pbuf_copy>
 80010d8:	bb78      	cbnz	r0, 800113a <icmp_input+0xea>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 80010da:	4651      	mov	r1, sl
 80010dc:	4638      	mov	r0, r7
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
 80010de:	687e      	ldr	r6, [r7, #4]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 80010e0:	f001 f918 	bl	8002314 <pbuf_header>
 80010e4:	bb48      	cbnz	r0, 800113a <icmp_input+0xea>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
 80010e6:	4620      	mov	r0, r4
 80010e8:	f001 f940 	bl	800236c <pbuf_free>
 80010ec:	463c      	mov	r4, r7
 80010ee:	e005      	b.n	80010fc <icmp_input+0xac>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 80010f0:	f06f 0121 	mvn.w	r1, #33	; 0x21
 80010f4:	4620      	mov	r0, r4
 80010f6:	f001 f90d 	bl	8002314 <pbuf_header>
 80010fa:	b9f0      	cbnz	r0, 800113a <icmp_input+0xea>
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 80010fc:	f8d8 2000 	ldr.w	r2, [r8]
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8001100:	6863      	ldr	r3, [r4, #4]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 8001102:	60f2      	str	r2, [r6, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <icmp_input+0xf8>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	6132      	str	r2, [r6, #16]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */
    
    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 800110a:	27ff      	movs	r7, #255	; 0xff
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    }
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
 8001110:	709a      	strb	r2, [r3, #2]
 8001112:	70da      	strb	r2, [r3, #3]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 8001114:	4629      	mov	r1, r5
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */
    
    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
    IPH_CHKSUM_SET(iphdr, 0);
 8001116:	72b2      	strb	r2, [r6, #10]
 8001118:	72f2      	strb	r2, [r6, #11]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */
    
    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 800111a:	7237      	strb	r7, [r6, #8]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 800111c:	4620      	mov	r0, r4
 800111e:	f001 f8f9 	bl	8002314 <pbuf_header>
 8001122:	4602      	mov	r2, r0
 8001124:	b948      	cbnz	r0, 800113a <icmp_input+0xea>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 8001126:	2301      	movs	r3, #1
 8001128:	e88d 000c 	stmia.w	sp, {r2, r3}
 800112c:	f8cd 9008 	str.w	r9, [sp, #8]
 8001130:	463b      	mov	r3, r7
 8001132:	4906      	ldr	r1, [pc, #24]	; (800114c <icmp_input+0xfc>)
 8001134:	4620      	mov	r0, r4
 8001136:	f000 f949 	bl	80013cc <ip_output_if>
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 800113a:	4620      	mov	r0, r4
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 800113c:	b004      	add	sp, #16
 800113e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 8001142:	f001 b913 	b.w	800236c <pbuf_free>
 8001146:	bf00      	nop
 8001148:	20002bf4 	.word	0x20002bf4
 800114c:	20002bfc 	.word	0x20002bfc

08001150 <icmp_dest_unreach>:
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  icmp_send_response(p, ICMP_DUR, t);
 8001150:	460a      	mov	r2, r1
 8001152:	3004      	adds	r0, #4
 8001154:	2103      	movs	r1, #3
 8001156:	f7ff bf3d 	b.w	8000fd4 <icmp_send_response.isra.0>

0800115a <icmp_time_exceeded>:
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  icmp_send_response(p, ICMP_TE, t);
 800115a:	460a      	mov	r2, r1
 800115c:	3004      	adds	r0, #4
 800115e:	210b      	movs	r1, #11
 8001160:	f7ff bf38 	b.w	8000fd4 <icmp_send_response.isra.0>

08001164 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 8001164:	b513      	push	{r0, r1, r4, lr}
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
 8001166:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8001168:	f010 0401 	ands.w	r4, r0, #1

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
 800116c:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8001170:	d006      	beq.n	8001180 <lwip_standard_chksum+0x1c>
 8001172:	4299      	cmp	r1, r3
 8001174:	dd10      	ble.n	8001198 <lwip_standard_chksum+0x34>
    ((u8_t *)&t)[1] = *pb++;
 8001176:	7803      	ldrb	r3, [r0, #0]
 8001178:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
 800117c:	3901      	subs	r1, #1
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
 800117e:	3001      	adds	r0, #1
static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  u32_t sum = 0;
 8001180:	2300      	movs	r3, #0
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
 8001182:	2901      	cmp	r1, #1
 8001184:	dd04      	ble.n	8001190 <lwip_standard_chksum+0x2c>
    sum += *ps++;
 8001186:	f830 2b02 	ldrh.w	r2, [r0], #2
    len -= 2;
 800118a:	3902      	subs	r1, #2
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
    sum += *ps++;
 800118c:	4413      	add	r3, r2
 800118e:	e7f8      	b.n	8001182 <lwip_standard_chksum+0x1e>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 8001190:	bf04      	itt	eq
 8001192:	7802      	ldrbeq	r2, [r0, #0]
 8001194:	f88d 2006 	strbeq.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8001198:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800119c:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 800119e:	b298      	uxth	r0, r3
 80011a0:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	eb02 4013 	add.w	r0, r2, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80011aa:	b124      	cbz	r4, 80011b6 <lwip_standard_chksum+0x52>
    sum = SWAP_BYTES_IN_WORD(sum);
 80011ac:	0203      	lsls	r3, r0, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80011b4:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80011b6:	b280      	uxth	r0, r0
 80011b8:	b002      	add	sp, #8
 80011ba:	bd10      	pop	{r4, pc}

080011bc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 80011bc:	b508      	push	{r3, lr}
  return ~LWIP_CHKSUM(dataptr, len);
 80011be:	f7ff ffd1 	bl	8001164 <lwip_standard_chksum>
 80011c2:	43c0      	mvns	r0, r0
}
 80011c4:	b280      	uxth	r0, r0
 80011c6:	bd08      	pop	{r3, pc}

080011c8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
 80011ca:	2500      	movs	r5, #0
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80011cc:	4606      	mov	r6, r0
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 80011ce:	462c      	mov	r4, r5
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
 80011d0:	b1a6      	cbz	r6, 80011fc <inet_chksum_pbuf+0x34>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80011d2:	8971      	ldrh	r1, [r6, #10]
 80011d4:	6870      	ldr	r0, [r6, #4]
 80011d6:	f7ff ffc5 	bl	8001164 <lwip_standard_chksum>
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80011da:	8973      	ldrh	r3, [r6, #10]
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
 80011dc:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
 80011de:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 80011e0:	07db      	lsls	r3, r3, #31

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
 80011e2:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 80011e6:	d507      	bpl.n	80011f8 <inet_chksum_pbuf+0x30>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80011e8:	0223      	lsls	r3, r4, #8
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
      swapped = 1 - swapped;
 80011ea:	f1c5 0501 	rsb	r5, r5, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f3c4 2407 	ubfx	r4, r4, #8, #8
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
      swapped = 1 - swapped;
 80011f4:	b2ed      	uxtb	r5, r5
      acc = SWAP_BYTES_IN_WORD(acc);
 80011f6:	431c      	orrs	r4, r3
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
 80011f8:	6836      	ldr	r6, [r6, #0]
 80011fa:	e7e9      	b.n	80011d0 <inet_chksum_pbuf+0x8>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 80011fc:	b125      	cbz	r5, 8001208 <inet_chksum_pbuf+0x40>
    acc = SWAP_BYTES_IN_WORD(acc);
 80011fe:	0223      	lsls	r3, r4, #8
 8001200:	b29b      	uxth	r3, r3
 8001202:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001206:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8001208:	43e0      	mvns	r0, r4
}
 800120a:	b280      	uxth	r0, r0
 800120c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001210 <ip_route>:
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <ip_route+0x34>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b15b      	cbz	r3, 800122e <ip_route+0x1e>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 8001216:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800121a:	07d2      	lsls	r2, r2, #31
 800121c:	d5f9      	bpl.n	8001212 <ip_route+0x2>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 800121e:	6801      	ldr	r1, [r0, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	404a      	eors	r2, r1
 8001224:	6899      	ldr	r1, [r3, #8]
 8001226:	420a      	tst	r2, r1
 8001228:	d1f3      	bne.n	8001212 <ip_route+0x2>
 800122a:	4618      	mov	r0, r3
 800122c:	e009      	b.n	8001242 <ip_route+0x32>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <ip_route+0x38>)
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	b130      	cbz	r0, 8001242 <ip_route+0x32>
 8001234:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
 8001238:	f013 0f01 	tst.w	r3, #1
 800123c:	bf08      	it	eq
 800123e:	2000      	moveq	r0, #0
 8001240:	4770      	bx	lr
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
 8001242:	4770      	bx	lr
 8001244:	20005418 	.word	0x20005418
 8001248:	2000541c 	.word	0x2000541c

0800124c <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 800124c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8001250:	6846      	ldr	r6, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8001252:	f896 8000 	ldrb.w	r8, [r6]
 8001256:	ea4f 1318 	mov.w	r3, r8, lsr #4
 800125a:	2b04      	cmp	r3, #4
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 800125c:	4604      	mov	r4, r0
 800125e:	460f      	mov	r7, r1
  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  if (IPH_V(iphdr) != 4) {
 8001260:	d003      	beq.n	800126a <ip_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 8001262:	4620      	mov	r0, r4
 8001264:	f001 f882 	bl	800236c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 8001268:	e0a2      	b.n	80013b0 <ip_input+0x164>
  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800126a:	8870      	ldrh	r0, [r6, #2]
 800126c:	f000 fbed 	bl	8001a4a <lwip_ntohs>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8001270:	f008 080f 	and.w	r8, r8, #15
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 8001274:	8963      	ldrh	r3, [r4, #10]
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8001276:	ea4f 0888 	mov.w	r8, r8, lsl #2
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 800127a:	4543      	cmp	r3, r8
  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800127c:	4601      	mov	r1, r0

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 800127e:	d3f0      	bcc.n	8001262 <ip_input+0x16>
 8001280:	8923      	ldrh	r3, [r4, #8]
 8001282:	4283      	cmp	r3, r0
 8001284:	d3ed      	bcc.n	8001262 <ip_input+0x16>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 8001286:	4620      	mov	r0, r4
 8001288:	f001 f91b 	bl	80024c2 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 800128c:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <ip_input+0x16c>)
 800128e:	6933      	ldr	r3, [r6, #16]
 8001290:	6013      	str	r3, [r2, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
 8001292:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <ip_input+0x170>)
 8001294:	68f1      	ldr	r1, [r6, #12]
 8001296:	6019      	str	r1, [r3, #0]
 8001298:	469a      	mov	sl, r3
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
        first = 0;
        netif = netif_list;
 800129a:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <ip_input+0x174>)
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  ip_addr_copy(current_iphdr_src, iphdr->src);
 800129c:	463d      	mov	r5, r7
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800129e:	f04f 0b01 	mov.w	fp, #1
 80012a2:	4691      	mov	r9, r2
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 80012a4:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 80012a8:	07d2      	lsls	r2, r2, #31
 80012aa:	d404      	bmi.n	80012b6 <ip_input+0x6a>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80012ac:	f1bb 0f00 	cmp.w	fp, #0
 80012b0:	d010      	beq.n	80012d4 <ip_input+0x88>
        first = 0;
        netif = netif_list;
 80012b2:	681d      	ldr	r5, [r3, #0]
 80012b4:	e00f      	b.n	80012d6 <ip_input+0x8a>
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 80012b6:	686a      	ldr	r2, [r5, #4]
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d0f7      	beq.n	80012ac <ip_input+0x60>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 80012bc:	f8d9 0000 	ldr.w	r0, [r9]
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	4282      	cmp	r2, r0
 80012c4:	d063      	beq.n	800138e <ip_input+0x142>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 80012c6:	4629      	mov	r1, r5
 80012c8:	f000 f8f4 	bl	80014b4 <ip4_addr_isbroadcast>
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 80012cc:	9b01      	ldr	r3, [sp, #4]
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d0ec      	beq.n	80012ac <ip_input+0x60>
 80012d2:	e05c      	b.n	800138e <ip_input+0x142>
      }
      if (first) {
        first = 0;
        netif = netif_list;
      } else {
        netif = netif->next;
 80012d4:	682d      	ldr	r5, [r5, #0]
      }
      if (netif == inp) {
 80012d6:	42bd      	cmp	r5, r7
        netif = netif->next;
 80012d8:	bf08      	it	eq
 80012da:	682d      	ldreq	r5, [r5, #0]
 80012dc:	f04f 0b00 	mov.w	fp, #0
      }
    } while(netif != NULL);
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d1df      	bne.n	80012a4 <ip_input+0x58>
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80012e4:	7a73      	ldrb	r3, [r6, #9]
 80012e6:	2b11      	cmp	r3, #17
 80012e8:	d151      	bne.n	800138e <ip_input+0x142>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80012ea:	44b0      	add	r8, r6
 80012ec:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80012f0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80012f4:	d14b      	bne.n	800138e <ip_input+0x142>
 80012f6:	463d      	mov	r5, r7
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80012f8:	2d00      	cmp	r5, #0
 80012fa:	d0b2      	beq.n	8001262 <ip_input+0x16>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80012fc:	88f3      	ldrh	r3, [r6, #6]
 80012fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001302:	b133      	cbz	r3, 8001312 <ip_input+0xc6>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
 8001304:	4620      	mov	r0, r4
 8001306:	f000 f97f 	bl	8001608 <ip_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800130a:	4604      	mov	r4, r0
 800130c:	2800      	cmp	r0, #0
 800130e:	d04f      	beq.n	80013b0 <ip_input+0x164>
      return ERR_OK;
    }
    iphdr = (struct ip_hdr *)p->payload;
 8001310:	6846      	ldr	r6, [r0, #4]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 8001312:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80013c8 <ip_input+0x17c>
  current_header = iphdr;
 8001316:	4d2b      	ldr	r5, [pc, #172]	; (80013c4 <ip_input+0x178>)
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 8001318:	f8c8 7000 	str.w	r7, [r8]
  current_header = iphdr;

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 800131c:	4639      	mov	r1, r7
 800131e:	4620      	mov	r0, r4
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
  current_header = iphdr;
 8001320:	602e      	str	r6, [r5, #0]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 8001322:	f001 f99b 	bl	800265c <raw_input>
 8001326:	bb48      	cbnz	r0, 800137c <ip_input+0x130>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 8001328:	7a73      	ldrb	r3, [r6, #9]
 800132a:	2b06      	cmp	r3, #6
 800132c:	d00d      	beq.n	800134a <ip_input+0xfe>
 800132e:	2b11      	cmp	r3, #17
 8001330:	d006      	beq.n	8001340 <ip_input+0xf4>
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10e      	bne.n	8001354 <ip_input+0x108>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 8001336:	4639      	mov	r1, r7
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff fe89 	bl	8001050 <icmp_input>
      break;
 800133e:	e01d      	b.n	800137c <ip_input+0x130>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 8001340:	4639      	mov	r1, r7
 8001342:	4620      	mov	r0, r4
 8001344:	f003 fa5c 	bl	8004800 <udp_input>
      break;
 8001348:	e018      	b.n	800137c <ip_input+0x130>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
 800134a:	4639      	mov	r1, r7
 800134c:	4620      	mov	r0, r4
 800134e:	f002 f921 	bl	8003594 <tcp_input>
      break;
 8001352:	e013      	b.n	800137c <ip_input+0x130>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 8001354:	4639      	mov	r1, r7
 8001356:	f8d9 0000 	ldr.w	r0, [r9]
 800135a:	f000 f8ab 	bl	80014b4 <ip4_addr_isbroadcast>
 800135e:	b950      	cbnz	r0, 8001376 <ip_input+0x12a>
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <ip_input+0x16c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001368:	2be0      	cmp	r3, #224	; 0xe0
 800136a:	d004      	beq.n	8001376 <ip_input+0x12a>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
 800136c:	6066      	str	r6, [r4, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800136e:	2102      	movs	r1, #2
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff feed 	bl	8001150 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8001376:	4620      	mov	r0, r4
 8001378:	f000 fff8 	bl	800236c <pbuf_free>
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c8 3000 	str.w	r3, [r8]
  current_header = NULL;
 8001382:	602b      	str	r3, [r5, #0]
  ip_addr_set_any(&current_iphdr_src);
 8001384:	f8ca 3000 	str.w	r3, [sl]
  ip_addr_set_any(&current_iphdr_dest);
 8001388:	f8c9 3000 	str.w	r3, [r9]

  return ERR_OK;
 800138c:	e010      	b.n	80013b0 <ip_input+0x164>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
 800138e:	f8da 0000 	ldr.w	r0, [sl]
 8001392:	2800      	cmp	r0, #0
 8001394:	d0b0      	beq.n	80012f8 <ip_input+0xac>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 8001396:	4639      	mov	r1, r7
 8001398:	f000 f88c 	bl	80014b4 <ip4_addr_isbroadcast>
 800139c:	2800      	cmp	r0, #0
 800139e:	f47f af60 	bne.w	8001262 <ip_input+0x16>
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <ip_input+0x170>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013aa:	2be0      	cmp	r3, #224	; 0xe0
 80013ac:	d1a4      	bne.n	80012f8 <ip_input+0xac>
 80013ae:	e758      	b.n	8001262 <ip_input+0x16>
  current_header = NULL;
  ip_addr_set_any(&current_iphdr_src);
  ip_addr_set_any(&current_iphdr_dest);

  return ERR_OK;
}
 80013b0:	2000      	movs	r0, #0
 80013b2:	b003      	add	sp, #12
 80013b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013b8:	20002bfc 	.word	0x20002bfc
 80013bc:	20002bf4 	.word	0x20002bf4
 80013c0:	20005418 	.word	0x20005418
 80013c4:	20002c00 	.word	0x20002c00
 80013c8:	20002bf8 	.word	0x20002bf8

080013cc <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80013cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80013d0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80013d2:	4606      	mov	r6, r0
 80013d4:	4689      	mov	r9, r1
 80013d6:	469a      	mov	sl, r3
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 80013d8:	4615      	mov	r5, r2
 80013da:	b392      	cbz	r2, 8001442 <ip_output_if+0x76>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80013dc:	2114      	movs	r1, #20
 80013de:	f000 ff99 	bl	8002314 <pbuf_header>
 80013e2:	4680      	mov	r8, r0
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d142      	bne.n	800146e <ip_output_if+0xa2>
      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 80013e8:	6874      	ldr	r4, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 80013ea:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80013ee:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 80013f2:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80013f8:	2345      	movs	r3, #69	; 0x45
 80013fa:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80013fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8001400:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 8001402:	8930      	ldrh	r0, [r6, #8]
 8001404:	f000 fb1e 	bl	8001a44 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8001408:	f884 8006 	strb.w	r8, [r4, #6]
 800140c:	f884 8007 	strb.w	r8, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 8001410:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8001478 <ip_output_if+0xac>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 8001414:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, htons(ip_id));
 8001416:	f8b8 0000 	ldrh.w	r0, [r8]
 800141a:	f000 fb13 	bl	8001a44 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800141e:	f8b8 3000 	ldrh.w	r3, [r8]
    IPH_LEN_SET(iphdr, htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, htons(ip_id));
 8001422:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8001424:	3301      	adds	r3, #1
 8001426:	f8a8 3000 	strh.w	r3, [r8]

    if (ip_addr_isany(src)) {
 800142a:	f1b9 0f00 	cmp.w	r9, #0
 800142e:	d002      	beq.n	8001436 <ip_output_if+0x6a>
 8001430:	f8d9 3000 	ldr.w	r3, [r9]
 8001434:	b903      	cbnz	r3, 8001438 <ip_output_if+0x6c>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 8001436:	687b      	ldr	r3, [r7, #4]
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 8001438:	60e3      	str	r3, [r4, #12]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    chk_sum = (chk_sum >> 16) + chk_sum;
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800143a:	2300      	movs	r3, #0
 800143c:	72a3      	strb	r3, [r4, #10]
 800143e:	72e3      	strb	r3, [r4, #11]
 8001440:	e004      	b.n	800144c <ip_output_if+0x80>
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    ip_addr_copy(dest_addr, iphdr->dest);
 8001442:	6843      	ldr	r3, [r0, #4]
 8001444:	ad02      	add	r5, sp, #8
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	f845 3d04 	str.w	r3, [r5, #-4]!
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800144c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800144e:	b143      	cbz	r3, 8001462 <ip_output_if+0x96>
 8001450:	8932      	ldrh	r2, [r6, #8]
 8001452:	429a      	cmp	r2, r3
 8001454:	d905      	bls.n	8001462 <ip_output_if+0x96>
    return ip_frag(p, netif, dest);
 8001456:	462a      	mov	r2, r5
 8001458:	4639      	mov	r1, r7
 800145a:	4630      	mov	r0, r6
 800145c:	f000 fa36 	bl	80018cc <ip_frag>
 8001460:	e007      	b.n	8001472 <ip_output_if+0xa6>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	462a      	mov	r2, r5
 8001466:	4631      	mov	r1, r6
 8001468:	4638      	mov	r0, r7
 800146a:	4798      	blx	r3
 800146c:	e001      	b.n	8001472 <ip_output_if+0xa6>
    if (pbuf_header(p, IP_HLEN)) {
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 800146e:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
}
 8001472:	b002      	add	sp, #8
 8001474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001478:	20000590 	.word	0x20000590

0800147c <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4605      	mov	r5, r0
 8001480:	b085      	sub	sp, #20

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
 8001482:	4610      	mov	r0, r2
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 8001484:	460e      	mov	r6, r1
 8001486:	4614      	mov	r4, r2
 8001488:	461f      	mov	r7, r3

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
 800148a:	f7ff fec1 	bl	8001210 <ip_route>
 800148e:	b168      	cbz	r0, 80014ac <ip_output+0x30>
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 8001490:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800149a:	9002      	str	r0, [sp, #8]
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	4622      	mov	r2, r4
 80014a0:	463b      	mov	r3, r7
 80014a2:	4631      	mov	r1, r6
 80014a4:	4628      	mov	r0, r5
 80014a6:	f7ff ff91 	bl	80013cc <ip_output_if>
 80014aa:	e001      	b.n	80014b0 <ip_output+0x34>

  if ((netif = ip_route(dest)) == NULL) {
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
 80014ac:	f06f 0003 	mvn.w	r0, #3
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
}
 80014b0:	b005      	add	sp, #20
 80014b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014b4 <ip4_addr_isbroadcast>:
{
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80014b4:	1e43      	subs	r3, r0, #1
 80014b6:	3303      	adds	r3, #3
 80014b8:	d813      	bhi.n	80014e2 <ip4_addr_isbroadcast+0x2e>
 80014ba:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
 80014be:	f002 0202 	and.w	r2, r2, #2
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80014c2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80014c6:	b17a      	cbz	r2, 80014e8 <ip4_addr_isbroadcast+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 80014c8:	684a      	ldr	r2, [r1, #4]
 80014ca:	4290      	cmp	r0, r2
 80014cc:	d00b      	beq.n	80014e6 <ip4_addr_isbroadcast+0x32>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 80014ce:	688b      	ldr	r3, [r1, #8]
 80014d0:	4042      	eors	r2, r0
 80014d2:	421a      	tst	r2, r3
 80014d4:	d107      	bne.n	80014e6 <ip4_addr_isbroadcast+0x32>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 80014d6:	43db      	mvns	r3, r3
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
      (addr == IPADDR_ANY)) {
    return 1;
 80014d8:	4383      	bics	r3, r0
 80014da:	bf0c      	ite	eq
 80014dc:	2301      	moveq	r3, #1
 80014de:	2300      	movne	r3, #0
 80014e0:	e002      	b.n	80014e8 <ip4_addr_isbroadcast+0x34>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <ip4_addr_isbroadcast+0x34>
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80014e6:	2300      	movs	r3, #0
  }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	4770      	bx	lr

080014ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80014ec:	b510      	push	{r4, lr}
 80014ee:	4604      	mov	r4, r0
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80014f0:	6940      	ldr	r0, [r0, #20]
 80014f2:	b108      	cbz	r0, 80014f8 <ipfrag_free_pbuf_custom+0xc>
    pbuf_free(pcr->original);
 80014f4:	f000 ff3a 	bl	800236c <pbuf_free>
/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 80014f8:	4621      	mov	r1, r4
 80014fa:	2006      	movs	r0, #6
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
    pbuf_free(pcr->original);
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 80014fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 8001500:	f000 be24 	b.w	800214c <memp_free>

08001504 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8001504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8001508:	6846      	ldr	r6, [r0, #4]
 800150a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800150c:	889a      	ldrh	r2, [r3, #4]
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800150e:	4604      	mov	r4, r0
 8001510:	460f      	mov	r7, r1
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  if (iprh->start == 0) {
 8001512:	b9ba      	cbnz	r2, 8001544 <ip_reass_free_complete_datagram+0x40>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
    ipr->p = iprh->next_pbuf;
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	6042      	str	r2, [r0, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8001518:	f100 011c 	add.w	r1, r0, #28
 800151c:	f100 0208 	add.w	r2, r0, #8
 8001520:	f852 0b04 	ldr.w	r0, [r2], #4
 8001524:	f843 0b04 	str.w	r0, [r3], #4
 8001528:	428a      	cmp	r2, r1
 800152a:	d1f9      	bne.n	8001520 <ip_reass_free_complete_datagram+0x1c>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800152c:	2101      	movs	r1, #1
 800152e:	4630      	mov	r0, r6
 8001530:	f7ff fe13 	bl	800115a <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8001534:	4630      	mov	r0, r6
 8001536:	f000 ffea 	bl	800250e <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 800153a:	b285      	uxth	r5, r0
    pbuf_free(p);
 800153c:	4630      	mov	r0, r6
 800153e:	f000 ff15 	bl	800236c <pbuf_free>
 8001542:	e000      	b.n	8001546 <ip_reass_free_complete_datagram+0x42>
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  u16_t pbufs_freed = 0;
 8001544:	2500      	movs	r5, #0
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
 8001546:	6866      	ldr	r6, [r4, #4]
  while (p != NULL) {
 8001548:	b166      	cbz	r6, 8001564 <ip_reass_free_complete_datagram+0x60>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800154a:	6873      	ldr	r3, [r6, #4]
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
 800154c:	4630      	mov	r0, r6
  while (p != NULL) {
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800154e:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 8001552:	f000 ffdc 	bl	800250e <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 8001556:	4428      	add	r0, r5
 8001558:	b285      	uxth	r5, r0
    pbuf_free(pcur);
 800155a:	4630      	mov	r0, r6
 800155c:	f000 ff06 	bl	800236c <pbuf_free>
  while (p != NULL) {
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8001560:	4646      	mov	r6, r8
 8001562:	e7f1      	b.n	8001548 <ip_reass_free_complete_datagram+0x44>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <ip_reass_free_complete_datagram+0x88>)
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	429c      	cmp	r4, r3
 800156a:	6823      	ldr	r3, [r4, #0]
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 800156c:	bf18      	it	ne
 800156e:	603b      	strne	r3, [r7, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
 8001570:	4621      	mov	r1, r4
 8001572:	f04f 0005 	mov.w	r0, #5
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8001576:	bf08      	it	eq
 8001578:	6013      	streq	r3, [r2, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
 800157a:	f000 fde7 	bl	800214c <memp_free>
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <ip_reass_free_complete_datagram+0x8c>)
 8001580:	8813      	ldrh	r3, [r2, #0]
 8001582:	1b5b      	subs	r3, r3, r5
 8001584:	8013      	strh	r3, [r2, #0]

  return pbufs_freed;
}
 8001586:	4628      	mov	r0, r5
 8001588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800158c:	20000594 	.word	0x20000594
 8001590:	20000598 	.word	0x20000598

08001594 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8001594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
 8001598:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001604 <ip_reass_remove_oldest_datagram+0x70>
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800159c:	4606      	mov	r6, r0
 800159e:	460f      	mov	r7, r1
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80015a0:	2500      	movs	r5, #0
  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
 80015a2:	2400      	movs	r4, #0
    r = reassdatagrams;
 80015a4:	f8d8 3000 	ldr.w	r3, [r8]

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
    prev = NULL;
 80015a8:	4621      	mov	r1, r4
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80015aa:	4620      	mov	r0, r4
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
 80015ac:	b1f3      	cbz	r3, 80015ec <ip_reass_remove_oldest_datagram+0x58>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80015ae:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	4572      	cmp	r2, lr
 80015b6:	d109      	bne.n	80015cc <ip_reass_remove_oldest_datagram+0x38>
 80015b8:	f8d6 e010 	ldr.w	lr, [r6, #16]
 80015bc:	699a      	ldr	r2, [r3, #24]
 80015be:	4572      	cmp	r2, lr
 80015c0:	d104      	bne.n	80015cc <ip_reass_remove_oldest_datagram+0x38>
 80015c2:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80015c6:	88b2      	ldrh	r2, [r6, #4]
 80015c8:	4596      	cmp	lr, r2
 80015ca:	d009      	beq.n	80015e0 <ip_reass_remove_oldest_datagram+0x4c>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80015cc:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80015ce:	b130      	cbz	r0, 80015de <ip_reass_remove_oldest_datagram+0x4a>
          oldest = r;
        } else if (r->timer <= oldest->timer) {
 80015d0:	f893 e01f 	ldrb.w	lr, [r3, #31]
 80015d4:	7fc2      	ldrb	r2, [r0, #31]
 80015d6:	4596      	cmp	lr, r2
 80015d8:	bf98      	it	ls
 80015da:	4618      	movls	r0, r3
 80015dc:	e000      	b.n	80015e0 <ip_reass_remove_oldest_datagram+0x4c>
 80015de:	4618      	mov	r0, r3
          /* older than the previous oldest */
          oldest = r;
        }
      }
      if (r->next != NULL) {
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	bf18      	it	ne
 80015e6:	4619      	movne	r1, r3
 80015e8:	4613      	mov	r3, r2
 80015ea:	e7df      	b.n	80015ac <ip_reass_remove_oldest_datagram+0x18>
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
 80015ec:	b110      	cbz	r0, 80015f4 <ip_reass_remove_oldest_datagram+0x60>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 80015ee:	f7ff ff89 	bl	8001504 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80015f2:	4405      	add	r5, r0
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80015f4:	42bd      	cmp	r5, r7
 80015f6:	da01      	bge.n	80015fc <ip_reass_remove_oldest_datagram+0x68>
 80015f8:	2c01      	cmp	r4, #1
 80015fa:	dcd2      	bgt.n	80015a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
}
 80015fc:	4628      	mov	r0, r5
 80015fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001602:	bf00      	nop
 8001604:	20000594 	.word	0x20000594

08001608 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
 8001608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct ip_reassdata *ipr_prev = NULL;

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
 800160c:	6844      	ldr	r4, [r0, #4]
 800160e:	7823      	ldrb	r3, [r4, #0]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	2b05      	cmp	r3, #5
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
 8001616:	4605      	mov	r5, r0
  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8001618:	d148      	bne.n	80016ac <ip_reass+0xa4>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800161a:	88e0      	ldrh	r0, [r4, #6]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800161c:	4ea9      	ldr	r6, [pc, #676]	; (80018c4 <ip_reass+0x2bc>)
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800161e:	f000 fa14 	bl	8001a4a <lwip_ntohs>
 8001622:	4682      	mov	sl, r0
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8001624:	8860      	ldrh	r0, [r4, #2]
 8001626:	f000 fa10 	bl	8001a4a <lwip_ntohs>
 800162a:	7823      	ldrb	r3, [r4, #0]
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	4683      	mov	fp, r0

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8001630:	4628      	mov	r0, r5
 8001632:	f000 ff6c 	bl	800250e <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8001636:	8833      	ldrh	r3, [r6, #0]
 8001638:	4403      	add	r3, r0
 800163a:	2b0a      	cmp	r3, #10

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800163c:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800163e:	dc05      	bgt.n	800164c <ip_reass+0x44>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8001640:	4fa1      	ldr	r7, [pc, #644]	; (80018c8 <ip_reass+0x2c0>)
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
 8001642:	2300      	movs	r3, #0
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8001644:	f8d7 9000 	ldr.w	r9, [r7]
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
 8001648:	9300      	str	r3, [sp, #0]
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800164a:	e012      	b.n	8001672 <ip_reass+0x6a>

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800164c:	4601      	mov	r1, r0
 800164e:	4620      	mov	r0, r4
 8001650:	f7ff ffa0 	bl	8001594 <ip_reass_remove_oldest_datagram>
 8001654:	b350      	cbz	r0, 80016ac <ip_reass+0xa4>
 8001656:	8833      	ldrh	r3, [r6, #0]
 8001658:	4443      	add	r3, r8
 800165a:	2b0a      	cmp	r3, #10
 800165c:	ddf0      	ble.n	8001640 <ip_reass+0x38>
 800165e:	e025      	b.n	80016ac <ip_reass+0xa4>
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8001660:	68e2      	ldr	r2, [r4, #12]
 8001662:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8001666:	4291      	cmp	r1, r2
 8001668:	d007      	beq.n	800167a <ip_reass+0x72>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800166a:	f8cd 9000 	str.w	r9, [sp]
 800166e:	f8d9 9000 	ldr.w	r9, [r9]
 8001672:	f1b9 0f00 	cmp.w	r9, #0
 8001676:	d1f3      	bne.n	8001660 <ip_reass+0x58>
 8001678:	e00a      	b.n	8001690 <ip_reass+0x88>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800167a:	6922      	ldr	r2, [r4, #16]
 800167c:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001680:	4291      	cmp	r1, r2
 8001682:	d1f2      	bne.n	800166a <ip_reass+0x62>
 8001684:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 8001688:	88a2      	ldrh	r2, [r4, #4]
 800168a:	4291      	cmp	r1, r2
 800168c:	d1ed      	bne.n	800166a <ip_reass+0x62>
 800168e:	e011      	b.n	80016b4 <ip_reass+0xac>
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8001690:	2005      	movs	r0, #5
 8001692:	f000 fd4b 	bl	800212c <memp_malloc>
  if (ipr == NULL) {
 8001696:	4681      	mov	r9, r0
 8001698:	2800      	cmp	r0, #0
 800169a:	f040 80ed 	bne.w	8001878 <ip_reass+0x270>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800169e:	4641      	mov	r1, r8
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7ff ff77 	bl	8001594 <ip_reass_remove_oldest_datagram>
 80016a6:	4580      	cmp	r8, r0
 80016a8:	f340 80df 	ble.w	800186a <ip_reass+0x262>
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80016ac:	4628      	mov	r0, r5
 80016ae:	f000 fe5d 	bl	800236c <pbuf_free>
 80016b2:	e103      	b.n	80018bc <ip_reass+0x2b4>
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 80016b4:	88e0      	ldrh	r0, [r4, #6]
 80016b6:	f000 f9c8 	bl	8001a4a <lwip_ntohs>
 80016ba:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80016be:	b988      	cbnz	r0, 80016e4 <ip_reass+0xdc>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80016c0:	f8b9 000e 	ldrh.w	r0, [r9, #14]
 80016c4:	f000 f9c1 	bl	8001a4a <lwip_ntohs>
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 80016c8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80016cc:	b150      	cbz	r0, 80016e4 <ip_reass+0xdc>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80016ce:	4622      	mov	r2, r4
 80016d0:	f109 0108 	add.w	r1, r9, #8
 80016d4:	f104 0014 	add.w	r0, r4, #20
 80016d8:	f852 eb04 	ldr.w	lr, [r2], #4
 80016dc:	f841 eb04 	str.w	lr, [r1], #4
 80016e0:	4282      	cmp	r2, r0
 80016e2:	d1f9      	bne.n	80016d8 <ip_reass+0xd0>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
 80016e4:	8832      	ldrh	r2, [r6, #0]
 80016e6:	4490      	add	r8, r2
 80016e8:	f8a6 8000 	strh.w	r8, [r6]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 80016ec:	88e2      	ldrh	r2, [r4, #6]
 80016ee:	0691      	lsls	r1, r2, #26
 80016f0:	d40e      	bmi.n	8001710 <ip_reass+0x108>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80016f2:	f899 201e 	ldrb.w	r2, [r9, #30]
    ipr->datagram_len = offset + len;
 80016f6:	9b01      	ldr	r3, [sp, #4]
  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	f889 201e 	strb.w	r2, [r9, #30]
    ipr->datagram_len = offset + len;
 8001700:	f003 020f 	and.w	r2, r3, #15
 8001704:	ebab 0b82 	sub.w	fp, fp, r2, lsl #2
 8001708:	eb0b 0aca 	add.w	sl, fp, sl, lsl #3
 800170c:	f8a9 a01c 	strh.w	sl, [r9, #28]
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
 8001710:	f8d5 8004 	ldr.w	r8, [r5, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8001714:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8001718:	f000 f997 	bl	8001a4a <lwip_ntohs>
 800171c:	f898 4000 	ldrb.w	r4, [r8]
 8001720:	f004 040f 	and.w	r4, r4, #15
 8001724:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
 8001728:	b284      	uxth	r4, r0
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800172a:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800172e:	f000 f98c 	bl	8001a4a <lwip_ntohs>
 8001732:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8001736:	00c0      	lsls	r0, r0, #3
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8001738:	6869      	ldr	r1, [r5, #4]
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800173a:	f8d9 c004 	ldr.w	ip, [r9, #4]
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  iprh->next_pbuf = NULL;
  iprh->start = offset;
 800173e:	8088      	strh	r0, [r1, #4]
  iprh->end = offset + len;
 8001740:	4404      	add	r4, r0
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  iprh->next_pbuf = NULL;
 8001742:	2200      	movs	r2, #0
  iprh->start = offset;
  iprh->end = offset + len;
 8001744:	b2a4      	uxth	r4, r4
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  iprh->next_pbuf = NULL;
 8001746:	700a      	strb	r2, [r1, #0]
 8001748:	704a      	strb	r2, [r1, #1]
 800174a:	708a      	strb	r2, [r1, #2]
 800174c:	70ca      	strb	r2, [r1, #3]
  iprh->start = offset;
  iprh->end = offset + len;
 800174e:	80cc      	strh	r4, [r1, #6]
{
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8001750:	2301      	movs	r3, #1
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8001752:	f1bc 0f00 	cmp.w	ip, #0
 8001756:	f000 80a8 	beq.w	80018aa <ip_reass+0x2a2>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800175a:	f8dc 8004 	ldr.w	r8, [ip, #4]
    if (iprh->start < iprh_tmp->start) {
 800175e:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 8001762:	4550      	cmp	r0, sl
 8001764:	d20a      	bcs.n	800177c <ip_reass+0x174>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8001766:	f8c1 c000 	str.w	ip, [r1]
      if (iprh_prev != NULL) {
 800176a:	b1aa      	cbz	r2, 8001798 <ip_reass+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800176c:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 8001770:	4584      	cmp	ip, r0
 8001772:	d82c      	bhi.n	80017ce <ip_reass+0x1c6>
 8001774:	4554      	cmp	r4, sl
 8001776:	d82a      	bhi.n	80017ce <ip_reass+0x1c6>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8001778:	6015      	str	r5, [r2, #0]
 800177a:	e00f      	b.n	800179c <ip_reass+0x194>
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
 800177c:	d027      	beq.n	80017ce <ip_reass+0x1c6>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
 800177e:	f8b8 c006 	ldrh.w	ip, [r8, #6]
 8001782:	4584      	cmp	ip, r0
 8001784:	d823      	bhi.n	80017ce <ip_reass+0x1c6>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
 8001786:	b11a      	cbz	r2, 8001790 <ip_reass+0x188>
        if (iprh_prev->end != iprh_tmp->start) {
 8001788:	88d2      	ldrh	r2, [r2, #6]
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800178a:	4552      	cmp	r2, sl
 800178c:	bf18      	it	ne
 800178e:	2300      	movne	r3, #0
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8001790:	f8d8 c000 	ldr.w	ip, [r8]
 8001794:	4642      	mov	r2, r8
 8001796:	e7dc      	b.n	8001752 <ip_reass+0x14a>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8001798:	f8c9 5004 	str.w	r5, [r9, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 800179c:	f899 201e 	ldrb.w	r2, [r9, #30]
 80017a0:	07d2      	lsls	r2, r2, #31
 80017a2:	f140 808b 	bpl.w	80018bc <ip_reass+0x2b4>
    /* and had no wholes so far */
    if (valid) {
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8088 	beq.w	80018bc <ip_reass+0x2b4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 80017ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80017b0:	6854      	ldr	r4, [r2, #4]
 80017b2:	88a2      	ldrh	r2, [r4, #4]
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	f040 8081 	bne.w	80018bc <ip_reass+0x2b4>
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
 80017ba:	680a      	ldr	r2, [r1, #0]
        while (q != NULL) {
 80017bc:	b172      	cbz	r2, 80017dc <ip_reass+0x1d4>
          iprh = (struct ip_reass_helper*)q->payload;
 80017be:	6850      	ldr	r0, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80017c0:	88c9      	ldrh	r1, [r1, #6]
 80017c2:	8882      	ldrh	r2, [r0, #4]
 80017c4:	4291      	cmp	r1, r2
 80017c6:	d179      	bne.n	80018bc <ip_reass+0x2b4>
            valid = 0;
            break;
          }
          iprh_prev = iprh;
          q = iprh->next_pbuf;
 80017c8:	6802      	ldr	r2, [r0, #0]
 80017ca:	4601      	mov	r1, r0
 80017cc:	e7f6      	b.n	80017bc <ip_reass+0x1b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80017ce:	4628      	mov	r0, r5
 80017d0:	f000 fe9d 	bl	800250e <pbuf_clen>
 80017d4:	8833      	ldrh	r3, [r6, #0]
 80017d6:	1a18      	subs	r0, r3, r0
 80017d8:	8030      	strh	r0, [r6, #0]
 80017da:	e767      	b.n	80016ac <ip_reass+0xa4>
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80017dc:	f8b9 201c 	ldrh.w	r2, [r9, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80017e0:	6825      	ldr	r5, [r4, #0]
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80017e2:	3214      	adds	r2, #20
 80017e4:	f8a9 201c 	strh.w	r2, [r9, #28]
    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80017e8:	4621      	mov	r1, r4
 80017ea:	f109 0208 	add.w	r2, r9, #8
 80017ee:	f109 001c 	add.w	r0, r9, #28
 80017f2:	f852 eb04 	ldr.w	lr, [r2], #4
 80017f6:	f841 eb04 	str.w	lr, [r1], #4
 80017fa:	4282      	cmp	r2, r0
 80017fc:	d1f9      	bne.n	80017f2 <ip_reass+0x1ea>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 80017fe:	f8b9 001c 	ldrh.w	r0, [r9, #28]
 8001802:	f000 f91f 	bl	8001a44 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8001806:	2200      	movs	r2, #0
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 8001808:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800180a:	71a2      	strb	r2, [r4, #6]
 800180c:	71e2      	strb	r2, [r4, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800180e:	72a2      	strb	r2, [r4, #10]
 8001810:	72e2      	strb	r2, [r4, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8001812:	4620      	mov	r0, r4
 8001814:	2114      	movs	r1, #20
 8001816:	f7ff fcd1 	bl	80011bc <inet_chksum>
 800181a:	8160      	strh	r0, [r4, #10]

    p = ipr->p;
 800181c:	f8d9 4004 	ldr.w	r4, [r9, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 8001820:	b16d      	cbz	r5, 800183e <ip_reass+0x236>
      iprh = (struct ip_reass_helper*)r->payload;
 8001822:	f8d5 8004 	ldr.w	r8, [r5, #4]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
 8001826:	f06f 0113 	mvn.w	r1, #19
 800182a:	4628      	mov	r0, r5
 800182c:	f000 fd72 	bl	8002314 <pbuf_header>
      pbuf_cat(p, r);
 8001830:	4629      	mov	r1, r5
 8001832:	4620      	mov	r0, r4
 8001834:	f000 fe78 	bl	8002528 <pbuf_cat>
      r = iprh->next_pbuf;
 8001838:	f8d8 5000 	ldr.w	r5, [r8]
 800183c:	e7f0      	b.n	8001820 <ip_reass+0x218>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	4591      	cmp	r9, r2
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8001842:	bf0c      	ite	eq
 8001844:	4920      	ldreq	r1, [pc, #128]	; (80018c8 <ip_reass+0x2c0>)
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 8001846:	9b00      	ldrne	r3, [sp, #0]
 8001848:	f8d9 2000 	ldr.w	r2, [r9]
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800184c:	bf0c      	ite	eq
 800184e:	600a      	streq	r2, [r1, #0]
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 8001850:	601a      	strne	r2, [r3, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
 8001852:	4649      	mov	r1, r9
 8001854:	2005      	movs	r0, #5
 8001856:	f000 fc79 	bl	800214c <memp_free>
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800185a:	4620      	mov	r0, r4
 800185c:	f000 fe57 	bl	800250e <pbuf_clen>
 8001860:	8833      	ldrh	r3, [r6, #0]
 8001862:	1a18      	subs	r0, r3, r0
 8001864:	8030      	strh	r0, [r6, #0]

    /* Return the pbuf chain */
    return p;
 8001866:	4620      	mov	r0, r4
 8001868:	e029      	b.n	80018be <ip_reass+0x2b6>
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  if (ipr == NULL) {
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800186a:	2005      	movs	r0, #5
 800186c:	f000 fc5e 	bl	800212c <memp_malloc>
    }
    if (ipr == NULL)
 8001870:	4681      	mov	r9, r0
 8001872:	2800      	cmp	r0, #0
 8001874:	f43f af1a 	beq.w	80016ac <ip_reass+0xa4>
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8001878:	2220      	movs	r2, #32
 800187a:	2100      	movs	r1, #0
 800187c:	4648      	mov	r0, r9
 800187e:	f005 fc75 	bl	800716c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8001882:	2203      	movs	r2, #3
 8001884:	f889 201f 	strb.w	r2, [r9, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	f8c9 2000 	str.w	r2, [r9]
  reassdatagrams = ipr;
 800188e:	f8c7 9000 	str.w	r9, [r7]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8001892:	4622      	mov	r2, r4
 8001894:	f109 0108 	add.w	r1, r9, #8
 8001898:	f104 0014 	add.w	r0, r4, #20
 800189c:	f852 eb04 	ldr.w	lr, [r2], #4
 80018a0:	f841 eb04 	str.w	lr, [r1], #4
 80018a4:	4282      	cmp	r2, r0
 80018a6:	d1f9      	bne.n	800189c <ip_reass+0x294>
 80018a8:	e71c      	b.n	80016e4 <ip_reass+0xdc>
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
    if (iprh_prev != NULL) {
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	f43f af74 	beq.w	8001798 <ip_reass+0x190>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80018b0:	6015      	str	r5, [r2, #0]
      if (iprh_prev->end != iprh->start) {
 80018b2:	88d2      	ldrh	r2, [r2, #6]
        valid = 0;
 80018b4:	4282      	cmp	r2, r0
 80018b6:	bf18      	it	ne
 80018b8:	2300      	movne	r3, #0
 80018ba:	e76f      	b.n	800179c <ip_reass+0x194>
    /* Return the pbuf chain */
    return p;
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80018bc:	2000      	movs	r0, #0
nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  return NULL;
}
 80018be:	b003      	add	sp, #12
 80018c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018c4:	20000598 	.word	0x20000598
 80018c8:	20000594 	.word	0x20000594

080018cc <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 80018cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d0:	b08d      	sub	sp, #52	; 0x34

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 80018d2:	6843      	ldr	r3, [r0, #4]
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 80018d4:	9209      	str	r2, [sp, #36]	; 0x24

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 80018d6:	9303      	str	r3, [sp, #12]
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 80018d8:	9105      	str	r1, [sp, #20]
 80018da:	4605      	mov	r5, r0
  original_iphdr = (struct ip_hdr *)p->payload;
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 80018dc:	88d8      	ldrh	r0, [r3, #6]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
 80018de:	8d0f      	ldrh	r7, [r1, #40]	; 0x28
  original_iphdr = (struct ip_hdr *)p->payload;
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 80018e0:	f000 f8b3 	bl	8001a4a <lwip_ntohs>
  ofo = tmp & IP_OFFMASK;
 80018e4:	f3c0 030c 	ubfx	r3, r0, #0, #13
  omf = tmp & IP_MF;
 80018e8:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
 80018ec:	9302      	str	r3, [sp, #8]
  omf = tmp & IP_MF;
 80018ee:	b283      	uxth	r3, r0
 80018f0:	9307      	str	r3, [sp, #28]

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;
 80018f2:	2208      	movs	r2, #8
 80018f4:	f1a7 0314 	sub.w	r3, r7, #20
 80018f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80018fc:	b29b      	uxth	r3, r3
  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  omf = tmp & IP_MF;

  left = p->tot_len - IP_HLEN;
 80018fe:	892c      	ldrh	r4, [r5, #8]

  nfb = (mtu - IP_HLEN) / 8;
 8001900:	9306      	str	r3, [sp, #24]
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	b29b      	uxth	r3, r3
  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  omf = tmp & IP_MF;

  left = p->tot_len - IP_HLEN;
 8001906:	3c14      	subs	r4, #20
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 8001908:	9308      	str	r3, [sp, #32]
  while (left) {
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
    if (!last) {
 800190a:	f1a7 0313 	sub.w	r3, r7, #19
  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  omf = tmp & IP_MF;

  left = p->tot_len - IP_HLEN;
 800190e:	b2a4      	uxth	r4, r4
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
 8001910:	f04f 0b00 	mov.w	fp, #0
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
 8001914:	2614      	movs	r6, #20
  while (left) {
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
    if (!last) {
 8001916:	930a      	str	r3, [sp, #40]	; 0x28

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
 8001918:	2c00      	cmp	r4, #0
 800191a:	f000 808a 	beq.w	8001a32 <ip_frag+0x166>
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
 800191e:	9b02      	ldr	r3, [sp, #8]
 8001920:	f3c3 0a0c 	ubfx	sl, r3, #0, #13
 8001924:	9b07      	ldr	r3, [sp, #28]
 8001926:	ea43 030a 	orr.w	r3, r3, sl
 800192a:	9304      	str	r3, [sp, #16]
    if (!last) {
 800192c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800192e:	42a3      	cmp	r3, r4
      tmp = tmp | IP_MF;
 8001930:	bfde      	ittt	le
 8001932:	9b04      	ldrle	r3, [sp, #16]
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 8001934:	f8dd a020 	ldrle.w	sl, [sp, #32]
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
    if (!last) {
      tmp = tmp | IP_MF;
 8001938:	f443 5300 	orrle.w	r3, r3, #8192	; 0x2000
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0114 	mov.w	r1, #20
 8001944:	f04f 0002 	mov.w	r0, #2
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
    if (!last) {
      tmp = tmp | IP_MF;
 8001948:	bfd4      	ite	le
 800194a:	9304      	strle	r3, [sp, #16]
 800194c:	46a2      	movgt	sl, r4
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800194e:	f000 fd33 	bl	80023b8 <pbuf_alloc>
    if (rambuf == NULL) {
 8001952:	4680      	mov	r8, r0
 8001954:	2800      	cmp	r0, #0
 8001956:	d06e      	beq.n	8001a36 <ip_frag+0x16a>
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8001958:	9b03      	ldr	r3, [sp, #12]
 800195a:	6842      	ldr	r2, [r0, #4]
 800195c:	4619      	mov	r1, r3
 800195e:	3114      	adds	r1, #20
 8001960:	f853 0b04 	ldr.w	r0, [r3], #4
 8001964:	f842 0b04 	str.w	r0, [r2], #4
 8001968:	428b      	cmp	r3, r1
 800196a:	d1f9      	bne.n	8001960 <ip_frag+0x94>
    iphdr = (struct ip_hdr *)rambuf->payload;

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 800196c:	686b      	ldr	r3, [r5, #4]
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
    iphdr = (struct ip_hdr *)rambuf->payload;
 800196e:	f8d8 9004 	ldr.w	r9, [r8, #4]

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 8001972:	4433      	add	r3, r6
 8001974:	606b      	str	r3, [r5, #4]
    p->len -= poff;
 8001976:	896b      	ldrh	r3, [r5, #10]
 8001978:	1b9e      	subs	r6, r3, r6
 800197a:	816e      	strh	r6, [r5, #10]

    left_to_copy = cop;
 800197c:	4657      	mov	r7, sl
    while (left_to_copy) {
 800197e:	465e      	mov	r6, fp
 8001980:	b377      	cbz	r7, 80019e0 <ip_frag+0x114>
      struct pbuf_custom_ref *pcr;
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 8001982:	896e      	ldrh	r6, [r5, #10]
 8001984:	42be      	cmp	r6, r7
 8001986:	bf28      	it	cs
 8001988:	463e      	movcs	r6, r7
 800198a:	b2b6      	uxth	r6, r6
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800198c:	b336      	cbz	r6, 80019dc <ip_frag+0x110>
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800198e:	2006      	movs	r0, #6
 8001990:	f000 fbcc 	bl	800212c <memp_malloc>
      if (!newpbuflen) {
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 8001994:	4683      	mov	fp, r0
 8001996:	b168      	cbz	r0, 80019b4 <ip_frag+0xe8>
        pbuf_free(rambuf);
        return ERR_MEM;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 8001998:	9601      	str	r6, [sp, #4]
 800199a:	686b      	ldr	r3, [r5, #4]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	4603      	mov	r3, r0
 80019a2:	4631      	mov	r1, r6
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 fc8b 	bl	80022c0 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80019aa:	b938      	cbnz	r0, 80019bc <ip_frag+0xf0>
/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 80019ac:	4659      	mov	r1, fp
 80019ae:	2006      	movs	r0, #6
 80019b0:	f000 fbcc 	bl	800214c <memp_free>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
 80019b4:	4640      	mov	r0, r8
 80019b6:	f000 fcd9 	bl	800236c <pbuf_free>
 80019ba:	e03c      	b.n	8001a36 <ip_frag+0x16a>
 80019bc:	900b      	str	r0, [sp, #44]	; 0x2c
        return ERR_MEM;
      }
      pbuf_ref(p);
 80019be:	4628      	mov	r0, r5
 80019c0:	f000 fdad 	bl	800251e <pbuf_ref>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy -= newpbuflen;
 80019c4:	1bbf      	subs	r7, r7, r6
        pbuf_free(rambuf);
        return ERR_MEM;
      }
      pbuf_ref(p);
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <ip_frag+0x174>)
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        return ERR_MEM;
      }
      pbuf_ref(p);
      pcr->original = p;
 80019c8:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80019cc:	f8cb 3010 	str.w	r3, [fp, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80019d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80019d2:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 80019d4:	b2bf      	uxth	r7, r7
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80019d6:	f000 fda7 	bl	8002528 <pbuf_cat>
      left_to_copy -= newpbuflen;
      if (left_to_copy) {
 80019da:	b10f      	cbz	r7, 80019e0 <ip_frag+0x114>
        p = p->next;
 80019dc:	682d      	ldr	r5, [r5, #0]
 80019de:	e7cf      	b.n	8001980 <ip_frag+0xb4>
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
 80019e0:	9804      	ldr	r0, [sp, #16]
 80019e2:	f000 f82f 	bl	8001a44 <lwip_htons>
 80019e6:	f8a9 0006 	strh.w	r0, [r9, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 80019ea:	f10a 0014 	add.w	r0, sl, #20
 80019ee:	b280      	uxth	r0, r0
 80019f0:	f000 f828 	bl	8001a44 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 80019f4:	2114      	movs	r1, #20
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 80019f6:	f8a9 0002 	strh.w	r0, [r9, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80019fa:	f889 700a 	strb.w	r7, [r9, #10]
 80019fe:	f889 700b 	strb.w	r7, [r9, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8001a02:	4648      	mov	r0, r9
 8001a04:	f7ff fbda 	bl	80011bc <inet_chksum>
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8001a08:	9b05      	ldr	r3, [sp, #20]
 8001a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a0c:	695b      	ldr	r3, [r3, #20]

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
    IPH_CHKSUM_SET(iphdr, 0);
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8001a0e:	f8a9 000a 	strh.w	r0, [r9, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8001a12:	4641      	mov	r1, r8
 8001a14:	9805      	ldr	r0, [sp, #20]
 8001a16:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
 8001a18:	4640      	mov	r0, r8
 8001a1a:	f000 fca7 	bl	800236c <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
    ofo += nfb;
 8001a1e:	9b02      	ldr	r3, [sp, #8]
 8001a20:	9a06      	ldr	r2, [sp, #24]
 8001a22:	4413      	add	r3, r2
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
 8001a24:	ebca 0404 	rsb	r4, sl, r4
    ofo += nfb;
 8001a28:	b29b      	uxth	r3, r3
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
 8001a2a:	b2a4      	uxth	r4, r4
    ofo += nfb;
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	46b3      	mov	fp, r6
 8001a30:	e772      	b.n	8001918 <ip_frag+0x4c>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
 8001a32:	4620      	mov	r0, r4
 8001a34:	e001      	b.n	8001a3a <ip_frag+0x16e>
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      return ERR_MEM;
 8001a36:	f04f 30ff 	mov.w	r0, #4294967295
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
}
 8001a3a:	b00d      	add	sp, #52	; 0x34
 8001a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a40:	080014ed 	.word	0x080014ed

08001a44 <lwip_htons>:
 8001a44:	ba40      	rev16	r0, r0
 8001a46:	b280      	uxth	r0, r0
 8001a48:	4770      	bx	lr

08001a4a <lwip_ntohs>:
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
 8001a4a:	ba40      	rev16	r0, r0
}
 8001a4c:	b280      	uxth	r0, r0
 8001a4e:	4770      	bx	lr

08001a50 <lwip_htonl>:
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
 8001a50:	ba00      	rev	r0, r0
 8001a52:	4770      	bx	lr

08001a54 <lwip_ntohl>:
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  return lwip_htonl(n);
 8001a54:	f7ff bffc 	b.w	8001a50 <lwip_htonl>

08001a58 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8001a58:	7b03      	ldrb	r3, [r0, #12]
 8001a5a:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8001a5c:	bf1f      	itttt	ne
 8001a5e:	2300      	movne	r3, #0
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
    dhcp->state = new_state;
 8001a60:	7301      	strbne	r1, [r0, #12]
    dhcp->tries = 0;
 8001a62:	7343      	strbne	r3, [r0, #13]
    dhcp->request_timeout = 0;
 8001a64:	8343      	strhne	r3, [r0, #26]
 8001a66:	4770      	bx	lr

08001a68 <dhcp_option>:
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8001a68:	8b03      	ldrh	r3, [r0, #24]
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8001a6a:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8001a6c:	6944      	ldr	r4, [r0, #20]
 8001a6e:	1c5d      	adds	r5, r3, #1
 8001a70:	4423      	add	r3, r4
 8001a72:	8305      	strh	r5, [r0, #24]
 8001a74:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8001a78:	8b03      	ldrh	r3, [r0, #24]
 8001a7a:	6941      	ldr	r1, [r0, #20]
 8001a7c:	1c5c      	adds	r4, r3, #1
 8001a7e:	440b      	add	r3, r1
 8001a80:	8304      	strh	r4, [r0, #24]
 8001a82:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8001a86:	bd30      	pop	{r4, r5, pc}

08001a88 <dhcp_option_byte>:
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8001a88:	8b03      	ldrh	r3, [r0, #24]
 8001a8a:	6942      	ldr	r2, [r0, #20]
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8001a8c:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8001a8e:	1c5c      	adds	r4, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	8304      	strh	r4, [r0, #24]
 8001a94:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8001a98:	bd10      	pop	{r4, pc}

08001a9a <dhcp_option_short>:
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8001a9a:	8b03      	ldrh	r3, [r0, #24]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8001a9c:	6942      	ldr	r2, [r0, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8001a9e:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8001aa0:	1c5c      	adds	r4, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	0a0a      	lsrs	r2, r1, #8
 8001aa6:	8304      	strh	r4, [r0, #24]
 8001aa8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8001aac:	8b03      	ldrh	r3, [r0, #24]
 8001aae:	6942      	ldr	r2, [r0, #20]
 8001ab0:	1c5c      	adds	r4, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	8304      	strh	r4, [r0, #24]
 8001ab6:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8001aba:	bd10      	pop	{r4, pc}

08001abc <dhcp_option_long>:
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8001abc:	8b03      	ldrh	r3, [r0, #24]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8001abe:	6942      	ldr	r2, [r0, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8001ac0:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8001ac2:	1c5c      	adds	r4, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	0e0a      	lsrs	r2, r1, #24
 8001ac8:	8304      	strh	r4, [r0, #24]
 8001aca:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8001ace:	8b03      	ldrh	r3, [r0, #24]
 8001ad0:	6942      	ldr	r2, [r0, #20]
 8001ad2:	1c5c      	adds	r4, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	0c0a      	lsrs	r2, r1, #16
 8001ad8:	8304      	strh	r4, [r0, #24]
 8001ada:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8001ade:	8b03      	ldrh	r3, [r0, #24]
 8001ae0:	6942      	ldr	r2, [r0, #20]
 8001ae2:	1c5c      	adds	r4, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	0a0a      	lsrs	r2, r1, #8
 8001ae8:	8304      	strh	r4, [r0, #24]
 8001aea:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8001aee:	8b03      	ldrh	r3, [r0, #24]
 8001af0:	6942      	ldr	r2, [r0, #20]
 8001af2:	1c5c      	adds	r4, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	8304      	strh	r4, [r0, #24]
 8001af8:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8001afc:	bd10      	pop	{r4, pc}
	...

08001b00 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8001b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b04:	460c      	mov	r4, r1
 8001b06:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8001b08:	4607      	mov	r7, r0
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	f000 8091 	beq.w	8001c32 <dhcp_create_msg+0x132>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8001b10:	2900      	cmp	r1, #0
 8001b12:	f000 8092 	beq.w	8001c3a <dhcp_create_msg+0x13a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	f000 fc4b 	bl	80023b8 <pbuf_alloc>
 8001b22:	6120      	str	r0, [r4, #16]
  if (dhcp->p_out == NULL) {
 8001b24:	2800      	cmp	r0, #0
 8001b26:	f000 808c 	beq.w	8001c42 <dhcp_create_msg+0x142>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
 8001b2a:	7b62      	ldrb	r2, [r4, #13]
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <dhcp_create_msg+0x14c>)
 8001b2e:	b912      	cbnz	r2, 8001b36 <dhcp_create_msg+0x36>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	3201      	adds	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
  }
  dhcp->xid = xid;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8001b36:	6842      	ldr	r2, [r0, #4]
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6023      	str	r3, [r4, #0]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8001b3c:	2301      	movs	r3, #1
  }
  dhcp->xid = xid;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8001b3e:	6162      	str	r2, [r4, #20]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8001b40:	7013      	strb	r3, [r2, #0]
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8001b42:	6962      	ldr	r2, [r4, #20]
 8001b44:	7053      	strb	r3, [r2, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8001b46:	6963      	ldr	r3, [r4, #20]
 8001b48:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001b4c:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8001b4e:	6963      	ldr	r3, [r4, #20]
 8001b50:	2500      	movs	r5, #0
 8001b52:	70dd      	strb	r5, [r3, #3]
  dhcp->msg_out->xid = htonl(dhcp->xid);
 8001b54:	6820      	ldr	r0, [r4, #0]
 8001b56:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8001b5a:	f7ff ff79 	bl	8001a50 <lwip_htonl>
  dhcp->msg_out->secs = 0;
 8001b5e:	6963      	ldr	r3, [r4, #20]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
  dhcp->msg_out->xid = htonl(dhcp->xid);
 8001b60:	f8c8 0004 	str.w	r0, [r8, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
 8001b64:	2e08      	cmp	r6, #8
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
  dhcp->msg_out->xid = htonl(dhcp->xid);
  dhcp->msg_out->secs = 0;
 8001b66:	721d      	strb	r5, [r3, #8]
 8001b68:	725d      	strb	r5, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8001b6a:	729d      	strb	r5, [r3, #10]
 8001b6c:	72dd      	strb	r5, [r3, #11]
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
 8001b6e:	731d      	strb	r5, [r3, #12]
 8001b70:	735d      	strb	r5, [r3, #13]
 8001b72:	739d      	strb	r5, [r3, #14]
 8001b74:	73dd      	strb	r5, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
 8001b76:	d007      	beq.n	8001b88 <dhcp_create_msg+0x88>
 8001b78:	2e04      	cmp	r6, #4
 8001b7a:	d005      	beq.n	8001b88 <dhcp_create_msg+0x88>
 8001b7c:	2e03      	cmp	r6, #3
 8001b7e:	d105      	bne.n	8001b8c <dhcp_create_msg+0x8c>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
 8001b80:	7b22      	ldrb	r2, [r4, #12]
 8001b82:	3a04      	subs	r2, #4
 8001b84:	2a01      	cmp	r2, #1
 8001b86:	d801      	bhi.n	8001b8c <dhcp_create_msg+0x8c>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	741a      	strb	r2, [r3, #16]
 8001b90:	745a      	strb	r2, [r3, #17]
 8001b92:	749a      	strb	r2, [r3, #18]
 8001b94:	74da      	strb	r2, [r3, #19]
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
 8001b96:	751a      	strb	r2, [r3, #20]
 8001b98:	755a      	strb	r2, [r3, #21]
 8001b9a:	759a      	strb	r2, [r3, #22]
 8001b9c:	75da      	strb	r2, [r3, #23]
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
 8001b9e:	761a      	strb	r2, [r3, #24]
 8001ba0:	765a      	strb	r2, [r3, #25]
 8001ba2:	769a      	strb	r2, [r3, #26]
 8001ba4:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
 8001ba6:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8001baa:	6963      	ldr	r3, [r4, #20]
 8001bac:	b291      	uxth	r1, r2
 8001bae:	4288      	cmp	r0, r1
 8001bb0:	bf88      	it	hi
 8001bb2:	18b9      	addhi	r1, r7, r2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f102 0201 	add.w	r2, r2, #1
 8001bba:	bf8c      	ite	hi
 8001bbc:	f891 102b 	ldrbhi.w	r1, [r1, #43]	; 0x2b
 8001bc0:	2100      	movls	r1, #0
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8001bc2:	2a10      	cmp	r2, #16
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
 8001bc4:	7719      	strb	r1, [r3, #28]
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8001bc6:	d1ee      	bne.n	8001ba6 <dhcp_create_msg+0xa6>
 8001bc8:	2300      	movs	r3, #0
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6962      	ldr	r2, [r4, #20]
 8001bce:	441a      	add	r2, r3
 8001bd0:	3301      	adds	r3, #1
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
    dhcp->msg_out->sname[i] = 0;
 8001bd4:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8001bd8:	d1f8      	bne.n	8001bcc <dhcp_create_msg+0xcc>
 8001bda:	2200      	movs	r2, #0
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 8001bdc:	4610      	mov	r0, r2
 8001bde:	6963      	ldr	r3, [r4, #20]
 8001be0:	1899      	adds	r1, r3, r2
 8001be2:	3201      	adds	r2, #1
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8001be4:	2a80      	cmp	r2, #128	; 0x80
    dhcp->msg_out->file[i] = 0;
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	f881 006c 	strb.w	r0, [r1, #108]	; 0x6c
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8001bee:	d1f6      	bne.n	8001bde <dhcp_create_msg+0xde>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8001bf0:	6962      	ldr	r2, [r4, #20]
 8001bf2:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8001bf6:	2163      	movs	r1, #99	; 0x63
 8001bf8:	f882 00ed 	strb.w	r0, [r2, #237]	; 0xed
 8001bfc:	2053      	movs	r0, #83	; 0x53
 8001bfe:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
 8001c02:	f882 00ee 	strb.w	r0, [r2, #238]	; 0xee
 8001c06:	f882 10ef 	strb.w	r1, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
 8001c0a:	8323      	strh	r3, [r4, #24]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8001c0c:	6962      	ldr	r2, [r4, #20]
 8001c0e:	441a      	add	r2, r3
 8001c10:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
 8001c14:	3301      	adds	r3, #1
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8001c16:	2b44      	cmp	r3, #68	; 0x44
 8001c18:	d1f8      	bne.n	8001c0c <dhcp_create_msg+0x10c>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	2135      	movs	r1, #53	; 0x35
 8001c20:	f7ff ff22 	bl	8001a68 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8001c24:	4620      	mov	r0, r4
 8001c26:	4631      	mov	r1, r6
 8001c28:	f7ff ff2e 	bl	8001a88 <dhcp_option_byte>
  return ERR_OK;
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8001c32:	f06f 000d 	mvn.w	r0, #13
 8001c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8001c3a:	f06f 0005 	mvn.w	r0, #5
 8001c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  if (dhcp->p_out == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8001c42:	f04f 30ff 	mov.w	r0, #4294967295
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
 8001c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000000 	.word	0x20000000

08001c50 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8001c50:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8001c52:	4604      	mov	r4, r0
 8001c54:	b130      	cbz	r0, 8001c64 <dhcp_delete_msg+0x14>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
 8001c56:	6900      	ldr	r0, [r0, #16]
 8001c58:	b108      	cbz	r0, 8001c5e <dhcp_delete_msg+0xe>
    pbuf_free(dhcp->p_out);
 8001c5a:	f000 fb87 	bl	800236c <pbuf_free>
  }
  dhcp->p_out = NULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6123      	str	r3, [r4, #16]
  dhcp->msg_out = NULL;
 8001c62:	6163      	str	r3, [r4, #20]
 8001c64:	bd10      	pop	{r4, pc}

08001c66 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8001c66:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8001c68:	b190      	cbz	r0, 8001c90 <dhcp_option_trailer+0x2a>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8001c6a:	8b03      	ldrh	r3, [r0, #24]
 8001c6c:	6942      	ldr	r2, [r0, #20]
 8001c6e:	1c59      	adds	r1, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	22ff      	movs	r2, #255	; 0xff
 8001c74:	8301      	strh	r1, [r0, #24]
 8001c76:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8001c7a:	2200      	movs	r2, #0
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8001c7c:	8b03      	ldrh	r3, [r0, #24]
 8001c7e:	2b43      	cmp	r3, #67	; 0x43
 8001c80:	d806      	bhi.n	8001c90 <dhcp_option_trailer+0x2a>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8001c82:	6941      	ldr	r1, [r0, #20]
 8001c84:	1c5c      	adds	r4, r3, #1
 8001c86:	440b      	add	r3, r1
 8001c88:	8304      	strh	r4, [r0, #24]
 8001c8a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8001c8e:	e7f5      	b.n	8001c7c <dhcp_option_trailer+0x16>
 8001c90:	bd10      	pop	{r4, pc}
	...

08001c94 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8001c94:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif->dhcp;
 8001c96:	6a44      	ldr	r4, [r0, #36]	; 0x24
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
 8001c98:	2300      	movs	r3, #0
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8001c9a:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
 8001c9c:	6263      	str	r3, [r4, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_SELECTING);
 8001c9e:	2106      	movs	r1, #6
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7ff fed9 	bl	8001a58 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4621      	mov	r1, r4
 8001caa:	4630      	mov	r0, r6
 8001cac:	f7ff ff28 	bl	8001b00 <dhcp_create_msg>
  if (result == ERR_OK) {
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	bb80      	cbnz	r0, 8001d16 <dhcp_discover+0x82>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	2139      	movs	r1, #57	; 0x39
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff fed5 	bl	8001a68 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8001cbe:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff feea 	bl	8001a9a <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	2137      	movs	r1, #55	; 0x37
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff fecc 	bl	8001a68 <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff fed8 	bl	8001a88 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 8001cd8:	2103      	movs	r1, #3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff fed4 	bl	8001a88 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 8001ce0:	211c      	movs	r1, #28
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f7ff fed0 	bl	8001a88 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 8001ce8:	2106      	movs	r1, #6
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff fecc 	bl	8001a88 <dhcp_option_byte>

    dhcp_option_trailer(dhcp);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff ffb8 	bl	8001c66 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8001cf6:	8b21      	ldrh	r1, [r4, #24]
 8001cf8:	6920      	ldr	r0, [r4, #16]
 8001cfa:	31f0      	adds	r1, #240	; 0xf0
 8001cfc:	b289      	uxth	r1, r1
 8001cfe:	f000 fbe0 	bl	80024c2 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8001d02:	9600      	str	r6, [sp, #0]
 8001d04:	2343      	movs	r3, #67	; 0x43
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <dhcp_discover+0xb4>)
 8001d08:	6921      	ldr	r1, [r4, #16]
 8001d0a:	6860      	ldr	r0, [r4, #4]
 8001d0c:	f002 fe78 	bl	8004a00 <udp_sendto_if>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8001d10:	4620      	mov	r0, r4
 8001d12:	f7ff ff9d 	bl	8001c50 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 8001d16:	7b63      	ldrb	r3, [r4, #13]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	bf98      	it	ls
 8001d20:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 8001d24:	7363      	strb	r3, [r4, #13]
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8001d26:	bf9a      	itte	ls
 8001d28:	fa02 f303 	lslls.w	r3, r2, r3
 8001d2c:	b29b      	uxthls	r3, r3
 8001d2e:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8001d32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8001d36:	4628      	mov	r0, r5
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8001d38:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8001d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d40:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8001d42:	b002      	add	sp, #8
 8001d44:	bd70      	pop	{r4, r5, r6, pc}
 8001d46:	bf00      	nop
 8001d48:	0800a8d0 	.word	0x0800a8d0

08001d4c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8001d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif->dhcp;
 8001d4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8001d50:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
 8001d52:	2103      	movs	r1, #3
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff fe7f 	bl	8001a58 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f7ff fece 	bl	8001b00 <dhcp_create_msg>
  if (result == ERR_OK) {
 8001d64:	4605      	mov	r5, r0
 8001d66:	bb40      	cbnz	r0, 8001dba <dhcp_reboot+0x6e>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8001d68:	2202      	movs	r2, #2
 8001d6a:	2139      	movs	r1, #57	; 0x39
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff fe7b 	bl	8001a68 <dhcp_option>
    dhcp_option_short(dhcp, 576);
 8001d72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff fe8f 	bl	8001a9a <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	2132      	movs	r1, #50	; 0x32
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff fe71 	bl	8001a68 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8001d86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d88:	f7ff fe64 	bl	8001a54 <lwip_ntohl>
 8001d8c:	4601      	mov	r1, r0
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f7ff fe94 	bl	8001abc <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8001d94:	4620      	mov	r0, r4
 8001d96:	f7ff ff66 	bl	8001c66 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8001d9a:	8b21      	ldrh	r1, [r4, #24]
 8001d9c:	6920      	ldr	r0, [r4, #16]
 8001d9e:	31f0      	adds	r1, #240	; 0xf0
 8001da0:	b289      	uxth	r1, r1
 8001da2:	f000 fb8e 	bl	80024c2 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8001da6:	9600      	str	r6, [sp, #0]
 8001da8:	2343      	movs	r3, #67	; 0x43
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <dhcp_reboot+0xa0>)
 8001dac:	6921      	ldr	r1, [r4, #16]
 8001dae:	6860      	ldr	r0, [r4, #4]
 8001db0:	f002 fe26 	bl	8004a00 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7ff ff4b 	bl	8001c50 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 8001dba:	7b63      	ldrb	r3, [r4, #13]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	bf98      	it	ls
 8001dc4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 8001dc8:	7363      	strb	r3, [r4, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8001dca:	bf9d      	ittte	ls
 8001dcc:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8001dd0:	00db      	lslls	r3, r3, #3
 8001dd2:	b29b      	uxthls	r3, r3
 8001dd4:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8001dd8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8001ddc:	4628      	mov	r0, r5
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8001dde:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8001de2:	fb93 f3f2 	sdiv	r3, r3, r2
 8001de6:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8001de8:	b002      	add	sp, #8
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	0800a8d0 	.word	0x0800a8d0

08001df0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8001df0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif->dhcp;
 8001df2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8001df4:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif->dhcp;
  if (!dhcp)
 8001df6:	b1cd      	cbz	r5, 8001e2c <dhcp_network_changed+0x3c>
    return;
  switch (dhcp->state) {
 8001df8:	7b2b      	ldrb	r3, [r5, #12]
 8001dfa:	2b0a      	cmp	r3, #10
 8001dfc:	d810      	bhi.n	8001e20 <dhcp_network_changed+0x30>
 8001dfe:	e8df f003 	tbb	[pc, r3]
 8001e02:	0f15      	.short	0x0f15
 8001e04:	0606060f 	.word	0x0606060f
 8001e08:	0f0f0f0f 	.word	0x0f0f0f0f
 8001e0c:	06          	.byte	0x06
 8001e0d:	00          	.byte	0x00
  case DHCP_REBINDING:
  case DHCP_RENEWING:
  case DHCP_BOUND:
  case DHCP_REBOOTING:
    netif_set_down(netif);
 8001e0e:	f000 fa1c 	bl	800224a <netif_set_down>
    dhcp->tries = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	736b      	strb	r3, [r5, #13]
    dhcp_reboot(netif);
 8001e16:	4620      	mov	r0, r4
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
    break;
  }
}
 8001e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  case DHCP_RENEWING:
  case DHCP_BOUND:
  case DHCP_REBOOTING:
    netif_set_down(netif);
    dhcp->tries = 0;
    dhcp_reboot(netif);
 8001e1c:	f7ff bf96 	b.w	8001d4c <dhcp_reboot>
    break;
  case DHCP_OFF:
    /* stay off */
    break;
  default:
    dhcp->tries = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	736b      	strb	r3, [r5, #13]
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
    break;
  }
}
 8001e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
 8001e28:	f7ff bf34 	b.w	8001c94 <dhcp_discover>
 8001e2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e30 <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
 8001e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8001e32:	4605      	mov	r5, r0
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d037      	beq.n	8001ea8 <dhcp_arp_reply+0x78>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
 8001e38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001e3a:	2c00      	cmp	r4, #0
 8001e3c:	d034      	beq.n	8001ea8 <dhcp_arp_reply+0x78>
 8001e3e:	7b23      	ldrb	r3, [r4, #12]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d131      	bne.n	8001ea8 <dhcp_arp_reply+0x78>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
 8001e44:	680a      	ldr	r2, [r1, #0]
 8001e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d12d      	bne.n	8001ea8 <dhcp_arp_reply+0x78>
{
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 8001e4c:	210c      	movs	r1, #12
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff fe02 	bl	8001a58 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8001e54:	2204      	movs	r2, #4
 8001e56:	4621      	mov	r1, r4
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f7ff fe51 	bl	8001b00 <dhcp_create_msg>
  if (result == ERR_OK) {
 8001e5e:	b9f0      	cbnz	r0, 8001e9e <dhcp_arp_reply+0x6e>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8001e60:	2204      	movs	r2, #4
 8001e62:	2132      	movs	r1, #50	; 0x32
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7ff fdff 	bl	8001a68 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8001e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e6c:	f7ff fdf2 	bl	8001a54 <lwip_ntohl>
 8001e70:	4601      	mov	r1, r0
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff fe22 	bl	8001abc <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fef4 	bl	8001c66 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8001e7e:	8b21      	ldrh	r1, [r4, #24]
 8001e80:	6920      	ldr	r0, [r4, #16]
 8001e82:	31f0      	adds	r1, #240	; 0xf0
 8001e84:	b289      	uxth	r1, r1
 8001e86:	f000 fb1c 	bl	80024c2 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8001e8a:	9500      	str	r5, [sp, #0]
 8001e8c:	2343      	movs	r3, #67	; 0x43
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <dhcp_arp_reply+0x7c>)
 8001e90:	6921      	ldr	r1, [r4, #16]
 8001e92:	6860      	ldr	r0, [r4, #4]
 8001e94:	f002 fdb4 	bl	8004a00 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff fed9 	bl	8001c50 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 8001e9e:	7b63      	ldrb	r3, [r4, #13]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	7363      	strb	r3, [r4, #13]
  msecs = 10*1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8001ea4:	2314      	movs	r3, #20
 8001ea6:	8363      	strh	r3, [r4, #26]
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
    }
  }
}
 8001ea8:	b003      	add	sp, #12
 8001eaa:	bd30      	pop	{r4, r5, pc}
 8001eac:	0800a8d0 	.word	0x0800a8d0

08001eb0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <mem_init+0x2c>)
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <mem_init+0x30>)
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <mem_init+0x34>)

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8001ebc:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  mem->prev = 0;
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8001ec4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8001ec6:	185a      	adds	r2, r3, r1
 8001ec8:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8001eca:	2001      	movs	r0, #1

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8001ecc:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8001ece:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8001ed0:	8051      	strh	r1, [r2, #2]
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  ram_end->used = 1;
 8001ed2:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <mem_init+0x38>)
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20002c07 	.word	0x20002c07
 8001ee0:	200005a4 	.word	0x200005a4
 8001ee4:	200005a0 	.word	0x200005a0
 8001ee8:	2000059c 	.word	0x2000059c

08001eec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d03a      	beq.n	8001f68 <mem_free+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <mem_free+0x80>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8001ef6:	4298      	cmp	r0, r3
 8001ef8:	d336      	bcc.n	8001f68 <mem_free+0x7c>
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <mem_free+0x84>)
 8001efc:	6816      	ldr	r6, [r2, #0]
 8001efe:	42b0      	cmp	r0, r6
 8001f00:	d232      	bcs.n	8001f68 <mem_free+0x7c>
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 8001f02:	2100      	movs	r1, #0
 8001f04:	f800 1c04 	strb.w	r1, [r0, #-4]

  if (mem < lfree) {
 8001f08:	491a      	ldr	r1, [pc, #104]	; (8001f74 <mem_free+0x88>)
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 8001f0a:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8001f0e:	680c      	ldr	r4, [r1, #0]
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8001f10:	f1a0 0208 	sub.w	r2, r0, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
 8001f14:	42a2      	cmp	r2, r4
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 8001f16:	eb03 0405 	add.w	r4, r3, r5
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8001f1a:	bf38      	it	cc
 8001f1c:	600a      	strcc	r2, [r1, #0]

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8001f1e:	42a2      	cmp	r2, r4
 8001f20:	d00f      	beq.n	8001f42 <mem_free+0x56>
 8001f22:	7927      	ldrb	r7, [r4, #4]
 8001f24:	b96f      	cbnz	r7, 8001f42 <mem_free+0x56>
 8001f26:	42a6      	cmp	r6, r4
 8001f28:	d00b      	beq.n	8001f42 <mem_free+0x56>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8001f2a:	680e      	ldr	r6, [r1, #0]
 8001f2c:	42b4      	cmp	r4, r6
      lfree = mem;
 8001f2e:	bf04      	itt	eq
 8001f30:	4c10      	ldreq	r4, [pc, #64]	; (8001f74 <mem_free+0x88>)
 8001f32:	6022      	streq	r2, [r4, #0]
    }
    mem->next = nmem->next;
 8001f34:	5b5c      	ldrh	r4, [r3, r5]
 8001f36:	f820 4c08 	strh.w	r4, [r0, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8001f3a:	5b5c      	ldrh	r4, [r3, r5]
 8001f3c:	441c      	add	r4, r3
 8001f3e:	1ad5      	subs	r5, r2, r3
 8001f40:	8065      	strh	r5, [r4, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8001f42:	f830 4c06 	ldrh.w	r4, [r0, #-6]
 8001f46:	191d      	adds	r5, r3, r4
  if (pmem != mem && pmem->used == 0) {
 8001f48:	42aa      	cmp	r2, r5
 8001f4a:	d00d      	beq.n	8001f68 <mem_free+0x7c>
 8001f4c:	792e      	ldrb	r6, [r5, #4]
 8001f4e:	b95e      	cbnz	r6, 8001f68 <mem_free+0x7c>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8001f50:	6809      	ldr	r1, [r1, #0]
 8001f52:	428a      	cmp	r2, r1
      lfree = pmem;
 8001f54:	bf04      	itt	eq
 8001f56:	4a07      	ldreq	r2, [pc, #28]	; (8001f74 <mem_free+0x88>)
 8001f58:	6015      	streq	r5, [r2, #0]
    }
    pmem->next = mem->next;
 8001f5a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
 8001f5e:	531a      	strh	r2, [r3, r4]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8001f60:	f830 2c08 	ldrh.w	r2, [r0, #-8]
 8001f64:	4413      	add	r3, r2
 8001f66:	805c      	strh	r4, [r3, #2]
 8001f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200005a4 	.word	0x200005a4
 8001f70:	200005a0 	.word	0x200005a0
 8001f74:	2000059c 	.word	0x2000059c

08001f78 <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8001f78:	3103      	adds	r1, #3
 8001f7a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8001f7e:	400a      	ands	r2, r1

  if(newsize < MIN_SIZE_ALIGNED) {
 8001f80:	2a0b      	cmp	r2, #11
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8001f82:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);

  if(newsize < MIN_SIZE_ALIGNED) {
 8001f84:	d903      	bls.n	8001f8e <mem_trim+0x16>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8001f86:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8001f8a:	d901      	bls.n	8001f90 <mem_trim+0x18>
 8001f8c:	e043      	b.n	8002016 <mem_trim+0x9e>
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);

  if(newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8001f8e:	220c      	movs	r2, #12

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <mem_trim+0xa4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8001f94:	4283      	cmp	r3, r0
 8001f96:	d83f      	bhi.n	8002018 <mem_trim+0xa0>
 8001f98:	4921      	ldr	r1, [pc, #132]	; (8002020 <mem_trim+0xa8>)
 8001f9a:	6809      	ldr	r1, [r1, #0]
 8001f9c:	4288      	cmp	r0, r1
 8001f9e:	d23b      	bcs.n	8002018 <mem_trim+0xa0>
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8001fa0:	f1a0 0408 	sub.w	r4, r0, #8

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8001fa4:	f830 5c08 	ldrh.w	r5, [r0, #-8]
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8001fa8:	1ae4      	subs	r4, r4, r3
 8001faa:	b2a4      	uxth	r4, r4

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8001fac:	f1a5 0108 	sub.w	r1, r5, #8
 8001fb0:	1b09      	subs	r1, r1, r4
 8001fb2:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 8001fb4:	4291      	cmp	r1, r2
 8001fb6:	d32e      	bcc.n	8002016 <mem_trim+0x9e>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8001fb8:	d02e      	beq.n	8002018 <mem_trim+0xa0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8001fba:	195e      	adds	r6, r3, r5
  if(mem2->used == 0) {
 8001fbc:	7937      	ldrb	r7, [r6, #4]
 8001fbe:	b97f      	cbnz	r7, 8001fe0 <mem_trim+0x68>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8001fc0:	5b5f      	ldrh	r7, [r3, r5]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    if (lfree == mem2) {
 8001fc2:	4d18      	ldr	r5, [pc, #96]	; (8002024 <mem_trim+0xac>)
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8001fc4:	f104 0108 	add.w	r1, r4, #8
 8001fc8:	440a      	add	r2, r1
    if (lfree == mem2) {
 8001fca:	6829      	ldr	r1, [r5, #0]
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8001fcc:	b292      	uxth	r2, r2
    if (lfree == mem2) {
 8001fce:	428e      	cmp	r6, r1
 8001fd0:	eb03 0102 	add.w	r1, r3, r2
      lfree = (struct mem *)(void *)&ram[ptr2];
 8001fd4:	bf08      	it	eq
 8001fd6:	6029      	streq	r1, [r5, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
    mem2->used = 0;
 8001fd8:	2500      	movs	r5, #0
 8001fda:	710d      	strb	r5, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8001fdc:	529f      	strh	r7, [r3, r2]
 8001fde:	e010      	b.n	8002002 <mem_trim+0x8a>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8001fe0:	f102 0614 	add.w	r6, r2, #20
 8001fe4:	428e      	cmp	r6, r1
 8001fe6:	d817      	bhi.n	8002018 <mem_trim+0xa0>
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8001fe8:	4e0e      	ldr	r6, [pc, #56]	; (8002024 <mem_trim+0xac>)
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8001fea:	f104 0108 	add.w	r1, r4, #8
 8001fee:	440a      	add	r2, r1
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 8001ff0:	6837      	ldr	r7, [r6, #0]
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8001ff2:	b292      	uxth	r2, r2
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8001ff4:	1899      	adds	r1, r3, r2
    if (mem2 < lfree) {
 8001ff6:	42b9      	cmp	r1, r7
      lfree = mem2;
 8001ff8:	bf38      	it	cc
 8001ffa:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 8001ffc:	2600      	movs	r6, #0
 8001ffe:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 8002000:	529d      	strh	r5, [r3, r2]
    mem2->prev = ptr;
 8002002:	804c      	strh	r4, [r1, #2]
    mem->next = ptr2;
 8002004:	f820 2c08 	strh.w	r2, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8002008:	5a99      	ldrh	r1, [r3, r2]
 800200a:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 800200e:	d003      	beq.n	8002018 <mem_trim+0xa0>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8002010:	440b      	add	r3, r1
 8002012:	805a      	strh	r2, [r3, #2]
 8002014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
 8002016:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201a:	bf00      	nop
 800201c:	200005a4 	.word	0x200005a4
 8002020:	200005a0 	.word	0x200005a0
 8002024:	2000059c 	.word	0x2000059c

08002028 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8002028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800202c:	2800      	cmp	r0, #0
 800202e:	d04d      	beq.n	80020cc <mem_malloc+0xa4>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8002030:	3003      	adds	r0, #3
 8002032:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002036:	4003      	ands	r3, r0

  if(size < MIN_SIZE_ALIGNED) {
 8002038:	2b0b      	cmp	r3, #11
 800203a:	d903      	bls.n	8002044 <mem_malloc+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800203c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8002040:	d901      	bls.n	8002046 <mem_malloc+0x1e>
 8002042:	e042      	b.n	80020ca <mem_malloc+0xa2>
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);

  if(size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8002044:	230c      	movs	r3, #12
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8002046:	4d22      	ldr	r5, [pc, #136]	; (80020d0 <mem_malloc+0xa8>)
 8002048:	4e22      	ldr	r6, [pc, #136]	; (80020d4 <mem_malloc+0xac>)
 800204a:	6829      	ldr	r1, [r5, #0]
 800204c:	6834      	ldr	r4, [r6, #0]
 800204e:	1b0a      	subs	r2, r1, r4
 8002050:	b292      	uxth	r2, r2
 8002052:	f5c3 5820 	rsb	r8, r3, #10240	; 0x2800
 8002056:	4542      	cmp	r2, r8
 8002058:	da37      	bge.n	80020ca <mem_malloc+0xa2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800205a:	18a0      	adds	r0, r4, r2
 800205c:	f834 e002 	ldrh.w	lr, [r4, r2]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8002060:	f890 c004 	ldrb.w	ip, [r0, #4]
 8002064:	f1bc 0f00 	cmp.w	ip, #0
 8002068:	d12d      	bne.n	80020c6 <mem_malloc+0x9e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800206a:	f1ae 0708 	sub.w	r7, lr, #8
 800206e:	1abf      	subs	r7, r7, r2
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8002070:	429f      	cmp	r7, r3
 8002072:	d328      	bcc.n	80020c6 <mem_malloc+0x9e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8002074:	f103 0814 	add.w	r8, r3, #20
 8002078:	4547      	cmp	r7, r8
 800207a:	d312      	bcc.n	80020a2 <mem_malloc+0x7a>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800207c:	3308      	adds	r3, #8
 800207e:	4413      	add	r3, r2
 8002080:	b29b      	uxth	r3, r3
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8002082:	18e7      	adds	r7, r4, r3
          mem2->used = 0;
 8002084:	f887 c004 	strb.w	ip, [r7, #4]
          mem2->next = mem->next;
 8002088:	f824 e003 	strh.w	lr, [r4, r3]
          mem2->prev = ptr;
 800208c:	807a      	strh	r2, [r7, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 800208e:	2201      	movs	r2, #1
          mem2 = (struct mem *)(void *)&ram[ptr2];
          mem2->used = 0;
          mem2->next = mem->next;
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8002090:	8003      	strh	r3, [r0, #0]
          mem->used = 1;
 8002092:	7102      	strb	r2, [r0, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8002094:	5ae2      	ldrh	r2, [r4, r3]
 8002096:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800209a:	d004      	beq.n	80020a6 <mem_malloc+0x7e>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800209c:	4414      	add	r4, r2
 800209e:	8063      	strh	r3, [r4, #2]
 80020a0:	e001      	b.n	80020a6 <mem_malloc+0x7e>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80020a6:	4281      	cmp	r1, r0
 80020a8:	d10a      	bne.n	80020c0 <mem_malloc+0x98>
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <mem_malloc+0xb0>)
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80020ac:	6832      	ldr	r2, [r6, #0]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	790c      	ldrb	r4, [r1, #4]
 80020b2:	b124      	cbz	r4, 80020be <mem_malloc+0x96>
 80020b4:	4299      	cmp	r1, r3
 80020b6:	d002      	beq.n	80020be <mem_malloc+0x96>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80020b8:	8809      	ldrh	r1, [r1, #0]
 80020ba:	4411      	add	r1, r2
 80020bc:	e7f8      	b.n	80020b0 <mem_malloc+0x88>
          }
          lfree = cur;
 80020be:	6029      	str	r1, [r5, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80020c0:	3008      	adds	r0, #8
 80020c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80020c6:	4672      	mov	r2, lr
 80020c8:	e7c5      	b.n	8002056 <mem_malloc+0x2e>
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    return NULL;
 80020ca:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 80020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d0:	2000059c 	.word	0x2000059c
 80020d4:	200005a4 	.word	0x200005a4
 80020d8:	200005a0 	.word	0x200005a0

080020dc <memp_init>:
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 80020dc:	4a0f      	ldr	r2, [pc, #60]	; (800211c <memp_init+0x40>)
 80020de:	4910      	ldr	r1, [pc, #64]	; (8002120 <memp_init+0x44>)
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 80020e2:	2300      	movs	r3, #0
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 80020e4:	4d0f      	ldr	r5, [pc, #60]	; (8002124 <memp_init+0x48>)
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 80020e6:	4e10      	ldr	r6, [pc, #64]	; (8002128 <memp_init+0x4c>)
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 80020e8:	f022 0203 	bic.w	r2, r2, #3
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
 80020ec:	461c      	mov	r4, r3
 80020ee:	f841 4f04 	str.w	r4, [r1, #4]!
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 80020f2:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
 80020f6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80020fa:	2000      	movs	r0, #0
 80020fc:	b287      	uxth	r7, r0
 80020fe:	45be      	cmp	lr, r7
 8002100:	d907      	bls.n	8002112 <memp_init+0x36>
      memp->next = memp_tab[i];
 8002102:	680f      	ldr	r7, [r1, #0]
 8002104:	6017      	str	r7, [r2, #0]
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 8002106:	f83c 7006 	ldrh.w	r7, [ip, r6]
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
 800210a:	600a      	str	r2, [r1, #0]
 800210c:	3001      	adds	r0, #1
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 800210e:	443a      	add	r2, r7
 8002110:	e7f4      	b.n	80020fc <memp_init+0x20>
 8002112:	3301      	adds	r3, #1

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8002114:	2b09      	cmp	r3, #9
 8002116:	d1ea      	bne.n	80020ee <memp_init+0x12>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211a:	bf00      	nop
 800211c:	200005ab 	.word	0x200005ab
 8002120:	20002a78 	.word	0x20002a78
 8002124:	0800a8d8 	.word	0x0800a8d8
 8002128:	0800a8ea 	.word	0x0800a8ea

0800212c <memp_malloc>:
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800212c:	2808      	cmp	r0, #8
 800212e:	d807      	bhi.n	8002140 <memp_malloc+0x14>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 8002130:	4a05      	ldr	r2, [pc, #20]	; (8002148 <memp_malloc+0x1c>)
 8002132:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  
  if (memp != NULL) {
 8002136:	b12b      	cbz	r3, 8002144 <memp_malloc+0x18>
    memp_tab[type] = memp->next;
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800213e:	e001      	b.n	8002144 <memp_malloc+0x18>
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8002140:	2000      	movs	r0, #0
 8002142:	4770      	bx	lr
 8002144:	4618      	mov	r0, r3
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
 8002146:	4770      	bx	lr
 8002148:	20002a7c 	.word	0x20002a7c

0800214c <memp_free>:
memp_free(memp_t type, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 800214c:	b129      	cbz	r1, 800215a <memp_free+0xe>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
 800214e:	4b03      	ldr	r3, [pc, #12]	; (800215c <memp_free+0x10>)
 8002150:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8002154:	600a      	str	r2, [r1, #0]
  memp_tab[type] = memp;
 8002156:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800215a:	4770      	bx	lr
 800215c:	20002a7c 	.word	0x20002a7c

08002160 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4605      	mov	r5, r0
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
 8002164:	460c      	mov	r4, r1
 8002166:	b1e1      	cbz	r1, 80021a2 <netif_set_ipaddr+0x42>
 8002168:	680a      	ldr	r2, [r1, #0]
 800216a:	6843      	ldr	r3, [r0, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d017      	beq.n	80021a0 <netif_set_ipaddr+0x40>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <netif_set_ipaddr+0x48>)
 8002172:	6818      	ldr	r0, [r3, #0]
    while (pcb != NULL) {
 8002174:	b140      	cbz	r0, 8002188 <netif_set_ipaddr+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
 8002176:	6802      	ldr	r2, [r0, #0]
 8002178:	686b      	ldr	r3, [r5, #4]
 800217a:	68c6      	ldr	r6, [r0, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d101      	bne.n	8002184 <netif_set_ipaddr+0x24>
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
 8002180:	f000 fed6 	bl	8002f30 <tcp_abort>
        pcb = next;
      } else {
        pcb = pcb->next;
 8002184:	4630      	mov	r0, r6
 8002186:	e7f5      	b.n	8002174 <netif_set_ipaddr+0x14>
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <netif_set_ipaddr+0x4c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b143      	cbz	r3, 80021a0 <netif_set_ipaddr+0x40>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	b122      	cbz	r2, 800219c <netif_set_ipaddr+0x3c>
 8002192:	6869      	ldr	r1, [r5, #4]
 8002194:	428a      	cmp	r2, r1
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
 8002196:	bf04      	itt	eq
 8002198:	6822      	ldreq	r2, [r4, #0]
 800219a:	601a      	streq	r2, [r3, #0]
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	e7f5      	b.n	800218c <netif_set_ipaddr+0x2c>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 80021a0:	6824      	ldr	r4, [r4, #0]
 80021a2:	606c      	str	r4, [r5, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 80021a4:	bd70      	pop	{r4, r5, r6, pc}
 80021a6:	bf00      	nop
 80021a8:	20005424 	.word	0x20005424
 80021ac:	2000542c 	.word	0x2000542c

080021b0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	4615      	mov	r5, r2
 80021b4:	4606      	mov	r6, r0
 80021b6:	461c      	mov	r4, r3
  netif_set_ipaddr(netif, ipaddr);
 80021b8:	f7ff ffd2 	bl	8002160 <netif_set_ipaddr>
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 80021bc:	b105      	cbz	r5, 80021c0 <netif_set_addr+0x10>
 80021be:	682d      	ldr	r5, [r5, #0]
 80021c0:	60b5      	str	r5, [r6, #8]
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
  ip_addr_set(&(netif->gw), gw);
 80021c2:	b104      	cbz	r4, 80021c6 <netif_set_addr+0x16>
 80021c4:	6824      	ldr	r4, [r4, #0]
 80021c6:	60f4      	str	r4, [r6, #12]
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080021cc <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 80021ce:	4f11      	ldr	r7, [pc, #68]	; (8002214 <netif_add+0x48>)
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80021d0:	9e06      	ldr	r6, [sp, #24]
 80021d2:	6206      	str	r6, [r0, #32]
  netif->num = netif_num++;
 80021d4:	783e      	ldrb	r6, [r7, #0]
 80021d6:	f880 6034 	strb.w	r6, [r0, #52]	; 0x34
{

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 80021da:	2500      	movs	r5, #0
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 80021dc:	f106 0e01 	add.w	lr, r6, #1
  netif->input = input;
 80021e0:	9e08      	ldr	r6, [sp, #32]
{

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 80021e2:	6045      	str	r5, [r0, #4]
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 80021e4:	4604      	mov	r4, r0

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
  ip_addr_set_zero(&netif->netmask);
 80021e6:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero(&netif->gw);
 80021e8:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
 80021ea:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
 80021ee:	6245      	str	r5, [r0, #36]	; 0x24
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80021f0:	61c5      	str	r5, [r0, #28]
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
  netif->input = input;
 80021f2:	6106      	str	r6, [r0, #16]
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 80021f4:	f887 e000 	strb.w	lr, [r7]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 80021f8:	f7ff ffda 	bl	80021b0 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80021fc:	4620      	mov	r0, r4
 80021fe:	9b07      	ldr	r3, [sp, #28]
 8002200:	4798      	blx	r3
 8002202:	b928      	cbnz	r0, 8002210 <netif_add+0x44>
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <netif_add+0x4c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	6022      	str	r2, [r4, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800220a:	4620      	mov	r0, r4
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
  netif_list = netif;
 800220c:	601c      	str	r4, [r3, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800220e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  netif_set_addr(netif, ipaddr, netmask, gw);

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    return NULL;
 8002210:	4628      	mov	r0, r5
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
}
 8002212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002214:	20002aa0 	.word	0x20002aa0
 8002218:	20005418 	.word	0x20005418

0800221c <netif_set_default>:
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 800221c:	4b01      	ldr	r3, [pc, #4]	; (8002224 <netif_set_default+0x8>)
 800221e:	6018      	str	r0, [r3, #0]
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	2000541c 	.word	0x2000541c

08002228 <netif_set_up>:
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8002228:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800222c:	07da      	lsls	r2, r3, #31
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
 800222e:	4601      	mov	r1, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8002230:	d40a      	bmi.n	8002248 <netif_set_up+0x20>
    netif->flags |= NETIF_FLAG_UP;
 8002232:	f043 0201 	orr.w	r2, r3, #1
    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8002236:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800223a:	2b30      	cmp	r3, #48	; 0x30
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
    netif->flags |= NETIF_FLAG_UP;
 800223c:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8002240:	d102      	bne.n	8002248 <netif_set_up+0x20>
        etharp_gratuitous(netif);
 8002242:	3104      	adds	r1, #4
 8002244:	f002 bd06 	b.w	8004c54 <etharp_request>
 8002248:	4770      	bx	lr

0800224a <netif_set_down>:
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800224a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800224e:	07d9      	lsls	r1, r3, #31
 8002250:	d507      	bpl.n	8002262 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8002252:	f023 0101 	bic.w	r1, r3, #1
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8002256:	069b      	lsls	r3, r3, #26
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
    netif->flags &= ~NETIF_FLAG_UP;
 8002258:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800225c:	d501      	bpl.n	8002262 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800225e:	f002 bce5 	b.w	8004c2c <etharp_cleanup_netif>
 8002262:	4770      	bx	lr

08002264 <netif_set_link_up>:

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
 8002264:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8002266:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800226a:	06da      	lsls	r2, r3, #27

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
 800226c:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800226e:	d417      	bmi.n	80022a0 <netif_set_link_up+0x3c>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31

#if LWIP_DHCP
    if (netif->dhcp) {
 8002278:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800227a:	b10b      	cbz	r3, 8002280 <netif_set_link_up+0x1c>
      dhcp_network_changed(netif);
 800227c:	f7ff fdb8 	bl	8001df0 <dhcp_network_changed>
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & NETIF_FLAG_ETHARP) {
 8002280:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8002284:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002288:	2b21      	cmp	r3, #33	; 0x21
 800228a:	d103      	bne.n	8002294 <netif_set_link_up+0x30>
        etharp_gratuitous(netif);
 800228c:	1d21      	adds	r1, r4, #4
 800228e:	4620      	mov	r0, r4
 8002290:	f002 fce0 	bl	8004c54 <etharp_request>
      if (netif->flags & NETIF_FLAG_IGMP) {
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
 8002294:	69e3      	ldr	r3, [r4, #28]
 8002296:	b11b      	cbz	r3, 80022a0 <netif_set_link_up+0x3c>
 8002298:	4620      	mov	r0, r4
  }
}
 800229a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      if (netif->flags & NETIF_FLAG_IGMP) {
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
 800229e:	4718      	bx	r3
 80022a0:	bd10      	pop	{r4, pc}

080022a2 <netif_set_link_down>:
/**
 * Called by a driver when its link goes down
 */
void netif_set_link_down(struct netif *netif )
{
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80022a2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80022a6:	06d9      	lsls	r1, r3, #27
 80022a8:	d506      	bpl.n	80022b8 <netif_set_link_down+0x16>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 80022aa:	f023 0310 	bic.w	r3, r3, #16
 80022ae:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80022b2:	69c3      	ldr	r3, [r0, #28]
 80022b4:	b103      	cbz	r3, 80022b8 <netif_set_link_down+0x16>
 80022b6:	4718      	bx	r3
 80022b8:	4770      	bx	lr

080022ba <netif_set_link_callback>:
/**
 * Set callback to be called when link is brought up/down
 */
void netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  if (netif) {
 80022ba:	b100      	cbz	r0, 80022be <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80022bc:	61c1      	str	r1, [r0, #28]
 80022be:	4770      	bx	lr

080022c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	9e04      	ldr	r6, [sp, #16]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80022c4:	2803      	cmp	r0, #3
 80022c6:	d823      	bhi.n	8002310 <pbuf_alloced_custom+0x50>
 80022c8:	e8df f000 	tbb	[pc, r0]
 80022cc:	06040208 	.word	0x06040208
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    break;
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80022d0:	2422      	movs	r4, #34	; 0x22
 80022d2:	e004      	b.n	80022de <pbuf_alloced_custom+0x1e>
    break;
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 80022d4:	240e      	movs	r4, #14
    break;
 80022d6:	e002      	b.n	80022de <pbuf_alloced_custom+0x1e>
  case PBUF_RAW:
    offset = 0;
 80022d8:	2400      	movs	r4, #0
    break;
 80022da:	e000      	b.n	80022de <pbuf_alloced_custom+0x1e>

  /* determine header offset */
  switch (l) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80022dc:	2436      	movs	r4, #54	; 0x36
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80022de:	1ce5      	adds	r5, r4, #3
 80022e0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80022e4:	f025 0403 	bic.w	r4, r5, #3
 80022e8:	1865      	adds	r5, r4, r1
 80022ea:	4285      	cmp	r5, r0
 80022ec:	f04f 0000 	mov.w	r0, #0
 80022f0:	dc0f      	bgt.n	8002312 <pbuf_alloced_custom+0x52>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  p->pbuf.next = NULL;
 80022f2:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 80022f4:	b116      	cbz	r6, 80022fc <pbuf_alloced_custom+0x3c>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80022f6:	4434      	add	r4, r6
 80022f8:	605c      	str	r4, [r3, #4]
 80022fa:	e000      	b.n	80022fe <pbuf_alloced_custom+0x3e>
  } else {
    p->pbuf.payload = NULL;
 80022fc:	605e      	str	r6, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80022fe:	2002      	movs	r0, #2
  p->pbuf.len = p->pbuf.tot_len = length;
  p->pbuf.type = type;
 8002300:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8002302:	2201      	movs	r2, #1
  if (payload_mem != NULL) {
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  } else {
    p->pbuf.payload = NULL;
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8002304:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8002306:	8119      	strh	r1, [r3, #8]
 8002308:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
  p->pbuf.ref = 1;
 800230a:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800230c:	4618      	mov	r0, r3
 800230e:	bd70      	pop	{r4, r5, r6, pc}
  case PBUF_RAW:
    offset = 0;
    break;
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
 8002310:	2000      	movs	r0, #0
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  p->pbuf.len = p->pbuf.tot_len = length;
  p->pbuf.type = type;
  p->pbuf.ref = 1;
  return &p->pbuf;
}
 8002312:	bd70      	pop	{r4, r5, r6, pc}

08002314 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8002314:	b510      	push	{r4, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 8002316:	b329      	cbz	r1, 8002364 <pbuf_header+0x50>
 8002318:	b338      	cbz	r0, 800236a <pbuf_header+0x56>
    return 0;
  }
 
  if (header_size_increment < 0){
 800231a:	2900      	cmp	r1, #0
 800231c:	da05      	bge.n	800232a <pbuf_header+0x16>
    increment_magnitude = -header_size_increment;
 800231e:	424a      	negs	r2, r1
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8002320:	8943      	ldrh	r3, [r0, #10]
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }
 
  if (header_size_increment < 0){
    increment_magnitude = -header_size_increment;
 8002322:	b292      	uxth	r2, r2
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8002324:	4293      	cmp	r3, r2
 8002326:	d201      	bcs.n	800232c <pbuf_header+0x18>
 8002328:	e01e      	b.n	8002368 <pbuf_header+0x54>
  } else {
    increment_magnitude = header_size_increment;
 800232a:	b28a      	uxth	r2, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800232c:	7b04      	ldrb	r4, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800232e:	6843      	ldr	r3, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8002330:	b10c      	cbz	r4, 8002336 <pbuf_header+0x22>
 8002332:	2c03      	cmp	r4, #3
 8002334:	d105      	bne.n	8002342 <pbuf_header+0x2e>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8002336:	1a5b      	subs	r3, r3, r1
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8002338:	f100 0210 	add.w	r2, r0, #16
 800233c:	4293      	cmp	r3, r2
 800233e:	d209      	bcs.n	8002354 <pbuf_header+0x40>
 8002340:	e012      	b.n	8002368 <pbuf_header+0x54>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8002342:	3c01      	subs	r4, #1
 8002344:	2c01      	cmp	r4, #1
 8002346:	d80f      	bhi.n	8002368 <pbuf_header+0x54>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8002348:	2900      	cmp	r1, #0
 800234a:	da0d      	bge.n	8002368 <pbuf_header+0x54>
 800234c:	8944      	ldrh	r4, [r0, #10]
 800234e:	4294      	cmp	r4, r2
 8002350:	d30a      	bcc.n	8002368 <pbuf_header+0x54>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8002352:	1a5b      	subs	r3, r3, r1
 8002354:	6043      	str	r3, [r0, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8002356:	8943      	ldrh	r3, [r0, #10]
 8002358:	b289      	uxth	r1, r1
 800235a:	440b      	add	r3, r1
 800235c:	8143      	strh	r3, [r0, #10]
  p->tot_len += header_size_increment;
 800235e:	8903      	ldrh	r3, [r0, #8]
 8002360:	4419      	add	r1, r3
 8002362:	8101      	strh	r1, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8002364:	2000      	movs	r0, #0
 8002366:	bd10      	pop	{r4, pc}
  }
 
  if (header_size_increment < 0){
    increment_magnitude = -header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8002368:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
 800236a:	bd10      	pop	{r4, pc}

0800236c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800236c:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800236e:	b310      	cbz	r0, 80023b6 <pbuf_free+0x4a>
 8002370:	2400      	movs	r4, #0
 8002372:	b2e1      	uxtb	r1, r4
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8002374:	b1f0      	cbz	r0, 80023b4 <pbuf_free+0x48>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8002376:	89c3      	ldrh	r3, [r0, #14]
 8002378:	3b01      	subs	r3, #1
 800237a:	b29b      	uxth	r3, r3
 800237c:	81c3      	strh	r3, [r0, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800237e:	b9cb      	cbnz	r3, 80023b4 <pbuf_free+0x48>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8002380:	7b43      	ldrb	r3, [r0, #13]
    ref = --(p->ref);
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8002382:	6805      	ldr	r5, [r0, #0]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8002384:	079b      	lsls	r3, r3, #30
 8002386:	d502      	bpl.n	800238e <pbuf_free+0x22>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 8002388:	6903      	ldr	r3, [r0, #16]
 800238a:	4798      	blx	r3
 800238c:	e00f      	b.n	80023ae <pbuf_free+0x42>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
      /* remember next pbuf in chain for next iteration */
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800238e:	7b03      	ldrb	r3, [r0, #12]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8002390:	2b03      	cmp	r3, #3
 8002392:	d102      	bne.n	800239a <pbuf_free+0x2e>
          memp_free(MEMP_PBUF_POOL, p);
 8002394:	4601      	mov	r1, r0
 8002396:	2008      	movs	r0, #8
 8002398:	e004      	b.n	80023a4 <pbuf_free+0x38>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800239a:	3b01      	subs	r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d804      	bhi.n	80023aa <pbuf_free+0x3e>
          memp_free(MEMP_PBUF, p);
 80023a0:	4601      	mov	r1, r0
 80023a2:	2007      	movs	r0, #7
 80023a4:	f7ff fed2 	bl	800214c <memp_free>
 80023a8:	e001      	b.n	80023ae <pbuf_free+0x42>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80023aa:	f7ff fd9f 	bl	8001eec <mem_free>
 80023ae:	3401      	adds	r4, #1
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 80023b0:	4628      	mov	r0, r5
 80023b2:	e7de      	b.n	8002372 <pbuf_free+0x6>
 80023b4:	4608      	mov	r0, r1
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80023b6:	bd38      	pop	{r3, r4, r5, pc}

080023b8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80023b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023bc:	460e      	mov	r6, r1
 80023be:	4617      	mov	r7, r2
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80023c0:	2803      	cmp	r0, #3
 80023c2:	d87b      	bhi.n	80024bc <pbuf_alloc+0x104>
 80023c4:	e8df f000 	tbb	[pc, r0]
 80023c8:	06040208 	.word	0x06040208
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    break;
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80023cc:	2522      	movs	r5, #34	; 0x22
 80023ce:	e004      	b.n	80023da <pbuf_alloc+0x22>
    break;
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 80023d0:	250e      	movs	r5, #14
    break;
 80023d2:	e002      	b.n	80023da <pbuf_alloc+0x22>
  case PBUF_RAW:
    offset = 0;
 80023d4:	2500      	movs	r5, #0
    break;
 80023d6:	e000      	b.n	80023da <pbuf_alloc+0x22>

  /* determine header offset */
  switch (layer) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80023d8:	2536      	movs	r5, #54	; 0x36
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  }

  switch (type) {
 80023da:	2f03      	cmp	r7, #3
 80023dc:	d86e      	bhi.n	80024bc <pbuf_alloc+0x104>
 80023de:	e8df f007 	tbb	[pc, r7]
 80023e2:	5b43      	.short	0x5b43
 80023e4:	025b      	.short	0x025b
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80023e6:	2008      	movs	r0, #8
 80023e8:	f7ff fea0 	bl	800212c <memp_malloc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80023ec:	4604      	mov	r4, r0
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d064      	beq.n	80024bc <pbuf_alloc+0x104>
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
 80023f2:	2203      	movs	r2, #3
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80023f4:	1943      	adds	r3, r0, r5
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80023f6:	4415      	add	r5, r2
 80023f8:	f025 0503 	bic.w	r5, r5, #3
 80023fc:	f5c5 75fa 	rsb	r5, r5, #500	; 0x1f4
    }
    p->type = type;
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8002400:	3313      	adds	r3, #19
 8002402:	f023 0303 	bic.w	r3, r3, #3
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8002406:	42b5      	cmp	r5, r6
 8002408:	bfa8      	it	ge
 800240a:	4635      	movge	r5, r6
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
    p->next = NULL;
 800240c:	2700      	movs	r7, #0

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800240e:	6043      	str	r3, [r0, #4]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8002410:	2301      	movs	r3, #1
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8002412:	8145      	strh	r5, [r0, #10]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
 8002414:	7302      	strb	r2, [r0, #12]
    p->next = NULL;
 8002416:	6007      	str	r7, [r0, #0]
    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8002418:	8106      	strh	r6, [r0, #8]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800241a:	81c3      	strh	r3, [r0, #14]
    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800241c:	1b75      	subs	r5, r6, r5
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800241e:	4681      	mov	r9, r0
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccesfully */
        return NULL;
      }
      q->type = type;
 8002420:	4690      	mov	r8, r2
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8002422:	2d00      	cmp	r5, #0
 8002424:	dd43      	ble.n	80024ae <pbuf_alloc+0xf6>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8002426:	2008      	movs	r0, #8
 8002428:	f7ff fe80 	bl	800212c <memp_malloc>
      if (q == NULL) {
 800242c:	4606      	mov	r6, r0
 800242e:	b928      	cbnz	r0, 800243c <pbuf_alloc+0x84>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 8002430:	4620      	mov	r0, r4
 8002432:	f7ff ff9b 	bl	800236c <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 8002436:	4630      	mov	r0, r6
 8002438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800243c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8002440:	f100 0210 	add.w	r2, r0, #16
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8002444:	462b      	mov	r3, r5
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccesfully */
        return NULL;
      }
      q->type = type;
 8002446:	f880 800c 	strb.w	r8, [r0, #12]
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800244a:	bfa8      	it	ge
 800244c:	f44f 73fa 	movge.w	r3, #500	; 0x1f4
        pbuf_free(p);
        /* bail out unsuccesfully */
        return NULL;
      }
      q->type = type;
      q->flags = 0;
 8002450:	7347      	strb	r7, [r0, #13]
      q->next = NULL;
 8002452:	6007      	str	r7, [r0, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8002454:	f8c9 0000 	str.w	r0, [r9]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8002458:	6042      	str	r2, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800245a:	2201      	movs	r2, #1
      q->next = NULL;
      /* make previous pbuf point to this pbuf */
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 800245c:	8105      	strh	r5, [r0, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800245e:	8143      	strh	r3, [r0, #10]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8002460:	81c2      	strh	r2, [r0, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8002462:	1aed      	subs	r5, r5, r3
 8002464:	4681      	mov	r9, r0
 8002466:	e7dc      	b.n	8002422 <pbuf_alloc+0x6a>
    /*r->next = NULL;*/

    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 8002468:	f105 0013 	add.w	r0, r5, #19
 800246c:	1cf3      	adds	r3, r6, #3
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	f020 0003 	bic.w	r0, r0, #3
 8002476:	4418      	add	r0, r3
 8002478:	b280      	uxth	r0, r0
 800247a:	f7ff fdd5 	bl	8002028 <mem_malloc>
    if (p == NULL) {
 800247e:	4604      	mov	r4, r0
 8002480:	b1e0      	cbz	r0, 80024bc <pbuf_alloc+0x104>
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8002482:	1943      	adds	r3, r0, r5
 8002484:	3313      	adds	r3, #19
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
    p->next = NULL;
 800248c:	2300      	movs	r3, #0
    if (p == NULL) {
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
    p->len = p->tot_len = length;
 800248e:	8106      	strh	r6, [r0, #8]
 8002490:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8002492:	6003      	str	r3, [r0, #0]
    p->type = type;
 8002494:	7303      	strb	r3, [r0, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8002496:	e00a      	b.n	80024ae <pbuf_alloc+0xf6>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8002498:	2007      	movs	r0, #7
 800249a:	f7ff fe47 	bl	800212c <memp_malloc>
    if (p == NULL) {
 800249e:	4604      	mov	r4, r0
 80024a0:	b160      	cbz	r0, 80024bc <pbuf_alloc+0x104>
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80024a6:	8106      	strh	r6, [r0, #8]
 80024a8:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 80024aa:	6003      	str	r3, [r0, #0]
    p->type = type;
 80024ac:	7307      	strb	r7, [r0, #12]
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	81e3      	strh	r3, [r4, #14]
  /* set flags */
  p->flags = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80024b6:	4620      	mov	r0, r4
 80024b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->next = NULL;
    p->type = type;
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 80024bc:	2000      	movs	r0, #0
  p->ref = 1;
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
}
 80024be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080024c2 <pbuf_realloc>:
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80024c2:	8902      	ldrh	r2, [r0, #8]
 80024c4:	428a      	cmp	r2, r1
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80024c6:	b538      	push	{r3, r4, r5, lr}
 80024c8:	4604      	mov	r4, r0
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80024ca:	d91f      	bls.n	800250c <pbuf_realloc+0x4a>
 80024cc:	460d      	mov	r5, r1

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80024ce:	8963      	ldrh	r3, [r4, #10]
 80024d0:	429d      	cmp	r5, r3
 80024d2:	d907      	bls.n	80024e4 <pbuf_realloc+0x22>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80024d4:	1aed      	subs	r5, r5, r3
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 80024d6:	8923      	ldrh	r3, [r4, #8]
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	440b      	add	r3, r1
 80024dc:	8123      	strh	r3, [r4, #8]
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80024de:	b2ad      	uxth	r5, r5
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
    /* proceed to next pbuf in chain */
    q = q->next;
 80024e0:	6824      	ldr	r4, [r4, #0]
 80024e2:	e7f4      	b.n	80024ce <pbuf_realloc+0xc>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 80024e4:	7b22      	ldrb	r2, [r4, #12]
 80024e6:	b94a      	cbnz	r2, 80024fc <pbuf_realloc+0x3a>
 80024e8:	429d      	cmp	r5, r3
 80024ea:	d007      	beq.n	80024fc <pbuf_realloc+0x3a>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80024ec:	6861      	ldr	r1, [r4, #4]
 80024ee:	1b09      	subs	r1, r1, r4
 80024f0:	4429      	add	r1, r5
 80024f2:	4620      	mov	r0, r4
 80024f4:	b289      	uxth	r1, r1
 80024f6:	f7ff fd3f 	bl	8001f78 <mem_trim>
 80024fa:	4604      	mov	r4, r0
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  q->tot_len = q->len;

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80024fc:	6820      	ldr	r0, [r4, #0]
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80024fe:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8002500:	8125      	strh	r5, [r4, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8002502:	b108      	cbz	r0, 8002508 <pbuf_realloc+0x46>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8002504:	f7ff ff32 	bl	800236c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8002508:	2300      	movs	r3, #0
 800250a:	6023      	str	r3, [r4, #0]
 800250c:	bd38      	pop	{r3, r4, r5, pc}

0800250e <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 800250e:	4603      	mov	r3, r0
  u8_t len;

  len = 0;
  while (p != NULL) {
 8002510:	2200      	movs	r2, #0
 8002512:	b2d0      	uxtb	r0, r2
 8002514:	3201      	adds	r2, #1
 8002516:	b10b      	cbz	r3, 800251c <pbuf_clen+0xe>
    ++len;
    p = p->next;
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e7fa      	b.n	8002512 <pbuf_clen+0x4>
  }
  return len;
}
 800251c:	4770      	bx	lr

0800251e <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 800251e:	b110      	cbz	r0, 8002526 <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 8002520:	89c3      	ldrh	r3, [r0, #14]
 8002522:	3301      	adds	r3, #1
 8002524:	81c3      	strh	r3, [r0, #14]
 8002526:	4770      	bx	lr

08002528 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8002528:	b510      	push	{r4, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800252a:	b150      	cbz	r0, 8002542 <pbuf_cat+0x1a>
 800252c:	b901      	cbnz	r1, 8002530 <pbuf_cat+0x8>
 800252e:	bd10      	pop	{r4, pc}
 8002530:	8902      	ldrh	r2, [r0, #8]
 8002532:	890b      	ldrh	r3, [r1, #8]
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8002534:	6804      	ldr	r4, [r0, #0]
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8002536:	4413      	add	r3, r2
 8002538:	8103      	strh	r3, [r0, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800253a:	b10c      	cbz	r4, 8002540 <pbuf_cat+0x18>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800253c:	4620      	mov	r0, r4
 800253e:	e7f7      	b.n	8002530 <pbuf_cat+0x8>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8002540:	6001      	str	r1, [r0, #0]
 8002542:	bd10      	pop	{r4, pc}

08002544 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8002544:	b510      	push	{r4, lr}
  pbuf_cat(h, t);
 8002546:	f7ff ffef 	bl	8002528 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800254a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  pbuf_cat(h, t);
  /* t is now referenced by h */
  pbuf_ref(t);
 800254e:	4608      	mov	r0, r1
 8002550:	f7ff bfe5 	b.w	800251e <pbuf_ref>

08002554 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 8002554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002558:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800255a:	4605      	mov	r5, r0
 800255c:	b918      	cbnz	r0, 8002566 <pbuf_copy+0x12>
 800255e:	f06f 000d 	mvn.w	r0, #13
 8002562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002566:	2900      	cmp	r1, #0
 8002568:	d0f9      	beq.n	800255e <pbuf_copy+0xa>
 800256a:	8902      	ldrh	r2, [r0, #8]
 800256c:	890b      	ldrh	r3, [r1, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d3f5      	bcc.n	800255e <pbuf_copy+0xa>
 8002572:	f04f 0800 	mov.w	r8, #0
 8002576:	4647      	mov	r7, r8

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8002578:	8966      	ldrh	r6, [r4, #10]
 800257a:	896b      	ldrh	r3, [r5, #10]
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800257c:	6861      	ldr	r1, [r4, #4]
 800257e:	6868      	ldr	r0, [r5, #4]

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8002580:	ebc8 0606 	rsb	r6, r8, r6
 8002584:	1bdb      	subs	r3, r3, r7
 8002586:	42b3      	cmp	r3, r6
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8002588:	bfb4      	ite	lt
 800258a:	b29e      	uxthlt	r6, r3
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800258c:	b2b6      	uxthge	r6, r6
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800258e:	4632      	mov	r2, r6
 8002590:	4441      	add	r1, r8
 8002592:	4438      	add	r0, r7
 8002594:	f004 fddf 	bl	8007156 <memcpy>
    offset_to += len;
 8002598:	4437      	add	r7, r6
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 800259a:	8963      	ldrh	r3, [r4, #10]
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
 800259c:	4446      	add	r6, r8
 800259e:	fa1f f886 	uxth.w	r8, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 80025a2:	4543      	cmp	r3, r8
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80025a4:	896b      	ldrh	r3, [r5, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 80025a6:	bf98      	it	ls
 80025a8:	6824      	ldrls	r4, [r4, #0]
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
 80025aa:	b2bf      	uxth	r7, r7
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
 80025ac:	bf98      	it	ls
 80025ae:	f04f 0800 	movls.w	r8, #0
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80025b2:	42bb      	cmp	r3, r7
 80025b4:	d104      	bne.n	80025c0 <pbuf_copy+0x6c>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 80025b6:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80025b8:	b90d      	cbnz	r5, 80025be <pbuf_copy+0x6a>
 80025ba:	b164      	cbz	r4, 80025d6 <pbuf_copy+0x82>
 80025bc:	e7cf      	b.n	800255e <pbuf_copy+0xa>
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
 80025be:	2700      	movs	r7, #0
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80025c0:	b11c      	cbz	r4, 80025ca <pbuf_copy+0x76>
 80025c2:	8962      	ldrh	r2, [r4, #10]
 80025c4:	8923      	ldrh	r3, [r4, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d008      	beq.n	80025dc <pbuf_copy+0x88>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80025ca:	896a      	ldrh	r2, [r5, #10]
 80025cc:	892b      	ldrh	r3, [r5, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d008      	beq.n	80025e4 <pbuf_copy+0x90>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80025d2:	2c00      	cmp	r4, #0
 80025d4:	d1d0      	bne.n	8002578 <pbuf_copy+0x24>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80025d6:	4620      	mov	r0, r4
 80025d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f3      	beq.n	80025ca <pbuf_copy+0x76>
 80025e2:	e002      	b.n	80025ea <pbuf_copy+0x96>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80025e4:	682b      	ldr	r3, [r5, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f3      	beq.n	80025d2 <pbuf_copy+0x7e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80025ea:	f06f 0005 	mvn.w	r0, #5
 80025ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025f2 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80025f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025f6:	4688      	mov	r8, r1
 80025f8:	4691      	mov	r9, r2
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80025fa:	4606      	mov	r6, r0
 80025fc:	b328      	cbz	r0, 800264a <pbuf_copy_partial+0x58>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80025fe:	b331      	cbz	r1, 800264e <pbuf_copy_partial+0x5c>
 8002600:	2400      	movs	r4, #0
 8002602:	4627      	mov	r7, r4
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 8002604:	f1b9 0f00 	cmp.w	r9, #0
 8002608:	d024      	beq.n	8002654 <pbuf_copy_partial+0x62>
 800260a:	b31e      	cbz	r6, 8002654 <pbuf_copy_partial+0x62>
    if ((offset != 0) && (offset >= p->len)) {
 800260c:	b12b      	cbz	r3, 800261a <pbuf_copy_partial+0x28>
 800260e:	8971      	ldrh	r1, [r6, #10]
 8002610:	428b      	cmp	r3, r1
 8002612:	d302      	bcc.n	800261a <pbuf_copy_partial+0x28>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8002614:	1a5b      	subs	r3, r3, r1
 8002616:	b29b      	uxth	r3, r3
 8002618:	e015      	b.n	8002646 <pbuf_copy_partial+0x54>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800261a:	8975      	ldrh	r5, [r6, #10]
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800261c:	6871      	ldr	r1, [r6, #4]
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800261e:	1aed      	subs	r5, r5, r3
 8002620:	b2ad      	uxth	r5, r5
 8002622:	454d      	cmp	r5, r9
 8002624:	bf28      	it	cs
 8002626:	464d      	movcs	r5, r9
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8002628:	462a      	mov	r2, r5
 800262a:	4419      	add	r1, r3
 800262c:	eb08 0007 	add.w	r0, r8, r7
      copied_total += buf_copy_len;
 8002630:	442c      	add	r4, r5
      left += buf_copy_len;
 8002632:	442f      	add	r7, r5
      len -= buf_copy_len;
 8002634:	ebc5 0509 	rsb	r5, r5, r9
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8002638:	f004 fd8d 	bl	8007156 <memcpy>
      copied_total += buf_copy_len;
 800263c:	b2a4      	uxth	r4, r4
      left += buf_copy_len;
 800263e:	b2bf      	uxth	r7, r7
      len -= buf_copy_len;
 8002640:	fa1f f985 	uxth.w	r9, r5
      offset = 0;
 8002644:	2300      	movs	r3, #0
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 8002646:	6836      	ldr	r6, [r6, #0]
 8002648:	e7dc      	b.n	8002604 <pbuf_copy_partial+0x12>
 800264a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800264e:	4608      	mov	r0, r1
 8002650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002654:	4620      	mov	r0, r4
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8002656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800265c <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 800265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t eaten = 0;

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
  proto = IPH_PROTO(iphdr);
 8002660:	6843      	ldr	r3, [r0, #4]

  prev = NULL;
  pcb = raw_pcbs;
 8002662:	4e19      	ldr	r6, [pc, #100]	; (80026c8 <raw_input+0x6c>)
  u8_t eaten = 0;

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
  proto = IPH_PROTO(iphdr);
 8002664:	f893 9009 	ldrb.w	r9, [r3, #9]

  prev = NULL;
  pcb = raw_pcbs;
 8002668:	6834      	ldr	r4, [r6, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 800266a:	f8df a064 	ldr.w	sl, [pc, #100]	; 80026d0 <raw_input+0x74>
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 800266e:	4680      	mov	r8, r0
  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
  proto = IPH_PROTO(iphdr);

  prev = NULL;
 8002670:	2700      	movs	r7, #0
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 8002672:	b31c      	cbz	r4, 80026bc <raw_input+0x60>
    if ((pcb->protocol == proto) &&
 8002674:	7c23      	ldrb	r3, [r4, #16]
 8002676:	454b      	cmp	r3, r9
 8002678:	d117      	bne.n	80026aa <raw_input+0x4e>
        (ip_addr_isany(&pcb->local_ip) ||
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	b11b      	cbz	r3, 8002686 <raw_input+0x2a>
 800267e:	f8da 2000 	ldr.w	r2, [sl]
 8002682:	4293      	cmp	r3, r2
 8002684:	d111      	bne.n	80026aa <raw_input+0x4e>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 8002686:	6965      	ldr	r5, [r4, #20]
 8002688:	b17d      	cbz	r5, 80026aa <raw_input+0x4e>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <raw_input+0x70>)
 800268c:	69a0      	ldr	r0, [r4, #24]
 800268e:	4642      	mov	r2, r8
 8002690:	4621      	mov	r1, r4
 8002692:	47a8      	blx	r5
 8002694:	b168      	cbz	r0, 80026b2 <raw_input+0x56>
            /* receive function ate the packet */
            p = NULL;
            eaten = 1;
            if (prev != NULL) {
 8002696:	b157      	cbz	r7, 80026ae <raw_input+0x52>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 8002698:	68e3      	ldr	r3, [r4, #12]
 800269a:	60fb      	str	r3, [r7, #12]
              pcb->next = raw_pcbs;
 800269c:	6833      	ldr	r3, [r6, #0]
 800269e:	60e3      	str	r3, [r4, #12]
              raw_pcbs = pcb;
 80026a0:	6034      	str	r4, [r6, #0]
        if (pcb->recv != NULL) {
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
            /* receive function ate the packet */
            p = NULL;
            eaten = 1;
 80026a2:	2001      	movs	r0, #1
        /* receive callback function available? */
        if (pcb->recv != NULL) {
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
            /* receive function ate the packet */
            p = NULL;
 80026a4:	f04f 0800 	mov.w	r8, #0
 80026a8:	e003      	b.n	80026b2 <raw_input+0x56>
 80026aa:	2000      	movs	r0, #0
 80026ac:	e001      	b.n	80026b2 <raw_input+0x56>
            eaten = 1;
 80026ae:	2001      	movs	r0, #1
        /* receive callback function available? */
        if (pcb->recv != NULL) {
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
            /* receive function ate the packet */
            p = NULL;
 80026b0:	46b8      	mov	r8, r7
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	4627      	mov	r7, r4

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 80026b6:	b920      	cbnz	r0, 80026c2 <raw_input+0x66>
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
 80026b8:	461c      	mov	r4, r3
 80026ba:	e7da      	b.n	8002672 <raw_input+0x16>
 80026bc:	4620      	mov	r0, r4
 80026be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c2:	2001      	movs	r0, #1
  }
  return eaten;
}
 80026c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c8:	20002aa4 	.word	0x20002aa4
 80026cc:	20002bf4 	.word	0x20002bf4
 80026d0:	20002bfc 	.word	0x20002bfc

080026d4 <tcp_accept_null>:
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
}
 80026d4:	f06f 0009 	mvn.w	r0, #9
 80026d8:	4770      	bx	lr
	...

080026dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <tcp_new_port+0x48>)
 80026de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e0:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80026e2:	4e11      	ldr	r6, [pc, #68]	; (8002728 <tcp_new_port+0x4c>)
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80026e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80026e8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80026ec:	42a8      	cmp	r0, r5
 80026ee:	bf1a      	itte	ne
 80026f0:	3001      	addne	r0, #1
 80026f2:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80026f4:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 80026f8:	2100      	movs	r1, #0
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80026fa:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 80026fe:	6824      	ldr	r4, [r4, #0]
 8002700:	b15c      	cbz	r4, 800271a <tcp_new_port+0x3e>
      if (pcb->local_port == tcp_port) {
 8002702:	8b67      	ldrh	r7, [r4, #26]
 8002704:	4287      	cmp	r7, r0
 8002706:	d106      	bne.n	8002716 <tcp_new_port+0x3a>
 8002708:	3b01      	subs	r3, #1
 800270a:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ed      	bne.n	80026ec <tcp_new_port+0x10>
 8002710:	8010      	strh	r0, [r2, #0]
          return 0;
 8002712:	4618      	mov	r0, r3
 8002714:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8002716:	68e4      	ldr	r4, [r4, #12]
 8002718:	e7f2      	b.n	8002700 <tcp_new_port+0x24>
 800271a:	3101      	adds	r1, #1
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800271c:	2904      	cmp	r1, #4
 800271e:	d1ec      	bne.n	80026fa <tcp_new_port+0x1e>
 8002720:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8002722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002724:	20000008 	.word	0x20000008
 8002728:	0800a8fc 	.word	0x0800a8fc

0800272c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800272e:	7e03      	ldrb	r3, [r0, #24]
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 8002730:	4604      	mov	r4, r0
 8002732:	460d      	mov	r5, r1
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8002734:	bb33      	cbnz	r3, 8002784 <tcp_bind+0x58>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8002736:	b91a      	cbnz	r2, 8002740 <tcp_bind+0x14>
    port = tcp_new_port();
 8002738:	f7ff ffd0 	bl	80026dc <tcp_new_port>
    if (port == 0) {
 800273c:	4602      	mov	r2, r0
 800273e:	b320      	cbz	r0, 800278a <tcp_bind+0x5e>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8002740:	4f15      	ldr	r7, [pc, #84]	; (8002798 <tcp_bind+0x6c>)
      return ERR_BUF;
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 8002742:	2100      	movs	r1, #0
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8002744:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b15b      	cbz	r3, 8002764 <tcp_bind+0x38>
      if (cpcb->local_port == port) {
 800274c:	8b58      	ldrh	r0, [r3, #26]
 800274e:	4290      	cmp	r0, r2
 8002750:	d106      	bne.n	8002760 <tcp_bind+0x34>
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
 8002752:	681e      	ldr	r6, [r3, #0]
 8002754:	b1e6      	cbz	r6, 8002790 <tcp_bind+0x64>
 8002756:	b1dd      	cbz	r5, 8002790 <tcp_bind+0x64>
              ip_addr_isany(ipaddr) ||
 8002758:	6828      	ldr	r0, [r5, #0]
 800275a:	b1c8      	cbz	r0, 8002790 <tcp_bind+0x64>
 800275c:	4286      	cmp	r6, r0
 800275e:	d017      	beq.n	8002790 <tcp_bind+0x64>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	e7f2      	b.n	800274a <tcp_bind+0x1e>
      return ERR_BUF;
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 8002764:	3101      	adds	r1, #1
 8002766:	2904      	cmp	r1, #4
 8002768:	d1ec      	bne.n	8002744 <tcp_bind+0x18>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800276a:	b115      	cbz	r5, 8002772 <tcp_bind+0x46>
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	b103      	cbz	r3, 8002772 <tcp_bind+0x46>
    pcb->local_ip = *ipaddr;
 8002770:	6023      	str	r3, [r4, #0]
  }
  pcb->local_port = port;
  TCP_REG(&tcp_bound_pcbs, pcb);
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <tcp_bind+0x70>)
  }

  if (!ip_addr_isany(ipaddr)) {
    pcb->local_ip = *ipaddr;
  }
  pcb->local_port = port;
 8002774:	8362      	strh	r2, [r4, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	60e2      	str	r2, [r4, #12]
 800277a:	601c      	str	r4, [r3, #0]
 800277c:	f002 f83e 	bl	80047fc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8002780:	2000      	movs	r0, #0
 8002782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8002784:	f06f 0005 	mvn.w	r0, #5
 8002788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif /* SO_REUSE */

  if (port == 0) {
    port = tcp_new_port();
    if (port == 0) {
      return ERR_BUF;
 800278a:	f06f 0001 	mvn.w	r0, #1
 800278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
              ip_addr_isany(ipaddr) ||
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
            return ERR_USE;
 8002790:	f06f 0007 	mvn.w	r0, #7
  }
  pcb->local_port = port;
  TCP_REG(&tcp_bound_pcbs, pcb);
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
}
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002796:	bf00      	nop
 8002798:	0800a8fc 	.word	0x0800a8fc
 800279c:	20005434 	.word	0x20005434

080027a0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80027a0:	b570      	push	{r4, r5, r6, lr}
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 80027a2:	7e06      	ldrb	r6, [r0, #24]
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80027a4:	4605      	mov	r5, r0
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 80027a6:	b10e      	cbz	r6, 80027ac <tcp_listen_with_backlog+0xc>
 80027a8:	2000      	movs	r0, #0
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f7ff fcbd 	bl	800212c <memp_malloc>
  if (lpcb == NULL) {
 80027b2:	4604      	mov	r4, r0
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d0f7      	beq.n	80027a8 <tcp_listen_with_backlog+0x8>
    return NULL;
  }
  lpcb->callback_arg = pcb->callback_arg;
 80027b8:	692b      	ldr	r3, [r5, #16]
 80027ba:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 80027bc:	8b6b      	ldrh	r3, [r5, #26]
 80027be:	8343      	strh	r3, [r0, #26]
  lpcb->state = LISTEN;
 80027c0:	2301      	movs	r3, #1
 80027c2:	7603      	strb	r3, [r0, #24]
  lpcb->prio = pcb->prio;
 80027c4:	7e6b      	ldrb	r3, [r5, #25]
 80027c6:	7643      	strb	r3, [r0, #25]
  lpcb->so_options = pcb->so_options;
  ip_set_option(lpcb, SOF_ACCEPTCONN);
 80027c8:	7a2b      	ldrb	r3, [r5, #8]
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 80027d0:	7aab      	ldrb	r3, [r5, #10]
 80027d2:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 80027d4:	7a6b      	ldrb	r3, [r5, #9]
 80027d6:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80027d8:	682b      	ldr	r3, [r5, #0]
 80027da:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 80027dc:	8b6b      	ldrh	r3, [r5, #26]
 80027de:	b1cb      	cbz	r3, 8002814 <tcp_listen_with_backlog+0x74>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80027e0:	4a13      	ldr	r2, [pc, #76]	; (8002830 <tcp_listen_with_backlog+0x90>)
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	429d      	cmp	r5, r3
 80027e6:	d102      	bne.n	80027ee <tcp_listen_with_backlog+0x4e>
 80027e8:	68eb      	ldr	r3, [r5, #12]
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e010      	b.n	8002810 <tcp_listen_with_backlog+0x70>
 80027ee:	4911      	ldr	r1, [pc, #68]	; (8002834 <tcp_listen_with_backlog+0x94>)
 80027f0:	4632      	mov	r2, r6
 80027f2:	600b      	str	r3, [r1, #0]
 80027f4:	b153      	cbz	r3, 800280c <tcp_listen_with_backlog+0x6c>
 80027f6:	68d8      	ldr	r0, [r3, #12]
 80027f8:	4285      	cmp	r5, r0
 80027fa:	d104      	bne.n	8002806 <tcp_listen_with_backlog+0x66>
 80027fc:	b102      	cbz	r2, 8002800 <tcp_listen_with_backlog+0x60>
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	68ea      	ldr	r2, [r5, #12]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	e004      	b.n	8002810 <tcp_listen_with_backlog+0x70>
 8002806:	2201      	movs	r2, #1
 8002808:	4603      	mov	r3, r0
 800280a:	e7f3      	b.n	80027f4 <tcp_listen_with_backlog+0x54>
 800280c:	b102      	cbz	r2, 8002810 <tcp_listen_with_backlog+0x70>
 800280e:	600b      	str	r3, [r1, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	60eb      	str	r3, [r5, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8002814:	4629      	mov	r1, r5
 8002816:	2002      	movs	r0, #2
 8002818:	f7ff fc98 	bl	800214c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <tcp_listen_with_backlog+0x98>)
 800281e:	6163      	str	r3, [r4, #20]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <tcp_listen_with_backlog+0x9c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	60e2      	str	r2, [r4, #12]
 8002826:	601c      	str	r4, [r3, #0]
 8002828:	f001 ffe8 	bl	80047fc <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
 800282c:	4620      	mov	r0, r4
}
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	20005434 	.word	0x20005434
 8002834:	20005430 	.word	0x20005430
 8002838:	080026d5 	.word	0x080026d5
 800283c:	2000542c 	.word	0x2000542c

08002840 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8002840:	b570      	push	{r4, r5, r6, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8002842:	6b01      	ldr	r1, [r0, #48]	; 0x30
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8002844:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
 8002846:	6a84      	ldr	r4, [r0, #40]	; 0x28

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8002848:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 800284a:	1a73      	subs	r3, r6, r1
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800284c:	4602      	mov	r2, r0
 800284e:	1918      	adds	r0, r3, r4
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8002850:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8002854:	429d      	cmp	r5, r3
 8002856:	bf94      	ite	ls
 8002858:	1b43      	subls	r3, r0, r5
 800285a:	1ac3      	subhi	r3, r0, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	db01      	blt.n	8002864 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8002860:	85d6      	strh	r6, [r2, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
 8002862:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8002864:	1a63      	subs	r3, r4, r1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f04f 0000 	mov.w	r0, #0
      pcb->rcv_ann_wnd = 0;
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
 800286c:	bfd6      	itet	le
 800286e:	1b09      	suble	r1, r1, r4
    return new_right_edge - pcb->rcv_ann_right_edge;
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8002870:	85d0      	strhgt	r0, [r2, #46]	; 0x2e
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
 8002872:	85d1      	strhle	r1, [r2, #46]	; 0x2e
    }
    return 0;
  }
}
 8002874:	bd70      	pop	{r4, r5, r6, pc}

08002876 <tcp_recved>:
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
 8002876:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8002878:	4419      	add	r1, r3
 800287a:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND) {
 800287c:	f640 3368 	movw	r3, #2920	; 0xb68
 8002880:	4299      	cmp	r1, r3
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8002882:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
  if (pcb->rcv_wnd > TCP_WND) {
    pcb->rcv_wnd = TCP_WND;
 8002884:	bf8c      	ite	hi
 8002886:	8583      	strhhi	r3, [r0, #44]	; 0x2c
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
 8002888:	8581      	strhls	r1, [r0, #44]	; 0x2c
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800288a:	4604      	mov	r4, r0
  pcb->rcv_wnd += len;
  if (pcb->rcv_wnd > TCP_WND) {
    pcb->rcv_wnd = TCP_WND;
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800288c:	f7ff ffd8 	bl	8002840 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8002890:	f240 23d9 	movw	r3, #729	; 0x2d9
 8002894:	4298      	cmp	r0, r3
 8002896:	dd08      	ble.n	80028aa <tcp_recved+0x34>
    tcp_ack_now(pcb);
 8002898:	7fa3      	ldrb	r3, [r4, #30]
 800289a:	f043 0302 	orr.w	r3, r3, #2
 800289e:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
 80028a0:	4620      	mov	r0, r4
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
 80028a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    tcp_ack_now(pcb);
    tcp_output(pcb);
 80028a6:	f001 bd5d 	b.w	8004364 <tcp_output>
 80028aa:	bd10      	pop	{r4, pc}

080028ac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80028ac:	b510      	push	{r4, lr}
  if (seg != NULL) {
 80028ae:	4604      	mov	r4, r0
 80028b0:	b148      	cbz	r0, 80028c6 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 80028b2:	6840      	ldr	r0, [r0, #4]
 80028b4:	b108      	cbz	r0, 80028ba <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80028b6:	f7ff fd59 	bl	800236c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80028ba:	4621      	mov	r1, r4
 80028bc:	2004      	movs	r0, #4
  }
}
 80028be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      pbuf_free(seg->p);
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80028c2:	f7ff bc43 	b.w	800214c <memp_free>
 80028c6:	bd10      	pop	{r4, pc}

080028c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80028c8:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80028ca:	b120      	cbz	r0, 80028d6 <tcp_segs_free+0xe>
    struct tcp_seg *next = seg->next;
 80028cc:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80028ce:	f7ff ffed 	bl	80028ac <tcp_seg_free>
    seg = next;
 80028d2:	4620      	mov	r0, r4
 80028d4:	e7f9      	b.n	80028ca <tcp_segs_free+0x2>
  }
}
 80028d6:	bd10      	pop	{r4, pc}

080028d8 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 80028d8:	7641      	strb	r1, [r0, #25]
 80028da:	4770      	bx	lr

080028dc <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
 80028dc:	6101      	str	r1, [r0, #16]
 80028de:	4770      	bx	lr

080028e0 <tcp_recv>:
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
 80028e0:	67c1      	str	r1, [r0, #124]	; 0x7c
 80028e2:	4770      	bx	lr

080028e4 <tcp_sent>:
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
 80028e4:	6781      	str	r1, [r0, #120]	; 0x78
 80028e6:	4770      	bx	lr

080028e8 <tcp_err>:
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
 80028e8:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80028ec:	4770      	bx	lr

080028ee <tcp_accept>:
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
 80028ee:	6141      	str	r1, [r0, #20]
 80028f0:	4770      	bx	lr

080028f2 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80028f2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
 80028f6:	f880 2020 	strb.w	r2, [r0, #32]
 80028fa:	4770      	bx	lr

080028fc <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 80028fc:	7e03      	ldrb	r3, [r0, #24]
 80028fe:	2b01      	cmp	r3, #1
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8002900:	b510      	push	{r4, lr}
 8002902:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8002904:	d915      	bls.n	8002932 <tcp_pcb_purge+0x36>
 8002906:	2b0a      	cmp	r3, #10
 8002908:	d013      	beq.n	8002932 <tcp_pcb_purge+0x36>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 800290a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800290c:	b118      	cbz	r0, 8002916 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800290e:	f7ff fd2d 	bl	800236c <pbuf_free>
      pcb->refused_data = NULL;
 8002912:	2300      	movs	r3, #0
 8002914:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8002916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800291a:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
 800291c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800291e:	f7ff ffd3 	bl	80028c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8002922:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002924:	f7ff ffd0 	bl	80028c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800292c:	6723      	str	r3, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800292e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8002932:	bd10      	pop	{r4, pc}

08002934 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8002934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
 8002938:	4da0      	ldr	r5, [pc, #640]	; (8002bbc <tcp_slowtmr+0x288>)
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);

      tcp_active_pcbs_changed = 0;
 800293a:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8002bd8 <tcp_slowtmr+0x2a4>
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
 800293e:	682b      	ldr	r3, [r5, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 8002944:	4b9e      	ldr	r3, [pc, #632]	; (8002bc0 <tcp_slowtmr+0x28c>)
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	3201      	adds	r2, #1
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800294a:	b087      	sub	sp, #28
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
  ++tcp_timer_ctr;
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	469b      	mov	fp, r3
 8002950:	46c2      	mov	sl, r8

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  pcb = tcp_active_pcbs;
 8002952:	4f9c      	ldr	r7, [pc, #624]	; (8002bc4 <tcp_slowtmr+0x290>)
 8002954:	9703      	str	r7, [sp, #12]
 8002956:	683c      	ldr	r4, [r7, #0]
  ++tcp_ticks;
  ++tcp_timer_ctr;

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8002958:	2600      	movs	r6, #0
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800295a:	2c00      	cmp	r4, #0
 800295c:	f000 810d 	beq.w	8002b7a <tcp_slowtmr+0x246>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 8002960:	f89b 3000 	ldrb.w	r3, [fp]
 8002964:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8002968:	429a      	cmp	r2, r3
 800296a:	d102      	bne.n	8002972 <tcp_slowtmr+0x3e>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800296c:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8002970:	e0e0      	b.n	8002b34 <tcp_slowtmr+0x200>
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 8002972:	7e21      	ldrb	r1, [r4, #24]
    if (pcb->last_timer == tcp_timer_ctr) {
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;
 8002974:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 8002978:	2902      	cmp	r1, #2
 800297a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800297e:	d101      	bne.n	8002984 <tcp_slowtmr+0x50>
 8002980:	2a06      	cmp	r2, #6
 8002982:	d052      	beq.n	8002a2a <tcp_slowtmr+0xf6>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
 8002984:	2a0c      	cmp	r2, #12
 8002986:	d050      	beq.n	8002a2a <tcp_slowtmr+0xf6>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8002988:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800298c:	b1cb      	cbz	r3, 80029c2 <tcp_slowtmr+0x8e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 800298e:	498e      	ldr	r1, [pc, #568]	; (8002bc8 <tcp_slowtmr+0x294>)
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 8002990:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 8002994:	4419      	add	r1, r3
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 8002996:	3201      	adds	r2, #1
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 8002998:	f811 1c01 	ldrb.w	r1, [r1, #-1]
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 800299c:	b2d2      	uxtb	r2, r2
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 800299e:	4291      	cmp	r1, r2
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 80029a0:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 80029a4:	d83f      	bhi.n	8002a26 <tcp_slowtmr+0xf2>
          pcb->persist_cnt = 0;
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80029a6:	2b06      	cmp	r3, #6
      if (pcb->persist_backoff > 0) {
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
          pcb->persist_cnt = 0;
 80029a8:	f04f 0200 	mov.w	r2, #0
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
            pcb->persist_backoff++;
 80029ac:	bf98      	it	ls
 80029ae:	3301      	addls	r3, #1
      if (pcb->persist_backoff > 0) {
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
          pcb->persist_cnt = 0;
 80029b0:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
            pcb->persist_backoff++;
 80029b4:	bf98      	it	ls
 80029b6:	f884 3091 	strbls.w	r3, [r4, #145]	; 0x91
          }
          tcp_zero_window_probe(pcb);
 80029ba:	4620      	mov	r0, r4
 80029bc:	f001 fed5 	bl	800476a <tcp_zero_window_probe>
 80029c0:	e031      	b.n	8002a26 <tcp_slowtmr+0xf2>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
 80029c2:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 80029c6:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 80029c8:	bfa4      	itt	ge
 80029ca:	3301      	addge	r3, #1
 80029cc:	86a3      	strhge	r3, [r4, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80029ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80029d0:	b34b      	cbz	r3, 8002a26 <tcp_slowtmr+0xf2>
 80029d2:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 80029d6:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 80029da:	4298      	cmp	r0, r3
 80029dc:	db23      	blt.n	8002a26 <tcp_slowtmr+0xf2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80029de:	2902      	cmp	r1, #2
 80029e0:	d00a      	beq.n	80029f8 <tcp_slowtmr+0xc4>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 80029e2:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80029e6:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80029ea:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80029ee:	4977      	ldr	r1, [pc, #476]	; (8002bcc <tcp_slowtmr+0x298>)
 80029f0:	5c8a      	ldrb	r2, [r1, r2]
 80029f2:	4093      	lsls	r3, r2
 80029f4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80029f8:	2300      	movs	r3, #0

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 80029fa:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
          if (pcb->state != SYN_SENT) {
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80029fe:	86a3      	strh	r3, [r4, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 8002a00:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf28      	it	cs
 8002a08:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (pcb->mss << 1)) {
 8002a0a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
            pcb->ssthresh = (pcb->mss << 1);
          }
          pcb->cwnd = pcb->mss;
 8002a0c:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 8002a10:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (pcb->mss << 1)) {
 8002a12:	0051      	lsls	r1, r2, #1
 8002a14:	428b      	cmp	r3, r1
          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 8002a16:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8002a1a:	4620      	mov	r0, r4

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
          if (pcb->ssthresh < (pcb->mss << 1)) {
            pcb->ssthresh = (pcb->mss << 1);
 8002a1c:	bfb8      	it	lt
 8002a1e:	f8a4 104e 	strhlt.w	r1, [r4, #78]	; 0x4e
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8002a22:	f001 fe1b 	bl	800465c <tcp_rexmit_rto>
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <tcp_slowtmr+0xf8>
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
 8002a2a:	2301      	movs	r3, #1
          tcp_rexmit_rto(pcb);
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8002a2c:	7e21      	ldrb	r1, [r4, #24]
 8002a2e:	2906      	cmp	r1, #6
 8002a30:	d109      	bne.n	8002a46 <tcp_slowtmr+0x112>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8002a32:	7fa2      	ldrb	r2, [r4, #30]
 8002a34:	06d2      	lsls	r2, r2, #27
 8002a36:	d506      	bpl.n	8002a46 <tcp_slowtmr+0x112>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8002a38:	682a      	ldr	r2, [r5, #0]
 8002a3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a3c:	1a12      	subs	r2, r2, r0
 8002a3e:	2a28      	cmp	r2, #40	; 0x28
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8002a40:	bf84      	itt	hi
 8002a42:	3301      	addhi	r3, #1
 8002a44:	b2db      	uxtbhi	r3, r3
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 8002a46:	7a22      	ldrb	r2, [r4, #8]
 8002a48:	f002 0208 	and.w	r2, r2, #8
 8002a4c:	f002 09ff 	and.w	r9, r2, #255	; 0xff
 8002a50:	b37a      	cbz	r2, 8002ab2 <tcp_slowtmr+0x17e>
 8002a52:	2904      	cmp	r1, #4
 8002a54:	d001      	beq.n	8002a5a <tcp_slowtmr+0x126>
       ((pcb->state == ESTABLISHED) ||
 8002a56:	2907      	cmp	r1, #7
 8002a58:	d129      	bne.n	8002aae <tcp_slowtmr+0x17a>
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
 8002a5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a5c:	6828      	ldr	r0, [r5, #0]
 8002a5e:	1a80      	subs	r0, r0, r2
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8002a60:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
 8002a64:	f502 2124 	add.w	r1, r2, #671744	; 0xa4000
 8002a68:	f601 41b8 	addw	r1, r1, #3256	; 0xcb8
 8002a6c:	f44f 7efa 	mov.w	lr, #500	; 0x1f4
 8002a70:	fbb1 f1fe 	udiv	r1, r1, lr
 8002a74:	4288      	cmp	r0, r1
 8002a76:	d904      	bls.n	8002a82 <tcp_slowtmr+0x14e>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
        ++pcb_reset;
 8002a7c:	f04f 0901 	mov.w	r9, #1
 8002a80:	e017      	b.n	8002ab2 <tcp_slowtmr+0x17e>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 8002a82:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 8002a86:	4f52      	ldr	r7, [pc, #328]	; (8002bd0 <tcp_slowtmr+0x29c>)
 8002a88:	fb07 2201 	mla	r2, r7, r1, r2
 8002a8c:	fbb2 f2fe 	udiv	r2, r2, lr
 8002a90:	4290      	cmp	r0, r2
 8002a92:	d90c      	bls.n	8002aae <tcp_slowtmr+0x17a>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
              / TCP_SLOW_INTERVAL)
      {
        tcp_keepalive(pcb);
 8002a94:	4620      	mov	r0, r4
 8002a96:	9304      	str	r3, [sp, #16]
 8002a98:	f001 fe49 	bl	800472e <tcp_keepalive>
        pcb->keep_cnt_sent++;
 8002a9c:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
 8002aa0:	9b04      	ldr	r3, [sp, #16]
 8002aa2:	3201      	adds	r2, #1
 8002aa4:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
 8002aa8:	f04f 0900 	mov.w	r9, #0
 8002aac:	e001      	b.n	8002ab2 <tcp_slowtmr+0x17e>
 8002aae:	f04f 0900 	mov.w	r9, #0
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8002ab2:	7e22      	ldrb	r2, [r4, #24]
 8002ab4:	2a03      	cmp	r2, #3
 8002ab6:	d104      	bne.n	8002ac2 <tcp_slowtmr+0x18e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8002ab8:	682a      	ldr	r2, [r5, #0]
 8002aba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002abc:	1a52      	subs	r2, r2, r1
 8002abe:	2a28      	cmp	r2, #40	; 0x28
 8002ac0:	e005      	b.n	8002ace <tcp_slowtmr+0x19a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8002ac2:	2a09      	cmp	r2, #9
 8002ac4:	d104      	bne.n	8002ad0 <tcp_slowtmr+0x19c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8002ac6:	682a      	ldr	r2, [r5, #0]
 8002ac8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002aca:	1a52      	subs	r2, r2, r1
 8002acc:	2af0      	cmp	r2, #240	; 0xf0
 8002ace:	d801      	bhi.n	8002ad4 <tcp_slowtmr+0x1a0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d031      	beq.n	8002b38 <tcp_slowtmr+0x204>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7ff ff11 	bl	80028fc <tcp_pcb_purge>
 8002ada:	68e3      	ldr	r3, [r4, #12]
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8002adc:	b10e      	cbz	r6, 8002ae2 <tcp_slowtmr+0x1ae>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 8002ade:	60f3      	str	r3, [r6, #12]
 8002ae0:	e001      	b.n	8002ae6 <tcp_slowtmr+0x1b2>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 8002ae2:	9a03      	ldr	r2, [sp, #12]
 8002ae4:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8002ae6:	f1b9 0f00 	cmp.w	r9, #0
 8002aea:	d009      	beq.n	8002b00 <tcp_slowtmr+0x1cc>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8002aec:	8ba3      	ldrh	r3, [r4, #28]
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	8b63      	ldrh	r3, [r4, #26]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4622      	mov	r2, r4
 8002af6:	1d23      	adds	r3, r4, #4
 8002af8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002afa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002afc:	f001 fd6c 	bl	80045d8 <tcp_rst>
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 8002b00:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      err_arg = pcb->callback_arg;
 8002b04:	6922      	ldr	r2, [r4, #16]
      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 8002b06:	9305      	str	r3, [sp, #20]
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
 8002b08:	4621      	mov	r1, r4
 8002b0a:	2002      	movs	r0, #2
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
      err_arg = pcb->callback_arg;
 8002b0c:	9204      	str	r2, [sp, #16]
      pcb2 = pcb;
      pcb = pcb->next;
 8002b0e:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8002b12:	f7ff fb1b 	bl	800214c <memp_free>

      tcp_active_pcbs_changed = 0;
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 8002b16:	9b05      	ldr	r3, [sp, #20]
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);

      tcp_active_pcbs_changed = 0;
 8002b18:	2100      	movs	r1, #0
 8002b1a:	f888 1000 	strb.w	r1, [r8]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 8002b1e:	b123      	cbz	r3, 8002b2a <tcp_slowtmr+0x1f6>
 8002b20:	9a04      	ldr	r2, [sp, #16]
 8002b22:	f06f 0109 	mvn.w	r1, #9
 8002b26:	4610      	mov	r0, r2
 8002b28:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8002b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f47f af0f 	bne.w	8002952 <tcp_slowtmr+0x1e>
 8002b34:	4634      	mov	r4, r6
 8002b36:	e01d      	b.n	8002b74 <tcp_slowtmr+0x240>
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8002b38:	7fe2      	ldrb	r2, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 8002b3a:	f894 1020 	ldrb.w	r1, [r4, #32]
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
 8002b3e:	f8d4 900c 	ldr.w	r9, [r4, #12]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8002b42:	3201      	adds	r2, #1
 8002b44:	b2d2      	uxtb	r2, r2
      if (prev->polltmr >= prev->pollinterval) {
 8002b46:	4291      	cmp	r1, r2
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8002b48:	77e2      	strb	r2, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 8002b4a:	d813      	bhi.n	8002b74 <tcp_slowtmr+0x240>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
 8002b4c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
      if (prev->polltmr >= prev->pollinterval) {
        prev->polltmr = 0;
 8002b50:	77e3      	strb	r3, [r4, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8002b52:	f888 3000 	strb.w	r3, [r8]
        TCP_EVENT_POLL(prev, err);
 8002b56:	b11a      	cbz	r2, 8002b60 <tcp_slowtmr+0x22c>
 8002b58:	4621      	mov	r1, r4
 8002b5a:	6920      	ldr	r0, [r4, #16]
 8002b5c:	4790      	blx	r2
 8002b5e:	e000      	b.n	8002b62 <tcp_slowtmr+0x22e>
 8002b60:	4618      	mov	r0, r3
        if (tcp_active_pcbs_changed) {
 8002b62:	f89a 3000 	ldrb.w	r3, [sl]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f47f aef3 	bne.w	8002952 <tcp_slowtmr+0x1e>
          goto tcp_slowtmr_start;
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8002b6c:	b910      	cbnz	r0, 8002b74 <tcp_slowtmr+0x240>
          tcp_output(prev);
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f001 fbf8 	bl	8004364 <tcp_output>
 8002b74:	4626      	mov	r6, r4
 8002b76:	464c      	mov	r4, r9
 8002b78:	e6ef      	b.n	800295a <tcp_slowtmr+0x26>
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
 8002b7a:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <tcp_slowtmr+0x2a0>)
 8002b7c:	681e      	ldr	r6, [r3, #0]
 8002b7e:	4698      	mov	r8, r3
  while (pcb != NULL) {
 8002b80:	b1c6      	cbz	r6, 8002bb4 <tcp_slowtmr+0x280>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8002b82:	682b      	ldr	r3, [r5, #0]
 8002b84:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	2bf0      	cmp	r3, #240	; 0xf0
 8002b8a:	d803      	bhi.n	8002b94 <tcp_slowtmr+0x260>
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
    } else {
      prev = pcb;
      pcb = pcb->next;
 8002b8c:	68f7      	ldr	r7, [r6, #12]
 8002b8e:	4634      	mov	r4, r6
 8002b90:	463e      	mov	r6, r7
 8002b92:	e7f5      	b.n	8002b80 <tcp_slowtmr+0x24c>


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8002b94:	4630      	mov	r0, r6
 8002b96:	f7ff feb1 	bl	80028fc <tcp_pcb_purge>
 8002b9a:	68f3      	ldr	r3, [r6, #12]
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8002b9c:	b10c      	cbz	r4, 8002ba2 <tcp_slowtmr+0x26e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 8002b9e:	60e3      	str	r3, [r4, #12]
 8002ba0:	e001      	b.n	8002ba6 <tcp_slowtmr+0x272>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 8002ba2:	f8c8 3000 	str.w	r3, [r8]
      }
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
 8002ba6:	4631      	mov	r1, r6
 8002ba8:	2002      	movs	r0, #2
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
      }
      pcb2 = pcb;
      pcb = pcb->next;
 8002baa:	68f7      	ldr	r7, [r6, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8002bac:	f7ff face 	bl	800214c <memp_free>
 8002bb0:	4626      	mov	r6, r4
 8002bb2:	e7ec      	b.n	8002b8e <tcp_slowtmr+0x25a>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
 8002bb4:	b007      	add	sp, #28
 8002bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bba:	bf00      	nop
 8002bbc:	20005428 	.word	0x20005428
 8002bc0:	20002aa9 	.word	0x20002aa9
 8002bc4:	20005424 	.word	0x20005424
 8002bc8:	0800a919 	.word	0x0800a919
 8002bcc:	0800a90c 	.word	0x0800a90c
 8002bd0:	000124f8 	.word	0x000124f8
 8002bd4:	20005438 	.word	0x20005438
 8002bd8:	20005420 	.word	0x20005420

08002bdc <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8002bdc:	6803      	ldr	r3, [r0, #0]
 8002bde:	428b      	cmp	r3, r1
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8002be0:	b510      	push	{r4, lr}
 8002be2:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8002be4:	d102      	bne.n	8002bec <tcp_pcb_remove+0x10>
 8002be6:	68cb      	ldr	r3, [r1, #12]
 8002be8:	6003      	str	r3, [r0, #0]
 8002bea:	e010      	b.n	8002c0e <tcp_pcb_remove+0x32>
 8002bec:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <tcp_pcb_remove+0x60>)
 8002bee:	2100      	movs	r1, #0
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	b153      	cbz	r3, 8002c0a <tcp_pcb_remove+0x2e>
 8002bf4:	68d8      	ldr	r0, [r3, #12]
 8002bf6:	4284      	cmp	r4, r0
 8002bf8:	d104      	bne.n	8002c04 <tcp_pcb_remove+0x28>
 8002bfa:	b101      	cbz	r1, 8002bfe <tcp_pcb_remove+0x22>
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	68e2      	ldr	r2, [r4, #12]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	e004      	b.n	8002c0e <tcp_pcb_remove+0x32>
 8002c04:	2101      	movs	r1, #1
 8002c06:	4603      	mov	r3, r0
 8002c08:	e7f3      	b.n	8002bf2 <tcp_pcb_remove+0x16>
 8002c0a:	b101      	cbz	r1, 8002c0e <tcp_pcb_remove+0x32>
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff fe72 	bl	80028fc <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8002c18:	7e23      	ldrb	r3, [r4, #24]
 8002c1a:	2b0a      	cmp	r3, #10
 8002c1c:	d00a      	beq.n	8002c34 <tcp_pcb_remove+0x58>
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d008      	beq.n	8002c34 <tcp_pcb_remove+0x58>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8002c22:	7fa3      	ldrb	r3, [r4, #30]

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
 8002c24:	07da      	lsls	r2, r3, #31
 8002c26:	d505      	bpl.n	8002c34 <tcp_pcb_remove+0x58>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f001 fb98 	bl	8004364 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8002c34:	2300      	movs	r3, #0
 8002c36:	7623      	strb	r3, [r4, #24]
 8002c38:	bd10      	pop	{r4, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20005430 	.word	0x20005430

08002c40 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8002c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c42:	7e03      	ldrb	r3, [r0, #24]
 8002c44:	4604      	mov	r4, r0
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8002c46:	2900      	cmp	r1, #0
 8002c48:	d03f      	beq.n	8002cca <tcp_close_shutdown+0x8a>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d001      	beq.n	8002c52 <tcp_close_shutdown+0x12>
 8002c4e:	2b07      	cmp	r3, #7
 8002c50:	d13b      	bne.n	8002cca <tcp_close_shutdown+0x8a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
 8002c52:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002c54:	b922      	cbnz	r2, 8002c60 <tcp_close_shutdown+0x20>
 8002c56:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002c58:	f640 3268 	movw	r2, #2920	; 0xb68
 8002c5c:	4291      	cmp	r1, r2
 8002c5e:	d034      	beq.n	8002cca <tcp_close_shutdown+0x8a>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8002c60:	8ba3      	ldrh	r3, [r4, #28]
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	8b63      	ldrh	r3, [r4, #26]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	4622      	mov	r2, r4
 8002c6a:	1d23      	adds	r3, r4, #4
 8002c6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c6e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002c70:	f001 fcb2 	bl	80045d8 <tcp_rst>
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7ff fe41 	bl	80028fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8002c7a:	4a38      	ldr	r2, [pc, #224]	; (8002d5c <tcp_close_shutdown+0x11c>)
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	429c      	cmp	r4, r3
 8002c80:	d101      	bne.n	8002c86 <tcp_close_shutdown+0x46>
 8002c82:	68e3      	ldr	r3, [r4, #12]
 8002c84:	e00f      	b.n	8002ca6 <tcp_close_shutdown+0x66>
 8002c86:	4a36      	ldr	r2, [pc, #216]	; (8002d60 <tcp_close_shutdown+0x120>)
 8002c88:	2100      	movs	r1, #0
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	b153      	cbz	r3, 8002ca4 <tcp_close_shutdown+0x64>
 8002c8e:	68d8      	ldr	r0, [r3, #12]
 8002c90:	4284      	cmp	r4, r0
 8002c92:	d104      	bne.n	8002c9e <tcp_close_shutdown+0x5e>
 8002c94:	b101      	cbz	r1, 8002c98 <tcp_close_shutdown+0x58>
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	68e2      	ldr	r2, [r4, #12]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	e004      	b.n	8002ca8 <tcp_close_shutdown+0x68>
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	e7f3      	b.n	8002c8c <tcp_close_shutdown+0x4c>
 8002ca4:	b101      	cbz	r1, 8002ca8 <tcp_close_shutdown+0x68>
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <tcp_close_shutdown+0x124>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8002cae:	7e23      	ldrb	r3, [r4, #24]
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
 8002cb0:	2500      	movs	r5, #0
      if (pcb->state == ESTABLISHED) {
 8002cb2:	2b04      	cmp	r3, #4
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
 8002cb4:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 8002cb6:	d13a      	bne.n	8002d2e <tcp_close_shutdown+0xee>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8002cb8:	230a      	movs	r3, #10
 8002cba:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <tcp_close_shutdown+0x128>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	60e2      	str	r2, [r4, #12]
 8002cc2:	601c      	str	r4, [r3, #0]
 8002cc4:	f001 fd9a 	bl	80047fc <tcp_timer_needed>
 8002cc8:	e045      	b.n	8002d56 <tcp_close_shutdown+0x116>
      }
      return ERR_OK;
    }
  }

  switch (pcb->state) {
 8002cca:	2b07      	cmp	r3, #7
 8002ccc:	d843      	bhi.n	8002d56 <tcp_close_shutdown+0x116>
 8002cce:	e8df f003 	tbb	[pc, r3]
 8002cd2:	2004      	.short	0x2004
 8002cd4:	42333327 	.word	0x42333327
 8002cd8:	3942      	.short	0x3942
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    if (pcb->local_port != 0) {
 8002cda:	8b63      	ldrh	r3, [r4, #26]
 8002cdc:	b33b      	cbz	r3, 8002d2e <tcp_close_shutdown+0xee>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8002cde:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <tcp_close_shutdown+0x12c>)
 8002ce0:	6813      	ldr	r3, [r2, #0]
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	d101      	bne.n	8002cea <tcp_close_shutdown+0xaa>
 8002ce6:	68e3      	ldr	r3, [r4, #12]
 8002ce8:	e00f      	b.n	8002d0a <tcp_close_shutdown+0xca>
 8002cea:	4a1d      	ldr	r2, [pc, #116]	; (8002d60 <tcp_close_shutdown+0x120>)
 8002cec:	2100      	movs	r1, #0
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	b153      	cbz	r3, 8002d08 <tcp_close_shutdown+0xc8>
 8002cf2:	68d8      	ldr	r0, [r3, #12]
 8002cf4:	4284      	cmp	r4, r0
 8002cf6:	d104      	bne.n	8002d02 <tcp_close_shutdown+0xc2>
 8002cf8:	b101      	cbz	r1, 8002cfc <tcp_close_shutdown+0xbc>
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	68e2      	ldr	r2, [r4, #12]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	e004      	b.n	8002d0c <tcp_close_shutdown+0xcc>
 8002d02:	2101      	movs	r1, #1
 8002d04:	4603      	mov	r3, r0
 8002d06:	e7f3      	b.n	8002cf0 <tcp_close_shutdown+0xb0>
 8002d08:	b101      	cbz	r1, 8002d0c <tcp_close_shutdown+0xcc>
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60e3      	str	r3, [r4, #12]
 8002d10:	e00d      	b.n	8002d2e <tcp_close_shutdown+0xee>
    memp_free(MEMP_TCP_PCB, pcb);
    pcb = NULL;
    break;
  case LISTEN:
    err = ERR_OK;
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8002d12:	4621      	mov	r1, r4
 8002d14:	4816      	ldr	r0, [pc, #88]	; (8002d70 <tcp_close_shutdown+0x130>)
 8002d16:	f7ff ff61 	bl	8002bdc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	2003      	movs	r0, #3
 8002d1e:	e008      	b.n	8002d32 <tcp_close_shutdown+0xf2>
    pcb = NULL;
    break;
  case SYN_SENT:
    err = ERR_OK;
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8002d20:	4621      	mov	r1, r4
 8002d22:	480e      	ldr	r0, [pc, #56]	; (8002d5c <tcp_close_shutdown+0x11c>)
 8002d24:	f7ff ff5a 	bl	8002bdc <tcp_pcb_remove>
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <tcp_close_shutdown+0x124>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8002d2e:	4621      	mov	r1, r4
 8002d30:	2002      	movs	r0, #2
 8002d32:	f7ff fa0b 	bl	800214c <memp_free>
    pcb = NULL;
    snmp_inc_tcpattemptfails();
    break;
 8002d36:	e00e      	b.n	8002d56 <tcp_close_shutdown+0x116>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f001 face 	bl	80042da <tcp_send_fin>
    if (err == ERR_OK) {
 8002d3e:	b958      	cbnz	r0, 8002d58 <tcp_close_shutdown+0x118>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
 8002d40:	2305      	movs	r3, #5
 8002d42:	e004      	b.n	8002d4e <tcp_close_shutdown+0x10e>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    }
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8002d44:	4620      	mov	r0, r4
 8002d46:	f001 fac8 	bl	80042da <tcp_send_fin>
    if (err == ERR_OK) {
 8002d4a:	b928      	cbnz	r0, 8002d58 <tcp_close_shutdown+0x118>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
 8002d4c:	2309      	movs	r3, #9
 8002d4e:	7623      	strb	r3, [r4, #24]
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
 8002d50:	4620      	mov	r0, r4
 8002d52:	f001 fb07 	bl	8004364 <tcp_output>
 8002d56:	2000      	movs	r0, #0
  }
  return err;
}
 8002d58:	b003      	add	sp, #12
 8002d5a:	bd30      	pop	{r4, r5, pc}
 8002d5c:	20005424 	.word	0x20005424
 8002d60:	20005430 	.word	0x20005430
 8002d64:	20005420 	.word	0x20005420
 8002d68:	20005438 	.word	0x20005438
 8002d6c:	20005434 	.word	0x20005434
 8002d70:	2000542c 	.word	0x2000542c

08002d74 <tcp_close>:
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
 8002d74:	7e03      	ldrb	r3, [r0, #24]
 8002d76:	2b01      	cmp	r3, #1
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8002d78:	bf1e      	ittt	ne
 8002d7a:	7f83      	ldrbne	r3, [r0, #30]
 8002d7c:	f043 0310 	orrne.w	r3, r3, #16
 8002d80:	7783      	strbne	r3, [r0, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8002d82:	2101      	movs	r1, #1
 8002d84:	f7ff bf5c 	b.w	8002c40 <tcp_close_shutdown>

08002d88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	4608      	mov	r0, r1
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	b132      	cbz	r2, 8002d9e <tcp_recv_null+0x16>
    tcp_recved(pcb, p->tot_len);
 8002d90:	8911      	ldrh	r1, [r2, #8]
 8002d92:	f7ff fd70 	bl	8002876 <tcp_recved>
    pbuf_free(p);
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7ff fae8 	bl	800236c <pbuf_free>
 8002d9c:	e004      	b.n	8002da8 <tcp_recv_null+0x20>
  } else if (err == ERR_OK) {
 8002d9e:	b91b      	cbnz	r3, 8002da8 <tcp_recv_null+0x20>
    return tcp_close(pcb);
  }
  return ERR_OK;
}
 8002da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
    tcp_recved(pcb, p->tot_len);
    pbuf_free(p);
  } else if (err == ERR_OK) {
    return tcp_close(pcb);
 8002da4:	f7ff bfe6 	b.w	8002d74 <tcp_close>
  }
  return ERR_OK;
}
 8002da8:	2000      	movs	r0, #0
 8002daa:	bd10      	pop	{r4, pc}

08002dac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
 8002dae:	6f45      	ldr	r5, [r0, #116]	; 0x74
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
  pcb->refused_data = NULL;
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8002db0:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
 8002db2:	7b6f      	ldrb	r7, [r5, #13]
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
  pcb->refused_data = NULL;
 8002db4:	2300      	movs	r3, #0
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8002db6:	4604      	mov	r4, r0
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
  pcb->refused_data = NULL;
 8002db8:	6743      	str	r3, [r0, #116]	; 0x74
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8002dba:	b126      	cbz	r6, 8002dc6 <tcp_process_refused_data+0x1a>
 8002dbc:	4601      	mov	r1, r0
 8002dbe:	462a      	mov	r2, r5
 8002dc0:	6900      	ldr	r0, [r0, #16]
 8002dc2:	47b0      	blx	r6
 8002dc4:	e005      	b.n	8002dd2 <tcp_process_refused_data+0x26>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4633      	mov	r3, r6
 8002dca:	462a      	mov	r2, r5
 8002dcc:	4630      	mov	r0, r6
 8002dce:	f7ff ffdb 	bl	8002d88 <tcp_recv_null>
  if (err == ERR_OK) {
 8002dd2:	b9a0      	cbnz	r0, 8002dfe <tcp_process_refused_data+0x52>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
 8002dd4:	06bb      	lsls	r3, r7, #26
 8002dd6:	d515      	bpl.n	8002e04 <tcp_process_refused_data+0x58>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
 8002dd8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        pcb->rcv_wnd++;
      }
      TCP_EVENT_CLOSED(pcb, err);
 8002dda:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
  if (err == ERR_OK) {
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
 8002ddc:	f640 3268 	movw	r2, #2920	; 0xb68
 8002de0:	4293      	cmp	r3, r2
        pcb->rcv_wnd++;
 8002de2:	bf1c      	itt	ne
 8002de4:	3301      	addne	r3, #1
 8002de6:	85a3      	strhne	r3, [r4, #44]	; 0x2c
      }
      TCP_EVENT_CLOSED(pcb, err);
 8002de8:	b165      	cbz	r5, 8002e04 <tcp_process_refused_data+0x58>
 8002dea:	2300      	movs	r3, #0
 8002dec:	461a      	mov	r2, r3
 8002dee:	4621      	mov	r1, r4
 8002df0:	6920      	ldr	r0, [r4, #16]
 8002df2:	47a8      	blx	r5
      if (err == ERR_ABRT) {
 8002df4:	300a      	adds	r0, #10
 8002df6:	d105      	bne.n	8002e04 <tcp_process_refused_data+0x58>
        return ERR_ABRT;
 8002df8:	f06f 0009 	mvn.w	r0, #9
 8002dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  } else if (err == ERR_ABRT) {
 8002dfe:	300a      	adds	r0, #10
 8002e00:	d0fa      	beq.n	8002df8 <tcp_process_refused_data+0x4c>
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
 8002e02:	6765      	str	r5, [r4, #116]	; 0x74
  }
  return ERR_OK;
 8002e04:	2000      	movs	r0, #0
}
 8002e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e08 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8002e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8002e0c:	4d17      	ldr	r5, [pc, #92]	; (8002e6c <tcp_fasttmr+0x64>)

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8002e0e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002e74 <tcp_fasttmr+0x6c>
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8002e12:	782b      	ldrb	r3, [r5, #0]

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 8002e14:	4e16      	ldr	r6, [pc, #88]	; (8002e70 <tcp_fasttmr+0x68>)
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8002e16:	3301      	adds	r3, #1
 8002e18:	702b      	strb	r3, [r5, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8002e1a:	f8d8 4000 	ldr.w	r4, [r8]

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 8002e1e:	2700      	movs	r7, #0

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
    if (pcb->last_timer != tcp_timer_ctr) {
 8002e20:	782b      	ldrb	r3, [r5, #0]
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
 8002e22:	b304      	cbz	r4, 8002e66 <tcp_fasttmr+0x5e>
    if (pcb->last_timer != tcp_timer_ctr) {
 8002e24:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d0fa      	beq.n	8002e22 <tcp_fasttmr+0x1a>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8002e2c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8002e30:	7fa3      	ldrb	r3, [r4, #30]
 8002e32:	07da      	lsls	r2, r3, #31
 8002e34:	d509      	bpl.n	8002e4a <tcp_fasttmr+0x42>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8002e36:	f043 0302 	orr.w	r3, r3, #2
 8002e3a:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f001 fa91 	bl	8004364 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8002e42:	7fa3      	ldrb	r3, [r4, #30]
 8002e44:	f023 0303 	bic.w	r3, r3, #3
 8002e48:	77a3      	strb	r3, [r4, #30]
      }

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8002e4a:	6f63      	ldr	r3, [r4, #116]	; 0x74
        tcp_ack_now(pcb);
        tcp_output(pcb);
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
      }

      next = pcb->next;
 8002e4c:	f8d4 900c 	ldr.w	r9, [r4, #12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8002e50:	b90b      	cbnz	r3, 8002e56 <tcp_fasttmr+0x4e>
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8002e52:	464c      	mov	r4, r9
 8002e54:	e7e4      	b.n	8002e20 <tcp_fasttmr+0x18>
      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
        tcp_process_refused_data(pcb);
 8002e56:	4620      	mov	r0, r4

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 8002e58:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8002e5a:	f7ff ffa7 	bl	8002dac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8002e5e:	7833      	ldrb	r3, [r6, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f6      	beq.n	8002e52 <tcp_fasttmr+0x4a>
 8002e64:	e7d9      	b.n	8002e1a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
    }
  }
}
 8002e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20002aa9 	.word	0x20002aa9
 8002e70:	20005420 	.word	0x20005420
 8002e74:	20005424 	.word	0x20005424

08002e78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8002e78:	b508      	push	{r3, lr}
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8002e7a:	f7ff ffc5 	bl	8002e08 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8002e7e:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <tcp_tmr+0x20>)
 8002e80:	7813      	ldrb	r3, [r2, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	7013      	strb	r3, [r2, #0]
 8002e88:	07db      	lsls	r3, r3, #31
 8002e8a:	d503      	bpl.n	8002e94 <tcp_tmr+0x1c>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  }
}
 8002e8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tcp_fasttmr();

  if (++tcp_timer & 1) {
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8002e90:	f7ff bd50 	b.w	8002934 <tcp_slowtmr>
 8002e94:	bd08      	pop	{r3, pc}
 8002e96:	bf00      	nop
 8002e98:	20002aa8 	.word	0x20002aa8

08002e9c <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8002e9c:	7e03      	ldrb	r3, [r0, #24]
 8002e9e:	2b0a      	cmp	r3, #10
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8002ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	4689      	mov	r9, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8002ea8:	d10a      	bne.n	8002ec0 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8002eaa:	4601      	mov	r1, r0
 8002eac:	481d      	ldr	r0, [pc, #116]	; (8002f24 <tcp_abandon+0x88>)
 8002eae:	f7ff fe95 	bl	8002bdc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	2002      	movs	r0, #2
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 8002eb6:	b003      	add	sp, #12
 8002eb8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
 8002ebc:	f7ff b946 	b.w	800214c <memp_free>
  } else {
    seqno = pcb->snd_nxt;
 8002ec0:	6d07      	ldr	r7, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8002ec2:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8002ec6:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8002eca:	6906      	ldr	r6, [r0, #16]
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8002ecc:	4601      	mov	r1, r0
 8002ece:	4816      	ldr	r0, [pc, #88]	; (8002f28 <tcp_abandon+0x8c>)
 8002ed0:	f7ff fe84 	bl	8002bdc <tcp_pcb_remove>
 8002ed4:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <tcp_abandon+0x90>)
    if (pcb->unacked != NULL) {
 8002ed6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ackno = pcb->rcv_nxt;
#if LWIP_CALLBACK_API
    errf = pcb->errf;
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8002edc:	b108      	cbz	r0, 8002ee2 <tcp_abandon+0x46>
      tcp_segs_free(pcb->unacked);
 8002ede:	f7ff fcf3 	bl	80028c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8002ee2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002ee4:	b108      	cbz	r0, 8002eea <tcp_abandon+0x4e>
      tcp_segs_free(pcb->unsent);
 8002ee6:	f7ff fcef 	bl	80028c8 <tcp_segs_free>
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (reset) {
 8002eea:	f1b9 0f00 	cmp.w	r9, #0
 8002eee:	d009      	beq.n	8002f04 <tcp_abandon+0x68>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
 8002ef0:	8ba3      	ldrh	r3, [r4, #28]
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	8b63      	ldrh	r3, [r4, #26]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4622      	mov	r2, r4
 8002efa:	1d23      	adds	r3, r4, #4
 8002efc:	4641      	mov	r1, r8
 8002efe:	4638      	mov	r0, r7
 8002f00:	f001 fb6a 	bl	80045d8 <tcp_rst>
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8002f04:	4621      	mov	r1, r4
 8002f06:	2002      	movs	r0, #2
 8002f08:	f7ff f920 	bl	800214c <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 8002f0c:	b13d      	cbz	r5, 8002f1e <tcp_abandon+0x82>
 8002f0e:	f06f 0109 	mvn.w	r1, #9
 8002f12:	4630      	mov	r0, r6
 8002f14:	462b      	mov	r3, r5
  }
}
 8002f16:	b003      	add	sp, #12
 8002f18:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (reset) {
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 8002f1c:	4718      	bx	r3
  }
}
 8002f1e:	b003      	add	sp, #12
 8002f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f24:	20005438 	.word	0x20005438
 8002f28:	20005424 	.word	0x20005424
 8002f2c:	20005420 	.word	0x20005420

08002f30 <tcp_abort>:
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  tcp_abandon(pcb, 1);
 8002f30:	2101      	movs	r1, #1
 8002f32:	f7ff bfb3 	b.w	8002e9c <tcp_abandon>
	...

08002f38 <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
 8002f38:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <tcp_next_iss+0x10>)
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <tcp_next_iss+0x14>)
 8002f3c:	6810      	ldr	r0, [r2, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4418      	add	r0, r3
 8002f42:	6010      	str	r0, [r2, #0]
  return iss;
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	20005428 	.word	0x20005428

08002f50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	4606      	mov	r6, r0
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7ff f8e9 	bl	800212c <memp_malloc>
 8002f5a:	4d38      	ldr	r5, [pc, #224]	; (800303c <tcp_alloc+0xec>)
  if (pcb == NULL) {
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d131      	bne.n	8002fc6 <tcp_alloc+0x76>
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8002f62:	4b37      	ldr	r3, [pc, #220]	; (8003040 <tcp_alloc+0xf0>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8002f64:	6829      	ldr	r1, [r5, #0]
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b13b      	cbz	r3, 8002f7a <tcp_alloc+0x2a>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8002f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6c:	1a8a      	subs	r2, r1, r2
 8002f6e:	42a2      	cmp	r2, r4
 8002f70:	bf24      	itt	cs
 8002f72:	4618      	movcs	r0, r3
 8002f74:	4614      	movcs	r4, r2
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	e7f6      	b.n	8002f68 <tcp_alloc+0x18>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
 8002f7a:	b108      	cbz	r0, 8002f80 <tcp_alloc+0x30>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8002f7c:	f7ff ffd8 	bl	8002f30 <tcp_abort>
  if (pcb == NULL) {
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8002f80:	2002      	movs	r0, #2
 8002f82:	f7ff f8d3 	bl	800212c <memp_malloc>
    if (pcb == NULL) {
 8002f86:	4604      	mov	r4, r0
 8002f88:	b9e8      	cbnz	r0, 8002fc6 <tcp_alloc+0x76>
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <tcp_alloc+0xf4>)
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8002f8c:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8002f90:	681b      	ldr	r3, [r3, #0]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
 8002f92:	277f      	movs	r7, #127	; 0x7f
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8002f94:	b173      	cbz	r3, 8002fb4 <tcp_alloc+0x64>
    if (pcb->prio <= prio &&
 8002f96:	7e59      	ldrb	r1, [r3, #25]
 8002f98:	428e      	cmp	r6, r1
 8002f9a:	d309      	bcc.n	8002fb0 <tcp_alloc+0x60>
 8002f9c:	42b9      	cmp	r1, r7
 8002f9e:	d807      	bhi.n	8002fb0 <tcp_alloc+0x60>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8002fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa2:	ebc2 020e 	rsb	r2, r2, lr
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
 8002fa6:	42a2      	cmp	r2, r4
 8002fa8:	bf22      	ittt	cs
 8002faa:	460f      	movcs	r7, r1
 8002fac:	4614      	movcs	r4, r2
 8002fae:	4618      	movcs	r0, r3
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	e7ef      	b.n	8002f94 <tcp_alloc+0x44>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
 8002fb4:	b108      	cbz	r0, 8002fba <tcp_alloc+0x6a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8002fb6:	f7ff ffbb 	bl	8002f30 <tcp_abort>
    if (pcb == NULL) {
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f7ff f8b6 	bl	800212c <memp_malloc>
    if (pcb != NULL) {
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d037      	beq.n	8003036 <tcp_alloc+0xe6>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8002fc6:	2294      	movs	r2, #148	; 0x94
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f004 f8ce 	bl	800716c <memset>
    pcb->prio = prio;
    pcb->snd_buf = TCP_SND_BUF;
 8002fd0:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8002fd4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
    pcb->rcv_wnd = TCP_WND;
 8002fd8:	f640 3368 	movw	r3, #2920	; 0xb68
 8002fdc:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
 8002fde:	85e3      	strh	r3, [r4, #46]	; 0x2e
    pcb->tos = 0;
    pcb->ttl = TCP_TTL;
 8002fe0:	23ff      	movs	r3, #255	; 0xff
 8002fe2:	72a3      	strb	r3, [r4, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 8002fe4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002fe8:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8002fea:	2306      	movs	r3, #6
 8002fec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8002ff0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
 8002ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  }
  if (pcb != NULL) {
    memset(pcb, 0, sizeof(struct tcp_pcb));
    pcb->prio = prio;
    pcb->snd_buf = TCP_SND_BUF;
    pcb->snd_queuelen = 0;
 8002ff8:	2100      	movs	r1, #0
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
    pcb->sa = 0;
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
 8002ffa:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
    memset(pcb, 0, sizeof(struct tcp_pcb));
    pcb->prio = prio;
 8003002:	7666      	strb	r6, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
    pcb->snd_queuelen = 0;
 8003004:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
    pcb->rcv_ann_wnd = TCP_WND;
    pcb->tos = 0;
 8003008:	7261      	strb	r1, [r4, #9]
    pcb->ttl = TCP_TTL;
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
    pcb->sa = 0;
 800300a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
 800300e:	f7ff ff93 	bl	8002f38 <tcp_next_iss>
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;   
    pcb->tmr = tcp_ticks;
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <tcp_alloc+0xf8>)
    pcb->sa = 0;
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
 8003018:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;   
    pcb->tmr = tcp_ticks;
    pcb->last_timer = tcp_timer_ctr;
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb->polltmr = 0;

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <tcp_alloc+0xfc>)
 8003022:	67e3      	str	r3, [r4, #124]	; 0x7c
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <tcp_alloc+0x100>)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
 8003026:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
 8003028:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;   
 800302a:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
    pcb->last_timer = tcp_timer_ctr;

    pcb->polltmr = 0;
 800302c:	77e1      	strb	r1, [r4, #31]
#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800302e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
 8003032:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
  }
  return pcb;
}
 8003036:	4620      	mov	r0, r4
 8003038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800303a:	bf00      	nop
 800303c:	20005428 	.word	0x20005428
 8003040:	20005438 	.word	0x20005438
 8003044:	20005424 	.word	0x20005424
 8003048:	20002aa9 	.word	0x20002aa9
 800304c:	08002d89 	.word	0x08002d89
 8003050:	006ddd00 	.word	0x006ddd00

08003054 <tcp_new>:
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  return tcp_alloc(TCP_PRIO_NORMAL);
 8003054:	2040      	movs	r0, #64	; 0x40
 8003056:	f7ff bf7b 	b.w	8002f50 <tcp_alloc>

0800305a <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
 800305a:	b510      	push	{r4, lr}
 800305c:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
 800305e:	4608      	mov	r0, r1
 8003060:	f7fe f8d6 	bl	8001210 <ip_route>
  if ((outif != NULL) && (outif->mtu != 0)) {
 8003064:	b130      	cbz	r0, 8003074 <tcp_eff_send_mss+0x1a>
 8003066:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8003068:	b123      	cbz	r3, 8003074 <tcp_eff_send_mss+0x1a>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800306a:	3b28      	subs	r3, #40	; 0x28
 800306c:	b29b      	uxth	r3, r3
 800306e:	429c      	cmp	r4, r3
 8003070:	bf28      	it	cs
 8003072:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 8003074:	4620      	mov	r0, r4
 8003076:	bd10      	pop	{r4, pc}

08003078 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800307c:	4b9d      	ldr	r3, [pc, #628]	; (80032f4 <tcp_receive+0x27c>)
 800307e:	4e9e      	ldr	r6, [pc, #632]	; (80032f8 <tcp_receive+0x280>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f013 0f10 	tst.w	r3, #16
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8003086:	4604      	mov	r4, r0
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8003088:	f000 8162 	beq.w	8003350 <tcp_receive+0x2d8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800308c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800308e:	6831      	ldr	r1, [r6, #0]
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8003090:	f8b0 7060 	ldrh.w	r7, [r0, #96]	; 0x60
 8003094:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003096:	4d99      	ldr	r5, [pc, #612]	; (80032fc <tcp_receive+0x284>)

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8003098:	1a58      	subs	r0, r3, r1
 800309a:	2800      	cmp	r0, #0
 800309c:	db0d      	blt.n	80030ba <tcp_receive+0x42>
 800309e:	428b      	cmp	r3, r1
 80030a0:	d103      	bne.n	80030aa <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80030a2:	682b      	ldr	r3, [r5, #0]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db07      	blt.n	80030ba <tcp_receive+0x42>
 80030aa:	682b      	ldr	r3, [r5, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d11e      	bne.n	80030ee <tcp_receive+0x76>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 80030b0:	4b93      	ldr	r3, [pc, #588]	; (8003300 <tcp_receive+0x288>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	89db      	ldrh	r3, [r3, #14]
 80030b6:	42bb      	cmp	r3, r7
 80030b8:	d919      	bls.n	80030ee <tcp_receive+0x76>
      pcb->snd_wnd = tcphdr->wnd;
 80030ba:	4b91      	ldr	r3, [pc, #580]	; (8003300 <tcp_receive+0x288>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 80030bc:	f8b4 e062 	ldrh.w	lr, [r4, #98]	; 0x62

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
      pcb->snd_wnd = tcphdr->wnd;
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	89d8      	ldrh	r0, [r3, #14]
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
        pcb->snd_wnd_max = tcphdr->wnd;
      }
      pcb->snd_wl1 = seqno;
 80030c4:	6561      	str	r1, [r4, #84]	; 0x54
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
      pcb->snd_wnd = tcphdr->wnd;
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 80030c6:	4586      	cmp	lr, r0
        pcb->snd_wnd_max = tcphdr->wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 80030c8:	6829      	ldr	r1, [r5, #0]
 80030ca:	65a1      	str	r1, [r4, #88]	; 0x58

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
      pcb->snd_wnd = tcphdr->wnd;
 80030cc:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
        pcb->snd_wnd_max = tcphdr->wnd;
 80030d0:	bf38      	it	cc
 80030d2:	f8a4 0062 	strhcc.w	r0, [r4, #98]	; 0x62
 80030d6:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
      if (pcb->snd_wnd == 0) {
 80030da:	b920      	cbnz	r0, 80030e6 <tcp_receive+0x6e>
        if (pcb->persist_backoff == 0) {
 80030dc:	b939      	cbnz	r1, 80030ee <tcp_receive+0x76>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80030de:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
          pcb->persist_backoff = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e001      	b.n	80030ea <tcp_receive+0x72>
        }
      } else if (pcb->persist_backoff > 0) {
 80030e6:	b111      	cbz	r1, 80030ee <tcp_receive+0x76>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80030ee:	6829      	ldr	r1, [r5, #0]
 80030f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80030f2:	1a0b      	subs	r3, r1, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	dc34      	bgt.n	8003162 <tcp_receive+0xea>
      pcb->acked = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
 80030fe:	4b81      	ldr	r3, [pc, #516]	; (8003304 <tcp_receive+0x28c>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 81f3 	bne.w	80034ee <tcp_receive+0x476>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 8003108:	443a      	add	r2, r7
 800310a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800310c:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 8003110:	443b      	add	r3, r7
 8003112:	429a      	cmp	r2, r3
 8003114:	f040 81eb 	bne.w	80034ee <tcp_receive+0x476>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8003118:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800311c:	2b00      	cmp	r3, #0
 800311e:	f2c0 81e6 	blt.w	80034ee <tcp_receive+0x476>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8003122:	4281      	cmp	r1, r0
 8003124:	f040 81e3 	bne.w	80034ee <tcp_receive+0x476>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8003128:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800312c:	1c53      	adds	r3, r2, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 8003132:	bf38      	it	cc
 8003134:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
 8003138:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800313c:	2b03      	cmp	r3, #3
 800313e:	d90a      	bls.n	8003156 <tcp_receive+0xde>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8003140:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8003144:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003146:	4413      	add	r3, r2
 8003148:	b29b      	uxth	r3, r3
 800314a:	429a      	cmp	r2, r3
 800314c:	f080 8087 	bcs.w	800325e <tcp_receive+0x1e6>
                  pcb->cwnd += pcb->mss;
 8003150:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8003154:	e083      	b.n	800325e <tcp_receive+0x1e6>
                }
              } else if (pcb->dupacks == 3) {
 8003156:	f040 8082 	bne.w	800325e <tcp_receive+0x1e6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800315a:	4620      	mov	r0, r4
 800315c:	f001 fabf 	bl	80046de <tcp_rexmit_fast>
 8003160:	e07d      	b.n	800325e <tcp_receive+0x1e6>
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 8003162:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003164:	1a8a      	subs	r2, r1, r2
 8003166:	2a00      	cmp	r2, #0
 8003168:	dc76      	bgt.n	8003258 <tcp_receive+0x1e0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800316a:	7fa2      	ldrb	r2, [r4, #30]

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800316c:	f9b4 7040 	ldrsh.w	r7, [r4, #64]	; 0x40

      pcb->snd_buf += pcb->acked;

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
      pcb->lastack = ackno;
 8003170:	64a1      	str	r1, [r4, #72]	; 0x48
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8003172:	0750      	lsls	r0, r2, #29
        pcb->flags &= ~TF_INFR;
 8003174:	bf41      	itttt	mi
 8003176:	f022 0204 	bicmi.w	r2, r2, #4
 800317a:	77a2      	strbmi	r2, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
 800317c:	f8b4 204e 	ldrhmi.w	r2, [r4, #78]	; 0x4e
 8003180:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8003184:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8003188:	eb02 02e7 	add.w	r2, r2, r7, asr #3
 800318c:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);

      pcb->snd_buf += pcb->acked;
 8003190:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
 8003194:	b29b      	uxth	r3, r3
 8003196:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64

      pcb->snd_buf += pcb->acked;
 800319a:	4413      	add	r3, r2
 800319c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->dupacks = 0;
      pcb->lastack = ackno;

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80031a0:	7e23      	ldrb	r3, [r4, #24]
        pcb->flags &= ~TF_INFR;
        pcb->cwnd = pcb->ssthresh;
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80031a2:	2000      	movs	r0, #0
      pcb->dupacks = 0;
      pcb->lastack = ackno;

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80031a4:	2b03      	cmp	r3, #3
        pcb->flags &= ~TF_INFR;
        pcb->cwnd = pcb->ssthresh;
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80031a6:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
      pcb->acked = (u16_t)(ackno - pcb->lastack);

      pcb->snd_buf += pcb->acked;

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80031aa:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      pcb->lastack = ackno;

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80031ae:	d946      	bls.n	800323e <tcp_receive+0x1c6>
        if (pcb->cwnd < pcb->ssthresh) {
 80031b0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80031b4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80031b8:	4293      	cmp	r3, r2
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80031ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
            pcb->cwnd += pcb->mss;
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80031bc:	bf9c      	itt	ls
 80031be:	435b      	mulls	r3, r3
 80031c0:	fb93 f3f2 	sdivls	r3, r3, r2
 80031c4:	4413      	add	r3, r2
 80031c6:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d238      	bcs.n	800323e <tcp_receive+0x1c6>
            pcb->cwnd = new_cwnd;
 80031cc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80031d0:	e035      	b.n	800323e <tcp_receive+0x1c6>
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	6858      	ldr	r0, [r3, #4]
 80031d6:	f7fe fc3d 	bl	8001a54 <lwip_ntohl>
 80031da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80031dc:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4607      	mov	r7, r0
 80031e4:	8998      	ldrh	r0, [r3, #12]
 80031e6:	f7fe fc30 	bl	8001a4a <lwip_ntohs>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 80031ea:	f010 0003 	ands.w	r0, r0, #3
 80031ee:	bf18      	it	ne
 80031f0:	2001      	movne	r0, #1
 80031f2:	4480      	add	r8, r0
 80031f4:	6828      	ldr	r0, [r5, #0]
 80031f6:	1a3f      	subs	r7, r7, r0
 80031f8:	4447      	add	r7, r8
 80031fa:	2f00      	cmp	r7, #0
 80031fc:	dc22      	bgt.n	8003244 <tcp_receive+0x1cc>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80031fe:	6f27      	ldr	r7, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6723      	str	r3, [r4, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff f982 	bl	800250e <pbuf_clen>
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 800320a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800320e:	b15b      	cbz	r3, 8003228 <tcp_receive+0x1b0>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8998      	ldrh	r0, [r3, #12]
 8003214:	f7fe fc19 	bl	8001a4a <lwip_ntohs>
 8003218:	07c1      	lsls	r1, r0, #31
          pcb->acked--;
 800321a:	bf42      	ittt	mi
 800321c:	f8b4 3064 	ldrhmi.w	r3, [r4, #100]	; 0x64
 8003220:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8003224:	f8a4 3064 	strhmi.w	r3, [r4, #100]	; 0x64
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff f970 	bl	800250e <pbuf_clen>
 800322e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8003232:	1a18      	subs	r0, r3, r0
 8003234:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
 8003238:	4638      	mov	r0, r7
 800323a:	f7ff fb37 	bl	80028ac <tcp_seg_free>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 800323e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1c6      	bne.n	80031d2 <tcp_receive+0x15a>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 8003244:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003246:	2300      	movs	r3, #0
 8003248:	b91a      	cbnz	r2, 8003252 <tcp_receive+0x1da>
        pcb->rtime = -1;
 800324a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800324e:	86a2      	strh	r2, [r4, #52]	; 0x34
 8003250:	e000      	b.n	8003254 <tcp_receive+0x1dc>
      else
        pcb->rtime = 0;
 8003252:	86a3      	strh	r3, [r4, #52]	; 0x34

      pcb->polltmr = 0;
 8003254:	77e3      	strb	r3, [r4, #31]
 8003256:	e002      	b.n	800325e <tcp_receive+0x1e6>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 800325e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80032fc <tcp_receive+0x284>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8003262:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003264:	b91b      	cbnz	r3, 800326e <tcp_receive+0x1f6>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8003266:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003268:	2800      	cmp	r0, #0
 800326a:	d14d      	bne.n	8003308 <tcp_receive+0x290>
 800326c:	e070      	b.n	8003350 <tcp_receive+0x2d8>
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	682f      	ldr	r7, [r5, #0]
 8003272:	6858      	ldr	r0, [r3, #4]
 8003274:	f7fe fbee 	bl	8001a54 <lwip_ntohl>
 8003278:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800327a:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4682      	mov	sl, r0
 8003282:	8998      	ldrh	r0, [r3, #12]
 8003284:	f7fe fbe1 	bl	8001a4a <lwip_ntohs>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8003288:	f010 0003 	ands.w	r0, r0, #3
 800328c:	bf18      	it	ne
 800328e:	2001      	movne	r0, #1
 8003290:	ebca 0707 	rsb	r7, sl, r7
 8003294:	4481      	add	r9, r0
 8003296:	ebc9 0707 	rsb	r7, r9, r7
 800329a:	2f00      	cmp	r7, #0
 800329c:	dbe3      	blt.n	8003266 <tcp_receive+0x1ee>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 800329e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80032a0:	f8d8 3000 	ldr.w	r3, [r8]
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	dcdd      	bgt.n	8003266 <tcp_receive+0x1ee>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80032aa:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	66e3      	str	r3, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80032b0:	b90b      	cbnz	r3, 80032b6 <tcp_receive+0x23e>
        pcb->unsent_oversize = 0;
 80032b2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff f929 	bl	800250e <pbuf_clen>
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 80032bc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80032c0:	b15b      	cbz	r3, 80032da <tcp_receive+0x262>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8998      	ldrh	r0, [r3, #12]
 80032c6:	f7fe fbc0 	bl	8001a4a <lwip_ntohs>
 80032ca:	07c2      	lsls	r2, r0, #31
        pcb->acked--;
 80032cc:	bf42      	ittt	mi
 80032ce:	f8b4 3064 	ldrhmi.w	r3, [r4, #100]	; 0x64
 80032d2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80032d6:	f8a4 3064 	strhmi.w	r3, [r4, #100]	; 0x64
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff f917 	bl	800250e <pbuf_clen>
 80032e0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80032e4:	1a18      	subs	r0, r3, r0
 80032e6:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
 80032ea:	4638      	mov	r0, r7
 80032ec:	f7ff fade 	bl	80028ac <tcp_seg_free>
 80032f0:	e7b7      	b.n	8003262 <tcp_receive+0x1ea>
 80032f2:	bf00      	nop
 80032f4:	20002ab8 	.word	0x20002ab8
 80032f8:	20002aac 	.word	0x20002aac
 80032fc:	20002ab4 	.word	0x20002ab4
 8003300:	20002abc 	.word	0x20002abc
 8003304:	20002ab0 	.word	0x20002ab0
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8003308:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800330a:	682b      	ldr	r3, [r5, #0]
 800330c:	1ad2      	subs	r2, r2, r3
 800330e:	2a00      	cmp	r2, #0
 8003310:	da1e      	bge.n	8003350 <tcp_receive+0x2d8>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8003312:	4b7a      	ldr	r3, [pc, #488]	; (80034fc <tcp_receive+0x484>)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8003314:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1a1b      	subs	r3, r3, r0
 800331c:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
 8003320:	b29b      	uxth	r3, r3
 8003322:	b21a      	sxth	r2, r3
      pcb->sa += m;
      if (m < 0) {
 8003324:	2a00      	cmp	r2, #0
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
      pcb->sa += m;
 8003326:	4419      	add	r1, r3
      if (m < 0) {
        m = -m;
 8003328:	bfbc      	itt	lt
 800332a:	425b      	neglt	r3, r3
 800332c:	b21a      	sxthlt	r2, r3
      }
      m = m - (pcb->sv >> 2);
 800332e:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
      pcb->sv += m;
 8003332:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 8003336:	441a      	add	r2, r3
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
      pcb->sa += m;
 8003338:	b209      	sxth	r1, r1
      if (m < 0) {
        m = -m;
      }
      m = m - (pcb->sv >> 2);
      pcb->sv += m;
 800333a:	b293      	uxth	r3, r2
 800333c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8003340:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8003344:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 8003348:	2300      	movs	r3, #0
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
      pcb->sa += m;
 800334a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      pcb->rto = (pcb->sa >> 3) + pcb->sv;

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 800334e:	63a3      	str	r3, [r4, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8003350:	4f6b      	ldr	r7, [pc, #428]	; (8003500 <tcp_receive+0x488>)
 8003352:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003354:	883d      	ldrh	r5, [r7, #0]
 8003356:	2d00      	cmp	r5, #0
 8003358:	f000 80b9 	beq.w	80034ce <tcp_receive+0x456>
 800335c:	7e23      	ldrb	r3, [r4, #24]
 800335e:	2b06      	cmp	r3, #6
 8003360:	f200 80b5 	bhi.w	80034ce <tcp_receive+0x456>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
 8003364:	6833      	ldr	r3, [r6, #0]
 8003366:	1ad1      	subs	r1, r2, r3
 8003368:	2901      	cmp	r1, #1
 800336a:	d428      	bmi.n	80033be <tcp_receive+0x346>
 800336c:	1c50      	adds	r0, r2, #1
 800336e:	1ac0      	subs	r0, r0, r3
 8003370:	1b40      	subs	r0, r0, r5
 8003372:	2800      	cmp	r0, #0
 8003374:	dc23      	bgt.n	80033be <tcp_receive+0x346>
         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
      p = inseg.p;
 8003376:	4d63      	ldr	r5, [pc, #396]	; (8003504 <tcp_receive+0x48c>)
 8003378:	6868      	ldr	r0, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 800337a:	8942      	ldrh	r2, [r0, #10]
 800337c:	4291      	cmp	r1, r2

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
 800337e:	460b      	mov	r3, r1
      p = inseg.p;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 8003380:	dd0f      	ble.n	80033a2 <tcp_receive+0x32a>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8003382:	8902      	ldrh	r2, [r0, #8]
 8003384:	1a52      	subs	r2, r2, r1
 8003386:	b292      	uxth	r2, r2
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8003388:	f04f 0e00 	mov.w	lr, #0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
 800338c:	8941      	ldrh	r1, [r0, #10]
 800338e:	428b      	cmp	r3, r1
 8003390:	dd05      	ble.n	800339e <tcp_receive+0x326>
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8003392:	8102      	strh	r2, [r0, #8]
          p->len = 0;
 8003394:	f8a0 e00a 	strh.w	lr, [r0, #10]
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
          off -= p->len;
 8003398:	1a5b      	subs	r3, r3, r1
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
 800339a:	6800      	ldr	r0, [r0, #0]
 800339c:	e7f6      	b.n	800338c <tcp_receive+0x314>
        }
        if(pbuf_header(p, (s16_t)-off)) {
 800339e:	4259      	negs	r1, r3
 80033a0:	e000      	b.n	80033a4 <tcp_receive+0x32c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
 80033a2:	4249      	negs	r1, r1
 80033a4:	b209      	sxth	r1, r1
 80033a6:	f7fe ffb5 	bl	8002314 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80033aa:	6831      	ldr	r1, [r6, #0]
 80033ac:	892b      	ldrh	r3, [r5, #8]
 80033ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80033b0:	6032      	str	r2, [r6, #0]
        if(pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80033b2:	440b      	add	r3, r1
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80033b8:	68eb      	ldr	r3, [r5, #12]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	e006      	b.n	80033cc <tcp_receive+0x354>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	2b00      	cmp	r3, #0
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80033c2:	bfbe      	ittt	lt
 80033c4:	7fa3      	ldrblt	r3, [r4, #30]
 80033c6:	f043 0302 	orrlt.w	r3, r3, #2
 80033ca:	77a3      	strblt	r3, [r4, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 80033cc:	6831      	ldr	r1, [r6, #0]
 80033ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80033d0:	1a8b      	subs	r3, r1, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db76      	blt.n	80034c4 <tcp_receive+0x44c>
 80033d6:	1c4b      	adds	r3, r1, #1
 80033d8:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	1a1b      	subs	r3, r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	dc70      	bgt.n	80034c4 <tcp_receive+0x44c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 80033e2:	4291      	cmp	r1, r2
 80033e4:	d16e      	bne.n	80034c4 <tcp_receive+0x44c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80033e6:	4d47      	ldr	r5, [pc, #284]	; (8003504 <tcp_receive+0x48c>)
 80033e8:	68eb      	ldr	r3, [r5, #12]
 80033ea:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80033ee:	8998      	ldrh	r0, [r3, #12]
 80033f0:	f7fe fb2b 	bl	8001a4a <lwip_ntohs>
 80033f4:	f010 0003 	ands.w	r0, r0, #3
 80033f8:	bf18      	it	ne
 80033fa:	2001      	movne	r0, #1
 80033fc:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 80033fe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8003400:	b280      	uxth	r0, r0

        if (tcplen > pcb->rcv_wnd) {
 8003402:	4283      	cmp	r3, r0
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8003404:	8038      	strh	r0, [r7, #0]

        if (tcplen > pcb->rcv_wnd) {
 8003406:	d237      	bcs.n	8003478 <tcp_receive+0x400>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8003408:	68eb      	ldr	r3, [r5, #12]
 800340a:	8998      	ldrh	r0, [r3, #12]
 800340c:	f7fe fb1d 	bl	8001a4a <lwip_ntohs>
 8003410:	07c3      	lsls	r3, r0, #31
 8003412:	d510      	bpl.n	8003436 <tcp_receive+0x3be>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
 8003414:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8003418:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800341c:	4640      	mov	r0, r8
 800341e:	f7fe fb14 	bl	8001a4a <lwip_ntohs>
 8003422:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8003426:	f7fe fb0d 	bl	8001a44 <lwip_htons>
 800342a:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800342e:	ea48 0000 	orr.w	r0, r8, r0
 8003432:	f8a9 000c 	strh.w	r0, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
 8003436:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8003438:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800343a:	68eb      	ldr	r3, [r5, #12]
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
 800343c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003504 <tcp_receive+0x48c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8003440:	8998      	ldrh	r0, [r3, #12]
 8003442:	f7fe fb02 	bl	8001a4a <lwip_ntohs>
 8003446:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8003448:	bf48      	it	mi
 800344a:	f8b8 3008 	ldrhmi.w	r3, [r8, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800344e:	6868      	ldr	r0, [r5, #4]
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
            inseg.len -= 1;
 8003450:	bf44      	itt	mi
 8003452:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8003456:	f8a8 3008 	strhmi.w	r3, [r8, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800345a:	8929      	ldrh	r1, [r5, #8]
 800345c:	f7ff f831 	bl	80024c2 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8003460:	68eb      	ldr	r3, [r5, #12]
 8003462:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8003466:	8998      	ldrh	r0, [r3, #12]
 8003468:	f7fe faef 	bl	8001a4a <lwip_ntohs>
 800346c:	f010 0003 	ands.w	r0, r0, #3
 8003470:	bf18      	it	ne
 8003472:	2001      	movne	r0, #1
 8003474:	4440      	add	r0, r8
 8003476:	8038      	strh	r0, [r7, #0]
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8003478:	8839      	ldrh	r1, [r7, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800347a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800347c:	6832      	ldr	r2, [r6, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800347e:	1a5b      	subs	r3, r3, r1
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8003480:	440a      	add	r2, r1
 8003482:	62a2      	str	r2, [r4, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 8003484:	85a3      	strh	r3, [r4, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
 8003486:	4620      	mov	r0, r4
 8003488:	f7ff f9da 	bl	8002840 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800348c:	686b      	ldr	r3, [r5, #4]
 800348e:	891a      	ldrh	r2, [r3, #8]
 8003490:	b122      	cbz	r2, 800349c <tcp_receive+0x424>
          recv_data = inseg.p;
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <tcp_receive+0x490>)
 8003494:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <tcp_receive+0x48c>)
 8003498:	2200      	movs	r2, #0
 800349a:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800349c:	68eb      	ldr	r3, [r5, #12]
 800349e:	8998      	ldrh	r0, [r3, #12]
 80034a0:	f7fe fad3 	bl	8001a4a <lwip_ntohs>
 80034a4:	07c1      	lsls	r1, r0, #31
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80034a6:	bf41      	itttt	mi
 80034a8:	4a18      	ldrmi	r2, [pc, #96]	; (800350c <tcp_receive+0x494>)
 80034aa:	7813      	ldrbmi	r3, [r2, #0]
 80034ac:	f043 0320 	orrmi.w	r3, r3, #32
 80034b0:	7013      	strbmi	r3, [r2, #0]
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80034b2:	7fa3      	ldrb	r3, [r4, #30]
 80034b4:	07da      	lsls	r2, r3, #31
 80034b6:	d502      	bpl.n	80034be <tcp_receive+0x446>
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	e012      	b.n	80034e4 <tcp_receive+0x46c>
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	e011      	b.n	80034e8 <tcp_receive+0x470>

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80034c4:	4620      	mov	r0, r4
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
      tcp_ack_now(pcb);
    }
  }
}
 80034c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        /* Acknowledge the segment(s). */
        tcp_ack(pcb);

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80034ca:	f000 bf28 	b.w	800431e <tcp_send_empty_ack>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
 80034ce:	6833      	ldr	r3, [r6, #0]
 80034d0:	1a99      	subs	r1, r3, r2
 80034d2:	2900      	cmp	r1, #0
 80034d4:	db05      	blt.n	80034e2 <tcp_receive+0x46a>
 80034d6:	3301      	adds	r3, #1
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	dd09      	ble.n	80034f6 <tcp_receive+0x47e>
      tcp_ack_now(pcb);
 80034e2:	7fa3      	ldrb	r3, [r4, #30]
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	77a3      	strb	r3, [r4, #30]
    }
  }
}
 80034ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 80034f4:	e6b3      	b.n	800325e <tcp_receive+0x1e6>
 80034f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fa:	bf00      	nop
 80034fc:	20005428 	.word	0x20005428
 8003500:	20002ab0 	.word	0x20002ab0
 8003504:	20002ac4 	.word	0x20002ac4
 8003508:	20002ac0 	.word	0x20002ac0
 800350c:	20002ab9 	.word	0x20002ab9

08003510 <tcp_parseopt.isra.0>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
 8003512:	4e1f      	ldr	r6, [pc, #124]	; (8003590 <tcp_parseopt.isra.0+0x80>)
 8003514:	6835      	ldr	r5, [r6, #0]
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8003516:	4604      	mov	r4, r0
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
 8003518:	89a8      	ldrh	r0, [r5, #12]
 800351a:	f7fe fa96 	bl	8001a4a <lwip_ntohs>
 800351e:	f3c0 300f 	ubfx	r0, r0, #12, #16
 8003522:	2805      	cmp	r0, #5
 8003524:	d932      	bls.n	800358c <tcp_parseopt.isra.0+0x7c>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 8003526:	6833      	ldr	r3, [r6, #0]
 8003528:	8998      	ldrh	r0, [r3, #12]
 800352a:	f7fe fa8e 	bl	8001a4a <lwip_ntohs>
 800352e:	0b00      	lsrs	r0, r0, #12
 8003530:	3805      	subs	r0, #5
 8003532:	0080      	lsls	r0, r0, #2
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
 8003534:	3514      	adds	r5, #20

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 8003536:	b280      	uxth	r0, r0
    for (c = 0; c < max_c; ) {
 8003538:	2300      	movs	r3, #0
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800353a:	f240 56b3 	movw	r6, #1459	; 0x5b3
 800353e:	f240 57b4 	movw	r7, #1460	; 0x5b4
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
 8003542:	4298      	cmp	r0, r3
 8003544:	d922      	bls.n	800358c <tcp_parseopt.isra.0+0x7c>
      opt = opts[c];
      switch (opt) {
 8003546:	5cea      	ldrb	r2, [r5, r3]
 8003548:	2a01      	cmp	r2, #1
 800354a:	d005      	beq.n	8003558 <tcp_parseopt.isra.0+0x48>
 800354c:	d31e      	bcc.n	800358c <tcp_parseopt.isra.0+0x7c>
 800354e:	2a02      	cmp	r2, #2
 8003550:	eb05 0103 	add.w	r1, r5, r3
 8003554:	d002      	beq.n	800355c <tcp_parseopt.isra.0+0x4c>
 8003556:	e014      	b.n	8003582 <tcp_parseopt.isra.0+0x72>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
 8003558:	3301      	adds	r3, #1
 800355a:	e015      	b.n	8003588 <tcp_parseopt.isra.0+0x78>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
 800355c:	784a      	ldrb	r2, [r1, #1]
 800355e:	2a04      	cmp	r2, #4
 8003560:	d114      	bne.n	800358c <tcp_parseopt.isra.0+0x7c>
 8003562:	1cda      	adds	r2, r3, #3
 8003564:	4282      	cmp	r2, r0
 8003566:	da11      	bge.n	800358c <tcp_parseopt.isra.0+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
 8003568:	f891 e002 	ldrb.w	lr, [r1, #2]
 800356c:	78ca      	ldrb	r2, [r1, #3]
 800356e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8003572:	1e51      	subs	r1, r2, #1
 8003574:	b289      	uxth	r1, r1
 8003576:	42b1      	cmp	r1, r6
 8003578:	bf88      	it	hi
 800357a:	463a      	movhi	r2, r7
 800357c:	8022      	strh	r2, [r4, #0]
        /* Advance to next option */
        c += 0x04;
 800357e:	3304      	adds	r3, #4
 8003580:	e002      	b.n	8003588 <tcp_parseopt.isra.0+0x78>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
 8003582:	784a      	ldrb	r2, [r1, #1]
 8003584:	b112      	cbz	r2, 800358c <tcp_parseopt.isra.0+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
 8003586:	4413      	add	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	e7da      	b.n	8003542 <tcp_parseopt.isra.0+0x32>
 800358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800358e:	bf00      	nop
 8003590:	20002abc 	.word	0x20002abc

08003594 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8003594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
 8003598:	6843      	ldr	r3, [r0, #4]
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 800359a:	4dad      	ldr	r5, [pc, #692]	; (8003850 <tcp_input+0x2bc>)
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800359c:	460e      	mov	r6, r1
 800359e:	7819      	ldrb	r1, [r3, #0]
 80035a0:	f001 010f 	and.w	r1, r1, #15

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 80035a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 80035a8:	0089      	lsls	r1, r1, #2
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80035aa:	b08b      	sub	sp, #44	; 0x2c
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 80035ac:	4249      	negs	r1, r1
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80035ae:	4607      	mov	r7, r0

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 80035b0:	602b      	str	r3, [r5, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 80035b2:	f7fe feaf 	bl	8002314 <pbuf_header>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	f040 80a6 	bne.w	8003708 <tcp_input+0x174>
 80035bc:	893b      	ldrh	r3, [r7, #8]
 80035be:	2b13      	cmp	r3, #19
 80035c0:	f240 80a2 	bls.w	8003708 <tcp_input+0x174>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 80035c4:	4ca3      	ldr	r4, [pc, #652]	; (8003854 <tcp_input+0x2c0>)
 80035c6:	4631      	mov	r1, r6
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	f7fd ff73 	bl	80014b4 <ip4_addr_isbroadcast>
 80035ce:	46a2      	mov	sl, r4
 80035d0:	2800      	cmp	r0, #0
 80035d2:	f040 8099 	bne.w	8003708 <tcp_input+0x174>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035dc:	2be0      	cmp	r3, #224	; 0xe0
 80035de:	f000 8093 	beq.w	8003708 <tcp_input+0x174>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 80035e2:	682b      	ldr	r3, [r5, #0]
 80035e4:	8998      	ldrh	r0, [r3, #12]
 80035e6:	f7fe fa30 	bl	8001a4a <lwip_ntohs>
  if(pbuf_header(p, -(hdrlen * 4))){
 80035ea:	0b00      	lsrs	r0, r0, #12
 80035ec:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
 80035f0:	0081      	lsls	r1, r0, #2
 80035f2:	b209      	sxth	r1, r1
 80035f4:	4638      	mov	r0, r7
 80035f6:	f7fe fe8d 	bl	8002314 <pbuf_header>
 80035fa:	4606      	mov	r6, r0
 80035fc:	2800      	cmp	r0, #0
 80035fe:	f040 8083 	bne.w	8003708 <tcp_input+0x174>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 8003602:	682c      	ldr	r4, [r5, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 8003604:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8003880 <tcp_input+0x2ec>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 8003608:	8820      	ldrh	r0, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800360a:	f8df 8270 	ldr.w	r8, [pc, #624]	; 800387c <tcp_input+0x2e8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 800360e:	f7fe fa1c 	bl	8001a4a <lwip_ntohs>
 8003612:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
 8003614:	682c      	ldr	r4, [r5, #0]
 8003616:	8860      	ldrh	r0, [r4, #2]
 8003618:	f7fe fa17 	bl	8001a4a <lwip_ntohs>
 800361c:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 800361e:	682c      	ldr	r4, [r5, #0]
 8003620:	6860      	ldr	r0, [r4, #4]
 8003622:	f7fe fa17 	bl	8001a54 <lwip_ntohl>
 8003626:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 8003628:	682c      	ldr	r4, [r5, #0]
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 800362a:	f8c9 0000 	str.w	r0, [r9]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800362e:	68a0      	ldr	r0, [r4, #8]
 8003630:	f7fe fa10 	bl	8001a54 <lwip_ntohl>
 8003634:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 8003636:	682c      	ldr	r4, [r5, #0]

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 8003638:	f8c8 0000 	str.w	r0, [r8]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 800363c:	89e0      	ldrh	r0, [r4, #14]
 800363e:	f7fe fa04 	bl	8001a4a <lwip_ntohs>

  flags = TCPH_FLAGS(tcphdr);
 8003642:	682b      	ldr	r3, [r5, #0]
  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);
 8003644:	81e0      	strh	r0, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8003646:	8998      	ldrh	r0, [r3, #12]
 8003648:	f7fe f9ff 	bl	8001a4a <lwip_ntohs>
 800364c:	4a82      	ldr	r2, [pc, #520]	; (8003858 <tcp_input+0x2c4>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800364e:	f8b7 e008 	ldrh.w	lr, [r7, #8]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003652:	f8df c210 	ldr.w	ip, [pc, #528]	; 8003864 <tcp_input+0x2d0>
 8003656:	f8cd 900c 	str.w	r9, [sp, #12]
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
 800365a:	b2c3      	uxtb	r3, r0
 800365c:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 8003660:	7011      	strb	r1, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8003662:	f013 0103 	ands.w	r1, r3, #3
 8003666:	bf18      	it	ne
 8003668:	2101      	movne	r1, #1
 800366a:	4471      	add	r1, lr
 800366c:	fa1f fb81 	uxth.w	fp, r1
 8003670:	4a7a      	ldr	r2, [pc, #488]	; (800385c <tcp_input+0x2c8>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8003672:	497b      	ldr	r1, [pc, #492]	; (8003860 <tcp_input+0x2cc>)
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8003674:	f8a2 b000 	strh.w	fp, [r2]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8003678:	6808      	ldr	r0, [r1, #0]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800367a:	f8dc 2000 	ldr.w	r2, [ip]
 800367e:	9207      	str	r2, [sp, #28]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8003680:	9008      	str	r0, [sp, #32]
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 8003682:	f8da 0000 	ldr.w	r0, [sl]
 8003686:	9005      	str	r0, [sp, #20]
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 8003688:	682a      	ldr	r2, [r5, #0]
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800368a:	9c07      	ldr	r4, [sp, #28]
 800368c:	f8cd 8010 	str.w	r8, [sp, #16]
  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8003690:	4630      	mov	r0, r6
 8003692:	4e72      	ldr	r6, [pc, #456]	; (800385c <tcp_input+0x2c8>)
 8003694:	9606      	str	r6, [sp, #24]
 8003696:	46e1      	mov	r9, ip
 8003698:	9109      	str	r1, [sp, #36]	; 0x24

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800369a:	2c00      	cmp	r4, #0
 800369c:	d03a      	beq.n	8003714 <tcp_input+0x180>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 800369e:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
 80036a2:	8811      	ldrh	r1, [r2, #0]
 80036a4:	458c      	cmp	ip, r1
 80036a6:	d116      	bne.n	80036d6 <tcp_input+0x142>
 80036a8:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 80036ac:	8851      	ldrh	r1, [r2, #2]
 80036ae:	458c      	cmp	ip, r1
 80036b0:	d111      	bne.n	80036d6 <tcp_input+0x142>
       pcb->local_port == tcphdr->dest &&
 80036b2:	6861      	ldr	r1, [r4, #4]
 80036b4:	9e08      	ldr	r6, [sp, #32]
 80036b6:	42b1      	cmp	r1, r6
 80036b8:	d10d      	bne.n	80036d6 <tcp_input+0x142>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 80036ba:	6821      	ldr	r1, [r4, #0]
 80036bc:	9e05      	ldr	r6, [sp, #20]
 80036be:	42b1      	cmp	r1, r6
 80036c0:	d109      	bne.n	80036d6 <tcp_input+0x142>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 80036c2:	2800      	cmp	r0, #0
 80036c4:	f000 8093 	beq.w	80037ee <tcp_input+0x25a>
        prev->next = pcb->next;
 80036c8:	68e1      	ldr	r1, [r4, #12]
 80036ca:	60c1      	str	r1, [r0, #12]
        pcb->next = tcp_active_pcbs;
 80036cc:	9907      	ldr	r1, [sp, #28]
 80036ce:	60e1      	str	r1, [r4, #12]
        tcp_active_pcbs = pcb;
 80036d0:	4964      	ldr	r1, [pc, #400]	; (8003864 <tcp_input+0x2d0>)
 80036d2:	600c      	str	r4, [r1, #0]
 80036d4:	e08b      	b.n	80037ee <tcp_input+0x25a>
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80036d6:	4620      	mov	r0, r4
 80036d8:	68e4      	ldr	r4, [r4, #12]
 80036da:	e7de      	b.n	800369a <tcp_input+0x106>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80036dc:	68c0      	ldr	r0, [r0, #12]
 80036de:	2800      	cmp	r0, #0
 80036e0:	d03b      	beq.n	800375a <tcp_input+0x1c6>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 80036e2:	8b81      	ldrh	r1, [r0, #28]
 80036e4:	f8b2 e000 	ldrh.w	lr, [r2]
 80036e8:	458e      	cmp	lr, r1
 80036ea:	d1f7      	bne.n	80036dc <tcp_input+0x148>
         pcb->local_port == tcphdr->dest &&
 80036ec:	8b41      	ldrh	r1, [r0, #26]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 80036ee:	8854      	ldrh	r4, [r2, #2]
 80036f0:	428c      	cmp	r4, r1
 80036f2:	d1f3      	bne.n	80036dc <tcp_input+0x148>
         pcb->local_port == tcphdr->dest &&
 80036f4:	6841      	ldr	r1, [r0, #4]
 80036f6:	9e08      	ldr	r6, [sp, #32]
 80036f8:	428e      	cmp	r6, r1
 80036fa:	d1ef      	bne.n	80036dc <tcp_input+0x148>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 80036fc:	6801      	ldr	r1, [r0, #0]
 80036fe:	9e05      	ldr	r6, [sp, #20]
 8003700:	428e      	cmp	r6, r1
 8003702:	d1eb      	bne.n	80036dc <tcp_input+0x148>
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
 8003704:	075e      	lsls	r6, r3, #29
 8003706:	d508      	bpl.n	800371a <tcp_input+0x186>
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
 8003708:	4638      	mov	r0, r7
}
 800370a:	b00b      	add	sp, #44	; 0x2c
 800370c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
 8003710:	f7fe be2c 	b.w	800236c <pbuf_free>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8003714:	4954      	ldr	r1, [pc, #336]	; (8003868 <tcp_input+0x2d4>)
 8003716:	6808      	ldr	r0, [r1, #0]
 8003718:	e7e1      	b.n	80036de <tcp_input+0x14a>
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
    return ERR_OK;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800371a:	079d      	lsls	r5, r3, #30
 800371c:	d50e      	bpl.n	800373c <tcp_input+0x1a8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 800371e:	9b03      	ldr	r3, [sp, #12]
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003724:	1acb      	subs	r3, r1, r3
 8003726:	d40e      	bmi.n	8003746 <tcp_input+0x1b2>
 8003728:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	dc0a      	bgt.n	8003746 <tcp_input+0x1b2>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8003730:	e88d 4010 	stmia.w	sp, {r4, lr}
 8003734:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <tcp_input+0x2cc>)
 8003736:	4a47      	ldr	r2, [pc, #284]	; (8003854 <tcp_input+0x2c0>)
 8003738:	4459      	add	r1, fp
 800373a:	e041      	b.n	80037c0 <tcp_input+0x22c>
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
    }
  } else if (flags & TCP_FIN) {
 800373c:	07dc      	lsls	r4, r3, #31
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800373e:	bf42      	ittt	mi
 8003740:	4b4a      	ldrmi	r3, [pc, #296]	; (800386c <tcp_input+0x2d8>)
 8003742:	681b      	ldrmi	r3, [r3, #0]
 8003744:	6243      	strmi	r3, [r0, #36]	; 0x24
  }

  if ((tcplen > 0))  {
 8003746:	f1bb 0f00 	cmp.w	fp, #0
 800374a:	d0dd      	beq.n	8003708 <tcp_input+0x174>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800374c:	7f83      	ldrb	r3, [r0, #30]
 800374e:	f043 0302 	orr.w	r3, r3, #2
 8003752:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
 8003754:	f000 fe06 	bl	8004364 <tcp_output>
 8003758:	e7d6      	b.n	8003708 <tcp_input+0x174>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800375a:	4945      	ldr	r1, [pc, #276]	; (8003870 <tcp_input+0x2dc>)
 800375c:	680c      	ldr	r4, [r1, #0]
 800375e:	46a0      	mov	r8, r4
 8003760:	f1b8 0f00 	cmp.w	r8, #0
 8003764:	d031      	beq.n	80037ca <tcp_input+0x236>
      if (lpcb->local_port == tcphdr->dest) {
 8003766:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 800376a:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 800376e:	458e      	cmp	lr, r1
 8003770:	d107      	bne.n	8003782 <tcp_input+0x1ee>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
 8003772:	f8d8 e000 	ldr.w	lr, [r8]
 8003776:	9e05      	ldr	r6, [sp, #20]
 8003778:	4576      	cmp	r6, lr
 800377a:	d006      	beq.n	800378a <tcp_input+0x1f6>
            ip_addr_isany(&(lpcb->local_ip))) {
 800377c:	f1be 0f00 	cmp.w	lr, #0
 8003780:	d003      	beq.n	800378a <tcp_input+0x1f6>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8003782:	4640      	mov	r0, r8
 8003784:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8003788:	e7ea      	b.n	8003760 <tcp_input+0x1cc>
#endif /* SO_REUSE */
    if (lpcb != NULL) {
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800378a:	b138      	cbz	r0, 800379c <tcp_input+0x208>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800378c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003790:	60c6      	str	r6, [r0, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8003792:	4837      	ldr	r0, [pc, #220]	; (8003870 <tcp_input+0x2dc>)
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8003794:	f8c8 400c 	str.w	r4, [r8, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8003798:	f8c0 8000 	str.w	r8, [r0]
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 800379c:	0758      	lsls	r0, r3, #29
 800379e:	d4b3      	bmi.n	8003708 <tcp_input+0x174>
    return ERR_OK;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80037a0:	f003 0010 	and.w	r0, r3, #16
 80037a4:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 80037a8:	2800      	cmp	r0, #0
 80037aa:	f000 828d 	beq.w	8003cc8 <tcp_input+0x734>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80037ae:	9b03      	ldr	r3, [sp, #12]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	8813      	ldrh	r3, [r2, #0]
 80037b4:	4a27      	ldr	r2, [pc, #156]	; (8003854 <tcp_input+0x2c0>)
 80037b6:	e88d 000a 	stmia.w	sp, {r1, r3}
 80037ba:	4b29      	ldr	r3, [pc, #164]	; (8003860 <tcp_input+0x2cc>)
 80037bc:	eb0b 0100 	add.w	r1, fp, r0
 80037c0:	9804      	ldr	r0, [sp, #16]
 80037c2:	6800      	ldr	r0, [r0, #0]
 80037c4:	f000 ff08 	bl	80045d8 <tcp_rst>
 80037c8:	e79e      	b.n	8003708 <tcp_input+0x174>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80037ca:	8990      	ldrh	r0, [r2, #12]
 80037cc:	f7fe f93d 	bl	8001a4a <lwip_ntohs>
 80037d0:	0743      	lsls	r3, r0, #29
 80037d2:	d499      	bmi.n	8003708 <tcp_input+0x174>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
 80037d4:	9a06      	ldr	r2, [sp, #24]
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
 80037d6:	682b      	ldr	r3, [r5, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
 80037d8:	8810      	ldrh	r0, [r2, #0]
 80037da:	9a03      	ldr	r2, [sp, #12]
 80037dc:	6811      	ldr	r1, [r2, #0]
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	9201      	str	r2, [sp, #4]
 80037e2:	885b      	ldrh	r3, [r3, #2]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <tcp_input+0x2c0>)
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <tcp_input+0x2cc>)
 80037ea:	4401      	add	r1, r0
 80037ec:	e7e8      	b.n	80037c0 <tcp_input+0x22c>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80037ee:	4921      	ldr	r1, [pc, #132]	; (8003874 <tcp_input+0x2e0>)
    inseg.len = p->tot_len;
    inseg.p = p;
    inseg.tcphdr = tcphdr;

    recv_data = NULL;
    recv_flags = 0;
 80037f0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003884 <tcp_input+0x2f0>

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
    inseg.len = p->tot_len;
    inseg.p = p;
    inseg.tcphdr = tcphdr;
 80037f4:	60ca      	str	r2, [r1, #12]

    recv_data = NULL;
 80037f6:	4a20      	ldr	r2, [pc, #128]	; (8003878 <tcp_input+0x2e4>)
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
    inseg.len = p->tot_len;
 80037f8:	f8a1 e008 	strh.w	lr, [r1, #8]
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80037fc:	2000      	movs	r0, #0
    inseg.tcphdr = tcphdr;

    recv_data = NULL;
    recv_flags = 0;

    if (flags & TCP_PSH) {
 80037fe:	f013 0f08 	tst.w	r3, #8
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8003802:	6008      	str	r0, [r1, #0]
    inseg.len = p->tot_len;
    inseg.p = p;
 8003804:	604f      	str	r7, [r1, #4]
    inseg.tcphdr = tcphdr;

    recv_data = NULL;
 8003806:	6010      	str	r0, [r2, #0]
    recv_flags = 0;
 8003808:	f888 0000 	strb.w	r0, [r8]
 800380c:	4692      	mov	sl, r2
 800380e:	4689      	mov	r9, r1

    if (flags & TCP_PSH) {
 8003810:	d003      	beq.n	800381a <tcp_input+0x286>
      p->flags |= PBUF_FLAG_PUSH;
 8003812:	7b7b      	ldrb	r3, [r7, #13]
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	737b      	strb	r3, [r7, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800381a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800381c:	f8df b068 	ldr.w	fp, [pc, #104]	; 8003888 <tcp_input+0x2f4>
 8003820:	b933      	cbnz	r3, 8003830 <tcp_input+0x29c>
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8003822:	4f0d      	ldr	r7, [pc, #52]	; (8003858 <tcp_input+0x2c4>)
        TCP_STATS_INC(tcp.drop);
        snmp_inc_tcpinerrs();
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
 8003824:	f8cb 4000 	str.w	r4, [fp]
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8003828:	783b      	ldrb	r3, [r7, #0]
 800382a:	075a      	lsls	r2, r3, #29
 800382c:	d42e      	bmi.n	800388c <tcp_input+0x2f8>
 800382e:	e043      	b.n	80038b8 <tcp_input+0x324>
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff fabb 	bl	8002dac <tcp_process_refused_data>
 8003836:	300a      	adds	r0, #10
 8003838:	f000 8238 	beq.w	8003cac <tcp_input+0x718>
 800383c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ef      	beq.n	8003822 <tcp_input+0x28e>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <tcp_input+0x2c8>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 8230 	bne.w	8003cac <tcp_input+0x718>
 800384c:	e7e9      	b.n	8003822 <tcp_input+0x28e>
 800384e:	bf00      	nop
 8003850:	20002abc 	.word	0x20002abc
 8003854:	20002bfc 	.word	0x20002bfc
 8003858:	20002ab8 	.word	0x20002ab8
 800385c:	20002ab0 	.word	0x20002ab0
 8003860:	20002bf4 	.word	0x20002bf4
 8003864:	20005424 	.word	0x20005424
 8003868:	20005438 	.word	0x20005438
 800386c:	20005428 	.word	0x20005428
 8003870:	2000542c 	.word	0x2000542c
 8003874:	20002ac4 	.word	0x20002ac4
 8003878:	20002ac0 	.word	0x20002ac0
 800387c:	20002ab4 	.word	0x20002ab4
 8003880:	20002aac 	.word	0x20002aac
 8003884:	20002ab9 	.word	0x20002ab9
 8003888:	2000543c 	.word	0x2000543c
  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800388c:	7e23      	ldrb	r3, [r4, #24]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d106      	bne.n	80038a0 <tcp_input+0x30c>
      if (ackno == pcb->snd_nxt) {
 8003892:	4ba6      	ldr	r3, [pc, #664]	; (8003b2c <tcp_input+0x598>)
 8003894:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	f040 8198 	bne.w	8003bce <tcp_input+0x63a>
 800389e:	e26a      	b.n	8003d76 <tcp_input+0x7e2>
        acceptable = 1;
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 80038a0:	9b03      	ldr	r3, [sp, #12]
 80038a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	f100 8191 	bmi.w	8003bce <tcp_input+0x63a>
 80038ac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f300 818c 	bgt.w	8003bce <tcp_input+0x63a>
 80038b6:	e25e      	b.n	8003d76 <tcp_input+0x7e2>
       seqno, pcb->rcv_nxt));
      return ERR_OK;
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 80038b8:	f013 0f02 	tst.w	r3, #2
 80038bc:	7fa3      	ldrb	r3, [r4, #30]
 80038be:	d003      	beq.n	80038c8 <tcp_input+0x334>
 80038c0:	7e22      	ldrb	r2, [r4, #24]
 80038c2:	3a02      	subs	r2, #2
 80038c4:	2a01      	cmp	r2, #1
 80038c6:	d868      	bhi.n	800399a <tcp_input+0x406>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
    return ERR_OK;
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80038c8:	06db      	lsls	r3, r3, #27
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80038ca:	bf5e      	ittt	pl
 80038cc:	4b98      	ldrpl	r3, [pc, #608]	; (8003b30 <tcp_input+0x59c>)
 80038ce:	681b      	ldrpl	r3, [r3, #0]
 80038d0:	6263      	strpl	r3, [r4, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92

  tcp_parseopt(pcb);
 80038d8:	f104 0036 	add.w	r0, r4, #54	; 0x36
 80038dc:	f7ff fe18 	bl	8003510 <tcp_parseopt.isra.0>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80038e0:	7e23      	ldrb	r3, [r4, #24]
 80038e2:	3b02      	subs	r3, #2
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	f200 8172 	bhi.w	8003bce <tcp_input+0x63a>
 80038ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80038ee:	0008      	.short	0x0008
 80038f0:	00c00074 	.word	0x00c00074
 80038f4:	010200ce 	.word	0x010200ce
 80038f8:	012d00c0 	.word	0x012d00c0
 80038fc:	015f      	.short	0x015f
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80038fe:	783b      	ldrb	r3, [r7, #0]
 8003900:	f003 0312 	and.w	r3, r3, #18
 8003904:	2b12      	cmp	r3, #18
 8003906:	d153      	bne.n	80039b0 <tcp_input+0x41c>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 8003908:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	6858      	ldr	r0, [r3, #4]
 800390e:	f7fe f8a1 	bl	8001a54 <lwip_ntohl>
 8003912:	4b86      	ldr	r3, [pc, #536]	; (8003b2c <tcp_input+0x598>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3001      	adds	r0, #1
 8003918:	4298      	cmp	r0, r3
 800391a:	d149      	bne.n	80039b0 <tcp_input+0x41c>
      pcb->snd_buf++;
 800391c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
 8003920:	64a0      	str	r0, [r4, #72]	; 0x48
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
 8003922:	3301      	adds	r3, #1
 8003924:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
 8003928:	9b03      	ldr	r3, [sp, #12]
      pcb->snd_wnd_max = tcphdr->wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 800392a:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	62a2      	str	r2, [r4, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8003932:	6322      	str	r2, [r4, #48]	; 0x30
      pcb->lastack = ackno;
      pcb->snd_wnd = tcphdr->wnd;
 8003934:	682a      	ldr	r2, [r5, #0]
      pcb->snd_wnd_max = tcphdr->wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8003936:	3b01      	subs	r3, #1
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
      pcb->snd_wnd = tcphdr->wnd;
 8003938:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wnd_max = tcphdr->wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800393a:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->state = ESTABLISHED;
 800393c:	2304      	movs	r3, #4

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 800393e:	18e1      	adds	r1, r4, r3
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
      pcb->snd_wnd = tcphdr->wnd;
 8003940:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
 8003944:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;
 8003948:	7623      	strb	r3, [r4, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 800394a:	f7ff fb86 	bl	800305a <tcp_eff_send_mss>
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
 800394e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 8003958:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      pcb->snd_wnd_max = tcphdr->wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 800395c:	86e0      	strh	r0, [r4, #54]	; 0x36

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 800395e:	2b01      	cmp	r3, #1
 8003960:	bf04      	itt	eq
 8003962:	0040      	lsleq	r0, r0, #1
 8003964:	b280      	uxtheq	r0, r0
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 8003966:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 800396a:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800396e:	6f20      	ldr	r0, [r4, #112]	; 0x70
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 8003970:	3b01      	subs	r3, #1
 8003972:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
      pcb->unacked = rseg->next;
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	6723      	str	r3, [r4, #112]	; 0x70
      tcp_seg_free(rseg);
 800397a:	f7fe ff97 	bl	80028ac <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 800397e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003980:	b91b      	cbnz	r3, 800398a <tcp_input+0x3f6>
        pcb->rtime = -1;
 8003982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003986:	86a3      	strh	r3, [r4, #52]	; 0x34
 8003988:	e003      	b.n	8003992 <tcp_input+0x3fe>
      else {
        pcb->rtime = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	86a3      	strh	r3, [r4, #52]	; 0x34
        pcb->nrtx = 0;
 800398e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8003992:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003996:	b923      	cbnz	r3, 80039a2 <tcp_input+0x40e>
      if (err == ERR_ABRT) {
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
 8003998:	7fa3      	ldrb	r3, [r4, #30]
 800399a:	f043 0302 	orr.w	r3, r3, #2
 800399e:	77a3      	strb	r3, [r4, #30]
 80039a0:	e115      	b.n	8003bce <tcp_input+0x63a>
        pcb->nrtx = 0;
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80039a2:	2200      	movs	r2, #0
 80039a4:	4621      	mov	r1, r4
 80039a6:	6920      	ldr	r0, [r4, #16]
 80039a8:	4798      	blx	r3
      if (err == ERR_ABRT) {
 80039aa:	300a      	adds	r0, #10
 80039ac:	d1f4      	bne.n	8003998 <tcp_input+0x404>
 80039ae:	e17d      	b.n	8003cac <tcp_input+0x718>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
 80039b0:	783b      	ldrb	r3, [r7, #0]
 80039b2:	06df      	lsls	r7, r3, #27
 80039b4:	f140 810b 	bpl.w	8003bce <tcp_input+0x63a>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80039b8:	9a06      	ldr	r2, [sp, #24]
        tcphdr->dest, tcphdr->src);
 80039ba:	682b      	ldr	r3, [r5, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80039bc:	8810      	ldrh	r0, [r2, #0]
 80039be:	9a03      	ldr	r2, [sp, #12]
 80039c0:	6811      	ldr	r1, [r2, #0]
 80039c2:	881a      	ldrh	r2, [r3, #0]
 80039c4:	9201      	str	r2, [sp, #4]
 80039c6:	885b      	ldrh	r3, [r3, #2]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	4401      	add	r1, r0
 80039cc:	9804      	ldr	r0, [sp, #16]
 80039ce:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <tcp_input+0x5a0>)
 80039d0:	4a59      	ldr	r2, [pc, #356]	; (8003b38 <tcp_input+0x5a4>)
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	e03a      	b.n	8003a4c <tcp_input+0x4b8>
        tcphdr->dest, tcphdr->src);
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80039d6:	783b      	ldrb	r3, [r7, #0]
 80039d8:	06de      	lsls	r6, r3, #27
 80039da:	d53a      	bpl.n	8003a52 <tcp_input+0x4be>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <tcp_input+0x598>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80039e2:	43db      	mvns	r3, r3
 80039e4:	42c3      	cmn	r3, r0
 80039e6:	d425      	bmi.n	8003a34 <tcp_input+0x4a0>
 80039e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80039ea:	1ac3      	subs	r3, r0, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dc21      	bgt.n	8003a34 <tcp_input+0x4a0>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
 80039f0:	2304      	movs	r3, #4
 80039f2:	7623      	strb	r3, [r4, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 80039f4:	6963      	ldr	r3, [r4, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8121 	beq.w	8003c3e <tcp_input+0x6aa>
 80039fc:	2200      	movs	r2, #0
 80039fe:	4621      	mov	r1, r4
 8003a00:	6920      	ldr	r0, [r4, #16]
 8003a02:	4798      	blx	r3
        if (err != ERR_OK) {
 8003a04:	b118      	cbz	r0, 8003a0e <tcp_input+0x47a>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8003a06:	300a      	adds	r0, #10
 8003a08:	f040 8119 	bne.w	8003c3e <tcp_input+0x6aa>
 8003a0c:	e14e      	b.n	8003cac <tcp_input+0x718>
          return ERR_ABRT;
        }
        old_cwnd = pcb->cwnd;
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8003a0e:	4620      	mov	r0, r4
          if (err != ERR_ABRT) {
            tcp_abort(pcb);
          }
          return ERR_ABRT;
        }
        old_cwnd = pcb->cwnd;
 8003a10:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8003a14:	f7ff fb30 	bl	8003078 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
 8003a18:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8003a1c:	b113      	cbz	r3, 8003a24 <tcp_input+0x490>
          pcb->acked--;
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 8003a24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a26:	2d01      	cmp	r5, #1
 8003a28:	bf04      	itt	eq
 8003a2a:	005b      	lsleq	r3, r3, #1
 8003a2c:	b29b      	uxtheq	r3, r3
 8003a2e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8003a32:	e01f      	b.n	8003a74 <tcp_input+0x4e0>
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8003a34:	9a06      	ldr	r2, [sp, #24]
                tcphdr->dest, tcphdr->src);
 8003a36:	682b      	ldr	r3, [r5, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8003a38:	8815      	ldrh	r5, [r2, #0]
 8003a3a:	9a03      	ldr	r2, [sp, #12]
 8003a3c:	6811      	ldr	r1, [r2, #0]
 8003a3e:	881a      	ldrh	r2, [r3, #0]
 8003a40:	9201      	str	r2, [sp, #4]
 8003a42:	885b      	ldrh	r3, [r3, #2]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	4a3c      	ldr	r2, [pc, #240]	; (8003b38 <tcp_input+0x5a4>)
 8003a48:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <tcp_input+0x5a0>)
 8003a4a:	4429      	add	r1, r5
 8003a4c:	f000 fdc4 	bl	80045d8 <tcp_rst>
 8003a50:	e0bd      	b.n	8003bce <tcp_input+0x63a>
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8003a52:	0798      	lsls	r0, r3, #30
 8003a54:	f140 80bb 	bpl.w	8003bce <tcp_input+0x63a>
 8003a58:	4a38      	ldr	r2, [pc, #224]	; (8003b3c <tcp_input+0x5a8>)
 8003a5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	4293      	cmp	r3, r2
 8003a62:	f040 80b4 	bne.w	8003bce <tcp_input+0x63a>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
 8003a66:	4620      	mov	r0, r4
 8003a68:	f000 fe11 	bl	800468e <tcp_rexmit>
 8003a6c:	e0af      	b.n	8003bce <tcp_input+0x63a>
    }
    break;
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7ff fb02 	bl	8003078 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8003a74:	f898 3000 	ldrb.w	r3, [r8]
 8003a78:	0699      	lsls	r1, r3, #26
 8003a7a:	f140 80a8 	bpl.w	8003bce <tcp_input+0x63a>
      tcp_ack_now(pcb);
 8003a7e:	7fa3      	ldrb	r3, [r4, #30]
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	77a3      	strb	r3, [r4, #30]
      pcb->state = CLOSE_WAIT;
 8003a86:	2307      	movs	r3, #7
 8003a88:	e028      	b.n	8003adc <tcp_input+0x548>
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7ff faf4 	bl	8003078 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8003a90:	f898 3000 	ldrb.w	r3, [r8]
 8003a94:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8003a98:	783b      	ldrb	r3, [r7, #0]
      pcb->state = CLOSE_WAIT;
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) {
 8003a9a:	d021      	beq.n	8003ae0 <tcp_input+0x54c>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8003a9c:	f013 0f10 	tst.w	r3, #16
 8003aa0:	7fa3      	ldrb	r3, [r4, #30]
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8003aa2:	f043 0302 	orr.w	r3, r3, #2
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) {
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8003aa6:	d017      	beq.n	8003ad8 <tcp_input+0x544>
 8003aa8:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <tcp_input+0x598>)
 8003aaa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	4291      	cmp	r1, r2
 8003ab0:	d112      	bne.n	8003ad8 <tcp_input+0x544>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8003ab2:	77a3      	strb	r3, [r4, #30]
        tcp_pcb_purge(pcb);
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7fe ff21 	bl	80028fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8003aba:	4a21      	ldr	r2, [pc, #132]	; (8003b40 <tcp_input+0x5ac>)
 8003abc:	6813      	ldr	r3, [r2, #0]
 8003abe:	429c      	cmp	r4, r3
 8003ac0:	d054      	beq.n	8003b6c <tcp_input+0x5d8>
 8003ac2:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <tcp_input+0x5b0>)
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d061      	beq.n	8003b90 <tcp_input+0x5fc>
 8003acc:	68d8      	ldr	r0, [r3, #12]
 8003ace:	4284      	cmp	r4, r0
 8003ad0:	d052      	beq.n	8003b78 <tcp_input+0x5e4>
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	e7f7      	b.n	8003ac8 <tcp_input+0x534>
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
 8003ad8:	77a3      	strb	r3, [r4, #30]
        pcb->state = CLOSING;
 8003ada:	2308      	movs	r3, #8
 8003adc:	7623      	strb	r3, [r4, #24]
 8003ade:	e076      	b.n	8003bce <tcp_input+0x63a>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8003ae0:	06da      	lsls	r2, r3, #27
 8003ae2:	d574      	bpl.n	8003bce <tcp_input+0x63a>
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <tcp_input+0x598>)
 8003ae6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d16f      	bne.n	8003bce <tcp_input+0x63a>
      pcb->state = FIN_WAIT_2;
 8003aee:	2306      	movs	r3, #6
 8003af0:	e7f4      	b.n	8003adc <tcp_input+0x548>
    }
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7ff fac0 	bl	8003078 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8003af8:	f898 3000 	ldrb.w	r3, [r8]
 8003afc:	069b      	lsls	r3, r3, #26
 8003afe:	d566      	bpl.n	8003bce <tcp_input+0x63a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8003b00:	7fa3      	ldrb	r3, [r4, #30]
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	77a3      	strb	r3, [r4, #30]
      tcp_pcb_purge(pcb);
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f7fe fef7 	bl	80028fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8003b0e:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <tcp_input+0x5ac>)
 8003b10:	6813      	ldr	r3, [r2, #0]
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d02a      	beq.n	8003b6c <tcp_input+0x5d8>
 8003b16:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <tcp_input+0x5b0>)
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d037      	beq.n	8003b90 <tcp_input+0x5fc>
 8003b20:	68d8      	ldr	r0, [r3, #12]
 8003b22:	4284      	cmp	r4, r0
 8003b24:	d028      	beq.n	8003b78 <tcp_input+0x5e4>
 8003b26:	2101      	movs	r1, #1
 8003b28:	4603      	mov	r3, r0
 8003b2a:	e7f7      	b.n	8003b1c <tcp_input+0x588>
 8003b2c:	20002ab4 	.word	0x20002ab4
 8003b30:	20005428 	.word	0x20005428
 8003b34:	20002bf4 	.word	0x20002bf4
 8003b38:	20002bfc 	.word	0x20002bfc
 8003b3c:	20002aac 	.word	0x20002aac
 8003b40:	20005424 	.word	0x20005424
 8003b44:	20005430 	.word	0x20005430
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
  case CLOSING:
    tcp_receive(pcb);
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7ff fa95 	bl	8003078 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 8003b4e:	783b      	ldrb	r3, [r7, #0]
 8003b50:	06df      	lsls	r7, r3, #27
 8003b52:	d53c      	bpl.n	8003bce <tcp_input+0x63a>
 8003b54:	4b8e      	ldr	r3, [pc, #568]	; (8003d90 <tcp_input+0x7fc>)
 8003b56:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d137      	bne.n	8003bce <tcp_input+0x63a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7fe fecc 	bl	80028fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8003b64:	4a8b      	ldr	r2, [pc, #556]	; (8003d94 <tcp_input+0x800>)
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	429c      	cmp	r4, r3
 8003b6a:	d101      	bne.n	8003b70 <tcp_input+0x5dc>
 8003b6c:	68e3      	ldr	r3, [r4, #12]
 8003b6e:	e010      	b.n	8003b92 <tcp_input+0x5fe>
 8003b70:	4a89      	ldr	r2, [pc, #548]	; (8003d98 <tcp_input+0x804>)
 8003b72:	2100      	movs	r1, #0
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e009      	b.n	8003b8c <tcp_input+0x5f8>
 8003b78:	b101      	cbz	r1, 8003b7c <tcp_input+0x5e8>
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	68e2      	ldr	r2, [r4, #12]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	e008      	b.n	8003b94 <tcp_input+0x600>
 8003b82:	68d8      	ldr	r0, [r3, #12]
 8003b84:	4284      	cmp	r4, r0
 8003b86:	d0f7      	beq.n	8003b78 <tcp_input+0x5e4>
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f8      	bne.n	8003b82 <tcp_input+0x5ee>
 8003b90:	b101      	cbz	r1, 8003b94 <tcp_input+0x600>
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <tcp_input+0x808>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8003b9a:	230a      	movs	r3, #10
 8003b9c:	7623      	strb	r3, [r4, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8003b9e:	4b80      	ldr	r3, [pc, #512]	; (8003da0 <tcp_input+0x80c>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	60e2      	str	r2, [r4, #12]
 8003ba4:	601c      	str	r4, [r3, #0]
 8003ba6:	f000 fe29 	bl	80047fc <tcp_timer_needed>
 8003baa:	e010      	b.n	8003bce <tcp_input+0x63a>
    }
    break;
  case LAST_ACK:
    tcp_receive(pcb);
 8003bac:	4620      	mov	r0, r4
 8003bae:	f7ff fa63 	bl	8003078 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 8003bb2:	783b      	ldrb	r3, [r7, #0]
 8003bb4:	06de      	lsls	r6, r3, #27
 8003bb6:	d50a      	bpl.n	8003bce <tcp_input+0x63a>
 8003bb8:	4b75      	ldr	r3, [pc, #468]	; (8003d90 <tcp_input+0x7fc>)
 8003bba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8003bc0:	bf02      	ittt	eq
 8003bc2:	f898 3000 	ldrbeq.w	r3, [r8]
 8003bc6:	f043 0310 	orreq.w	r3, r3, #16
 8003bca:	f888 3000 	strbeq.w	r3, [r8]
    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
      if (recv_flags & TF_RESET) {
 8003bce:	f898 3000 	ldrb.w	r3, [r8]
 8003bd2:	071d      	lsls	r5, r3, #28
 8003bd4:	d505      	bpl.n	8003be2 <tcp_input+0x64e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 8003bd6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003bda:	b173      	cbz	r3, 8003bfa <tcp_input+0x666>
 8003bdc:	f06f 010a 	mvn.w	r1, #10
 8003be0:	e009      	b.n	8003bf6 <tcp_input+0x662>
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
        memp_free(MEMP_TCP_PCB, pcb);
      } else if (recv_flags & TF_CLOSED) {
 8003be2:	06d8      	lsls	r0, r3, #27
 8003be4:	d512      	bpl.n	8003c0c <tcp_input+0x678>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
 8003be6:	7fa3      	ldrb	r3, [r4, #30]
 8003be8:	06d9      	lsls	r1, r3, #27
 8003bea:	d406      	bmi.n	8003bfa <tcp_input+0x666>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 8003bec:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003bf0:	b11b      	cbz	r3, 8003bfa <tcp_input+0x666>
 8003bf2:	f06f 010b 	mvn.w	r1, #11
 8003bf6:	6920      	ldr	r0, [r4, #16]
 8003bf8:	4798      	blx	r3
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4865      	ldr	r0, [pc, #404]	; (8003d94 <tcp_input+0x800>)
 8003bfe:	f7fe ffed 	bl	8002bdc <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8003c02:	4621      	mov	r1, r4
 8003c04:	2002      	movs	r0, #2
 8003c06:	f7fe faa1 	bl	800214c <memp_free>
 8003c0a:	e04f      	b.n	8003cac <tcp_input+0x718>
      } else {
        err = ERR_OK;
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
 8003c0c:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8003c10:	b91a      	cbnz	r2, 8003c1a <tcp_input+0x686>
          if (err == ERR_ABRT) {
            goto aborted;
          }
        }

        if (recv_data != NULL) {
 8003c12:	f8da 2000 	ldr.w	r2, [sl]
 8003c16:	b94a      	cbnz	r2, 8003c2c <tcp_input+0x698>
 8003c18:	e027      	b.n	8003c6a <tcp_input+0x6d6>
        err = ERR_OK;
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
          TCP_EVENT_SENT(pcb, pcb->acked, err);
 8003c1a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f8      	beq.n	8003c12 <tcp_input+0x67e>
 8003c20:	4621      	mov	r1, r4
 8003c22:	6920      	ldr	r0, [r4, #16]
 8003c24:	4798      	blx	r3
          if (err == ERR_ABRT) {
 8003c26:	300a      	adds	r0, #10
 8003c28:	d1f3      	bne.n	8003c12 <tcp_input+0x67e>
 8003c2a:	e03f      	b.n	8003cac <tcp_input+0x718>
          }
        }

        if (recv_data != NULL) {
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 8003c2c:	7fa1      	ldrb	r1, [r4, #30]
 8003c2e:	f001 0110 	and.w	r1, r1, #16
 8003c32:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8003c36:	b131      	cbz	r1, 8003c46 <tcp_input+0x6b2>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f7fe fb97 	bl	800236c <pbuf_free>
            tcp_abort(pcb);
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff f976 	bl	8002f30 <tcp_abort>
            goto aborted;
 8003c44:	e032      	b.n	8003cac <tcp_input+0x718>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8003c46:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8003c48:	b11d      	cbz	r5, 8003c52 <tcp_input+0x6be>
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	6920      	ldr	r0, [r4, #16]
 8003c4e:	47a8      	blx	r5
 8003c50:	e004      	b.n	8003c5c <tcp_input+0x6c8>
 8003c52:	462b      	mov	r3, r5
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	f7ff f896 	bl	8002d88 <tcp_recv_null>
          if (err == ERR_ABRT) {
 8003c5c:	f110 0f0a 	cmn.w	r0, #10
 8003c60:	d024      	beq.n	8003cac <tcp_input+0x718>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8003c62:	b110      	cbz	r0, 8003c6a <tcp_input+0x6d6>
            pcb->refused_data = recv_data;
 8003c64:	f8da 3000 	ldr.w	r3, [sl]
 8003c68:	6763      	str	r3, [r4, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8003c6a:	f898 3000 	ldrb.w	r3, [r8]
 8003c6e:	069a      	lsls	r2, r3, #26
 8003c70:	d516      	bpl.n	8003ca0 <tcp_input+0x70c>
          if (pcb->refused_data != NULL) {
 8003c72:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003c74:	b123      	cbz	r3, 8003c80 <tcp_input+0x6ec>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8003c76:	7b5a      	ldrb	r2, [r3, #13]
 8003c78:	f042 0220 	orr.w	r2, r2, #32
 8003c7c:	735a      	strb	r2, [r3, #13]
 8003c7e:	e00f      	b.n	8003ca0 <tcp_input+0x70c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
 8003c80:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
              pcb->rcv_wnd++;
            }
            TCP_EVENT_CLOSED(pcb, err);
 8003c82:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
 8003c84:	f640 3268 	movw	r2, #2920	; 0xb68
 8003c88:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 8003c8a:	bf1c      	itt	ne
 8003c8c:	3301      	addne	r3, #1
 8003c8e:	85a3      	strhne	r3, [r4, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
 8003c90:	b135      	cbz	r5, 8003ca0 <tcp_input+0x70c>
 8003c92:	2300      	movs	r3, #0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4621      	mov	r1, r4
 8003c98:	6920      	ldr	r0, [r4, #16]
 8003c9a:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8003c9c:	300a      	adds	r0, #10
 8003c9e:	d005      	beq.n	8003cac <tcp_input+0x718>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8003ca0:	2300      	movs	r3, #0
        /* Try to send something out. */
        tcp_output(pcb);
 8003ca2:	4620      	mov	r0, r4
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8003ca4:	f8cb 3000 	str.w	r3, [fp]
        /* Try to send something out. */
        tcp_output(pcb);
 8003ca8:	f000 fb5c 	bl	8004364 <tcp_output>
aborted:
    tcp_input_pcb = NULL;
    recv_data = NULL;

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8003cac:	f8d9 0004 	ldr.w	r0, [r9, #4]
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 8003cb0:	2400      	movs	r4, #0
 8003cb2:	f8cb 4000 	str.w	r4, [fp]
    recv_data = NULL;
 8003cb6:	f8ca 4000 	str.w	r4, [sl]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d065      	beq.n	8003d8a <tcp_input+0x7f6>
    {
      pbuf_free(inseg.p);
 8003cbe:	f7fe fb55 	bl	800236c <pbuf_free>
      inseg.p = NULL;
 8003cc2:	4b38      	ldr	r3, [pc, #224]	; (8003da4 <tcp_input+0x810>)
 8003cc4:	605c      	str	r4, [r3, #4]
 8003cc6:	e060      	b.n	8003d8a <tcp_input+0x7f6>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
 8003cc8:	0799      	lsls	r1, r3, #30
 8003cca:	f57f ad1d 	bpl.w	8003708 <tcp_input+0x174>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 8003cce:	f898 0019 	ldrb.w	r0, [r8, #25]
 8003cd2:	f7ff f93d 	bl	8002f50 <tcp_alloc>
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 8003cd6:	4683      	mov	fp, r0
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	f43f ad15 	beq.w	8003708 <tcp_input+0x174>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 8003cde:	f8da 3000 	ldr.w	r3, [sl]
 8003ce2:	6003      	str	r3, [r0, #0]
    npcb->local_port = pcb->local_port;
 8003ce4:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8003ce8:	8343      	strh	r3, [r0, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 8003cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    npcb->remote_port = tcphdr->src;
 8003cec:	682a      	ldr	r2, [r5, #0]
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
    npcb->local_port = pcb->local_port;
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 8003cee:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 8003cf0:	7851      	ldrb	r1, [r2, #1]
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
    npcb->local_port = pcb->local_port;
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 8003cf2:	6043      	str	r3, [r0, #4]
    npcb->remote_port = tcphdr->src;
 8003cf4:	7813      	ldrb	r3, [r2, #0]
 8003cf6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003cfa:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 8003d00:	9b03      	ldr	r3, [sp, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1c59      	adds	r1, r3, #1
 8003d06:	6281      	str	r1, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8003d08:	6301      	str	r1, [r0, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
    npcb->snd_wnd_max = tcphdr->wnd;
    npcb->ssthresh = npcb->snd_wnd;
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8003d0a:	3b01      	subs	r3, #1
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
    npcb->remote_port = tcphdr->src;
    npcb->state = SYN_RCVD;
    npcb->rcv_nxt = seqno + 1;
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    npcb->snd_wnd = tcphdr->wnd;
 8003d0c:	89d2      	ldrh	r2, [r2, #14]
    npcb->snd_wnd_max = tcphdr->wnd;
    npcb->ssthresh = npcb->snd_wnd;
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8003d0e:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8003d10:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003d14:	6103      	str	r3, [r0, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 8003d16:	f8d8 3014 	ldr.w	r3, [r8, #20]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
    npcb->remote_port = tcphdr->src;
    npcb->state = SYN_RCVD;
    npcb->rcv_nxt = seqno + 1;
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    npcb->snd_wnd = tcphdr->wnd;
 8003d1a:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
 8003d1e:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
 8003d22:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
    npcb->callback_arg = pcb->callback_arg;
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 8003d26:	6143      	str	r3, [r0, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8003d28:	f898 3008 	ldrb.w	r3, [r8, #8]
 8003d2c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003d30:	7203      	strb	r3, [r0, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 8003d32:	f8d9 3000 	ldr.w	r3, [r9]
 8003d36:	60c3      	str	r3, [r0, #12]
 8003d38:	f8c9 0000 	str.w	r0, [r9]
 8003d3c:	f000 fd5e 	bl	80047fc <tcp_timer_needed>
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <tcp_input+0x808>)
 8003d42:	2201      	movs	r2, #1

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 8003d44:	f10b 0036 	add.w	r0, fp, #54	; 0x36
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 8003d4a:	f7ff fbe1 	bl	8003510 <tcp_parseopt.isra.0>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
 8003d4e:	f10b 0104 	add.w	r1, fp, #4
 8003d52:	f8bb 0036 	ldrh.w	r0, [fp, #54]	; 0x36
 8003d56:	f7ff f980 	bl	800305a <tcp_eff_send_mss>
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8003d5a:	2112      	movs	r1, #18
    TCP_REG_ACTIVE(npcb);

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
 8003d5c:	f8ab 0036 	strh.w	r0, [fp, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8003d60:	4658      	mov	r0, fp
 8003d62:	f000 fa6a 	bl	800423a <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8003d66:	b120      	cbz	r0, 8003d72 <tcp_input+0x7de>
      tcp_abandon(npcb, 0);
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4658      	mov	r0, fp
 8003d6c:	f7ff f896 	bl	8002e9c <tcp_abandon>
 8003d70:	e4ca      	b.n	8003708 <tcp_input+0x174>
      return rc;
    }
    return tcp_output(npcb);
 8003d72:	4658      	mov	r0, fp
 8003d74:	e4ee      	b.n	8003754 <tcp_input+0x1c0>
    }

    if (acceptable) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 8003d76:	f898 3000 	ldrb.w	r3, [r8]
 8003d7a:	f043 0308 	orr.w	r3, r3, #8
 8003d7e:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8003d82:	7fa3      	ldrb	r3, [r4, #30]
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	e609      	b.n	800399e <tcp_input+0x40a>
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
}
 8003d8a:	b00b      	add	sp, #44	; 0x2c
 8003d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d90:	20002ab4 	.word	0x20002ab4
 8003d94:	20005424 	.word	0x20005424
 8003d98:	20005430 	.word	0x20005430
 8003d9c:	20005420 	.word	0x20005420
 8003da0:	20005438 	.word	0x20005438
 8003da4:	20002ac4 	.word	0x20002ac4

08003da8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8003da8:	b538      	push	{r3, r4, r5, lr}
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8003daa:	4291      	cmp	r1, r2
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8003dac:	461d      	mov	r5, r3
 8003dae:	460c      	mov	r4, r1
 8003db0:	9b04      	ldr	r3, [sp, #16]
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8003db2:	d216      	bcs.n	8003de2 <tcp_pbuf_prealloc+0x3a>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8003db4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8003db8:	0789      	lsls	r1, r1, #30
 8003dba:	d409      	bmi.n	8003dd0 <tcp_pbuf_prealloc+0x28>
 8003dbc:	7f99      	ldrb	r1, [r3, #30]
 8003dbe:	0649      	lsls	r1, r1, #25
 8003dc0:	d40f      	bmi.n	8003de2 <tcp_pbuf_prealloc+0x3a>
        (!(pcb->flags & TF_NODELAY) &&
 8003dc2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8003dc6:	b119      	cbz	r1, 8003dd0 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8003dc8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003dca:	b909      	cbnz	r1, 8003dd0 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	b143      	cbz	r3, 8003de2 <tcp_pbuf_prealloc+0x3a>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
 8003dd0:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
 8003dd4:	f021 0103 	bic.w	r1, r1, #3
 8003dd8:	428a      	cmp	r2, r1
 8003dda:	bfa8      	it	ge
 8003ddc:	460a      	movge	r2, r1
 8003dde:	b291      	uxth	r1, r2
 8003de0:	e000      	b.n	8003de4 <tcp_pbuf_prealloc+0x3c>
 8003de2:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8003de4:	2200      	movs	r2, #0
 8003de6:	f7fe fae7 	bl	80023b8 <pbuf_alloc>
  if (p == NULL) {
 8003dea:	b120      	cbz	r0, 8003df6 <tcp_pbuf_prealloc+0x4e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 8003dec:	8942      	ldrh	r2, [r0, #10]
 8003dee:	1b12      	subs	r2, r2, r4
 8003df0:	802a      	strh	r2, [r5, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8003df2:	8104      	strh	r4, [r0, #8]
 8003df4:	8144      	strh	r4, [r0, #10]
  return p;
}
 8003df6:	bd38      	pop	{r3, r4, r5, pc}

08003df8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8003df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003e00:	469b      	mov	fp, r3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8003e02:	f018 0501 	ands.w	r5, r8, #1
 8003e06:	f008 0302 	and.w	r3, r8, #2
 8003e0a:	bf18      	it	ne
 8003e0c:	2504      	movne	r5, #4
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8003e0e:	4681      	mov	r9, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf14      	ite	ne
 8003e14:	230c      	movne	r3, #12
 8003e16:	2300      	moveq	r3, #0

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8003e18:	2004      	movs	r0, #4
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8003e1a:	460f      	mov	r7, r1
 8003e1c:	4616      	mov	r6, r2
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8003e1e:	441d      	add	r5, r3

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8003e20:	f7fe f984 	bl	800212c <memp_malloc>
 8003e24:	f04f 0a00 	mov.w	sl, #0
 8003e28:	4604      	mov	r4, r0
 8003e2a:	b918      	cbnz	r0, 8003e34 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	f7fe fa9d 	bl	800236c <pbuf_free>
 8003e32:	e03c      	b.n	8003eae <tcp_create_segment+0xb6>
    return NULL;
  }
  seg->flags = optflags;
 8003e34:	f880 800a 	strb.w	r8, [r0, #10]
  seg->next = NULL;
  seg->p = p;
  seg->len = p->tot_len - optlen;
 8003e38:	893b      	ldrh	r3, [r7, #8]
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  seg->next = NULL;
  seg->p = p;
 8003e3a:	6047      	str	r7, [r0, #4]
  seg->len = p->tot_len - optlen;
 8003e3c:	1b5b      	subs	r3, r3, r5
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  seg->next = NULL;
 8003e3e:	f8c0 a000 	str.w	sl, [r0]
  seg->p = p;
  seg->len = p->tot_len - optlen;
 8003e42:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8003e44:	2114      	movs	r1, #20
 8003e46:	4638      	mov	r0, r7
 8003e48:	f7fe fa64 	bl	8002314 <pbuf_header>
 8003e4c:	4607      	mov	r7, r0
 8003e4e:	b128      	cbz	r0, 8003e5c <tcp_create_segment+0x64>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7fe fd2b 	bl	80028ac <tcp_seg_free>
    return NULL;
 8003e56:	4650      	mov	r0, sl
 8003e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8003e5c:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = htons(pcb->local_port);
 8003e5e:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8003e62:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8003e66:	f8c4 800c 	str.w	r8, [r4, #12]
  seg->tcphdr->src = htons(pcb->local_port);
 8003e6a:	f7fd fdeb 	bl	8001a44 <lwip_htons>
 8003e6e:	f8a8 0000 	strh.w	r0, [r8]
  seg->tcphdr->dest = htons(pcb->remote_port);
 8003e72:	f8b9 001c 	ldrh.w	r0, [r9, #28]
 8003e76:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8003e7a:	f7fd fde3 	bl	8001a44 <lwip_htons>
 8003e7e:	f8a8 0002 	strh.w	r0, [r8, #2]
  seg->tcphdr->seqno = htonl(seqno);
 8003e82:	4658      	mov	r0, fp
 8003e84:	f8d4 800c 	ldr.w	r8, [r4, #12]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8003e88:	f3c5 0587 	ubfx	r5, r5, #2, #8
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  seg->tcphdr->src = htons(pcb->local_port);
  seg->tcphdr->dest = htons(pcb->remote_port);
  seg->tcphdr->seqno = htonl(seqno);
 8003e8c:	f7fd fde0 	bl	8001a50 <lwip_htonl>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8003e90:	3505      	adds	r5, #5
 8003e92:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  seg->tcphdr->src = htons(pcb->local_port);
  seg->tcphdr->dest = htons(pcb->remote_port);
  seg->tcphdr->seqno = htonl(seqno);
 8003e96:	f8c8 0004 	str.w	r0, [r8, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8003e9a:	b2a8      	uxth	r0, r5
 8003e9c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8003ea0:	f7fd fdd0 	bl	8001a44 <lwip_htons>
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8003ea4:	68e3      	ldr	r3, [r4, #12]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  seg->tcphdr->src = htons(pcb->local_port);
  seg->tcphdr->dest = htons(pcb->remote_port);
  seg->tcphdr->seqno = htonl(seqno);
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8003ea6:	f8a8 000c 	strh.w	r0, [r8, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8003eaa:	749f      	strb	r7, [r3, #18]
 8003eac:	74df      	strb	r7, [r3, #19]
  return seg;
 8003eae:	4620      	mov	r0, r4
} 
 8003eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003eb4 <tcp_output_alloc_header.constprop.0>:
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8003eb4:	3114      	adds	r1, #20
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8003eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8003eb8:	b289      	uxth	r1, r1
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8003eba:	4605      	mov	r5, r0
 8003ebc:	4617      	mov	r7, r2
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f7fe fa79 	bl	80023b8 <pbuf_alloc>
  if (p != NULL) {
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	b1f8      	cbz	r0, 8003f0a <tcp_output_alloc_header.constprop.0+0x56>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8003eca:	6844      	ldr	r4, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
 8003ecc:	8b68      	ldrh	r0, [r5, #26]
 8003ece:	f7fd fdb9 	bl	8001a44 <lwip_htons>
 8003ed2:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = htons(pcb->remote_port);
 8003ed4:	8ba8      	ldrh	r0, [r5, #28]
 8003ed6:	f7fd fdb5 	bl	8001a44 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8003eda:	6067      	str	r7, [r4, #4]
  if (p != NULL) {
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = htons(pcb->local_port);
    tcphdr->dest = htons(pcb->remote_port);
 8003edc:	8060      	strh	r0, [r4, #2]
    tcphdr->seqno = seqno_be;
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 8003ede:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003ee0:	f7fd fdb6 	bl	8001a50 <lwip_htonl>
 8003ee4:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8003ee6:	f245 0010 	movw	r0, #20496	; 0x5010
 8003eea:	f7fd fdab 	bl	8001a44 <lwip_htons>
 8003eee:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 8003ef0:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
 8003ef2:	f7fd fda7 	bl	8001a44 <lwip_htons>
    tcphdr->chksum = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	7423      	strb	r3, [r4, #16]
 8003efa:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8003efc:	74a3      	strb	r3, [r4, #18]
 8003efe:	74e3      	strb	r3, [r4, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8003f00:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003f02:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    tcphdr->src = htons(pcb->local_port);
    tcphdr->dest = htons(pcb->remote_port);
    tcphdr->seqno = seqno_be;
    tcphdr->ackno = htonl(pcb->rcv_nxt);
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 8003f04:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
    tcphdr->urgp = 0;

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8003f06:	4413      	add	r3, r2
 8003f08:	632b      	str	r3, [r5, #48]	; 0x30
  }
  return p;
}
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f0e <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8003f0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f12:	b08f      	sub	sp, #60	; 0x3c
 8003f14:	4692      	mov	sl, r2
 8003f16:	9306      	str	r3, [sp, #24]
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
 8003f1e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8003f22:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
 8003f24:	9105      	str	r1, [sp, #20]
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	bf28      	it	cs
 8003f2c:	4613      	movcs	r3, r2
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8003f2e:	4604      	mov	r4, r0
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
 8003f30:	9309      	str	r3, [sp, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
 8003f32:	2900      	cmp	r1, #0
 8003f34:	f000 809d 	beq.w	8004072 <tcp_write+0x164>
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8003f38:	7e03      	ldrb	r3, [r0, #24]
 8003f3a:	2b07      	cmp	r3, #7
 8003f3c:	d003      	beq.n	8003f46 <tcp_write+0x38>
      (pcb->state != CLOSE_WAIT) &&
 8003f3e:	3b02      	subs	r3, #2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f200 8175 	bhi.w	8004230 <tcp_write+0x322>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 8003f46:	f1ba 0f00 	cmp.w	sl, #0
 8003f4a:	f000 8095 	beq.w	8004078 <tcp_write+0x16a>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8003f4e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8003f52:	4553      	cmp	r3, sl
 8003f54:	d204      	bcs.n	8003f60 <tcp_write+0x52>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8003f56:	7fa3      	ldrb	r3, [r4, #30]
 8003f58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f5c:	77a3      	strb	r3, [r4, #30]
 8003f5e:	e085      	b.n	800406c <tcp_write+0x15e>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8003f60:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	f240 8087 	bls.w	8004078 <tcp_write+0x16a>
 8003f6a:	e7f4      	b.n	8003f56 <tcp_write+0x48>
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8003f6c:	7aa9      	ldrb	r1, [r5, #10]
    space = mss_local - (last_unsent->len + unsent_optlen);
 8003f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f70:	892f      	ldrh	r7, [r5, #8]
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8003f72:	f011 0f01 	tst.w	r1, #1
 8003f76:	bf14      	ite	ne
 8003f78:	2204      	movne	r2, #4
 8003f7a:	2200      	moveq	r2, #0
 8003f7c:	f011 0f02 	tst.w	r1, #2
    space = mss_local - (last_unsent->len + unsent_optlen);
 8003f80:	eba3 0107 	sub.w	r1, r3, r7
 8003f84:	eba1 0202 	sub.w	r2, r1, r2
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8003f88:	bf14      	ite	ne
 8003f8a:	200c      	movne	r0, #12
 8003f8c:	2000      	moveq	r0, #0
    space = mss_local - (last_unsent->len + unsent_optlen);
 8003f8e:	1a13      	subs	r3, r2, r0
 8003f90:	b29a      	uxth	r2, r3
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8003f92:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    if (oversize > 0) {
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d07d      	beq.n	8004096 <tcp_write+0x188>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
 8003f9a:	459a      	cmp	sl, r3
 8003f9c:	46d0      	mov	r8, sl
 8003f9e:	bf28      	it	cs
 8003fa0:	4698      	movcs	r8, r3
      pos += oversize_used;
      oversize -= oversize_used;
 8003fa2:	ebc8 0303 	rsb	r3, r8, r3
      space -= oversize_used;
 8003fa6:	ebc8 0202 	rsb	r2, r8, r2
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8003faa:	45c2      	cmp	sl, r8
    if (oversize > 0) {
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
      pos += oversize_used;
      oversize -= oversize_used;
 8003fac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 8003fb0:	b292      	uxth	r2, r2
 8003fb2:	46ab      	mov	fp, r5
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8003fb4:	f240 80dc 	bls.w	8004170 <tcp_write+0x262>
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	f000 8083 	beq.w	80040c4 <tcp_write+0x1b6>
 8003fbe:	2f00      	cmp	r7, #0
 8003fc0:	f000 8083 	beq.w	80040ca <tcp_write+0x1bc>
      u16_t seglen = space < len - pos ? space : len - pos;
 8003fc4:	ebc8 060a 	rsb	r6, r8, sl
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8003fc8:	9b06      	ldr	r3, [sp, #24]
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
      u16_t seglen = space < len - pos ? space : len - pos;
 8003fca:	4296      	cmp	r6, r2
 8003fcc:	bfa8      	it	ge
 8003fce:	4616      	movge	r6, r2
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8003fd0:	07db      	lsls	r3, r3, #31
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
      u16_t seglen = space < len - pos ? space : len - pos;
 8003fd2:	b2b6      	uxth	r6, r6
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8003fd4:	d569      	bpl.n	80040aa <tcp_write+0x19c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	9302      	str	r3, [sp, #8]
 8003fda:	9b06      	ldr	r3, [sp, #24]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	9400      	str	r4, [sp, #0]
 8003fe0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	2003      	movs	r0, #3
 8003fe8:	f7ff fede 	bl	8003da8 <tcp_pbuf_prealloc>
 8003fec:	4607      	mov	r7, r0
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	f000 8111 	beq.w	8004216 <tcp_write+0x308>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8003ff4:	9b05      	ldr	r3, [sp, #20]
 8003ff6:	6840      	ldr	r0, [r0, #4]
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	eb03 0108 	add.w	r1, r3, r8
 8003ffe:	f003 f8aa 	bl	8007156 <memcpy>
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
      }

      pos += seglen;
      queuelen += pbuf_clen(concat_p);
 8004002:	4638      	mov	r0, r7
 8004004:	f7fe fa83 	bl	800250e <pbuf_clen>
 8004008:	9b04      	ldr	r3, [sp, #16]
 800400a:	4403      	add	r3, r0
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
      }

      pos += seglen;
 800400c:	4446      	add	r6, r8
      queuelen += pbuf_clen(concat_p);
 800400e:	b29b      	uxth	r3, r3
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
      }

      pos += seglen;
 8004010:	b2b6      	uxth	r6, r6
      queuelen += pbuf_clen(concat_p);
 8004012:	9304      	str	r3, [sp, #16]
 8004014:	46ab      	mov	fp, r5
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8004016:	9b06      	ldr	r3, [sp, #24]
 8004018:	f04f 0900 	mov.w	r9, #0
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8004024:	9307      	str	r3, [sp, #28]
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8004026:	4556      	cmp	r6, sl
 8004028:	f080 809e 	bcs.w	8004168 <tcp_write+0x25a>
    struct pbuf *p;
    u16_t left = len - pos;
    u16_t max_len = mss_local - optlen;
    u16_t seglen = left > max_len ? max_len : left;
 800402c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800402e:	ebc6 030a 	rsb	r3, r6, sl
 8004032:	b29b      	uxth	r3, r3
 8004034:	4293      	cmp	r3, r2
 8004036:	bf28      	it	cs
 8004038:	4613      	movcs	r3, r2
 800403a:	9308      	str	r3, [sp, #32]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800403c:	9b07      	ldr	r3, [sp, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d145      	bne.n	80040ce <tcp_write+0x1c0>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8004042:	2201      	movs	r2, #1
 8004044:	9908      	ldr	r1, [sp, #32]
 8004046:	9807      	ldr	r0, [sp, #28]
 8004048:	f7fe f9b6 	bl	80023b8 <pbuf_alloc>
 800404c:	2800      	cmp	r0, #0
 800404e:	d155      	bne.n	80040fc <tcp_write+0x1ee>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8004050:	7fa3      	ldrb	r3, [r4, #30]
 8004052:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004056:	77a3      	strb	r3, [r4, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8004058:	b117      	cbz	r7, 8004060 <tcp_write+0x152>
    pbuf_free(concat_p);
 800405a:	4638      	mov	r0, r7
 800405c:	f7fe f986 	bl	800236c <pbuf_free>
  }
  if (queue != NULL) {
 8004060:	f1b9 0f00 	cmp.w	r9, #0
 8004064:	d002      	beq.n	800406c <tcp_write+0x15e>
    tcp_segs_free(queue);
 8004066:	4648      	mov	r0, r9
 8004068:	f7fe fc2e 	bl	80028c8 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e0e0      	b.n	8004234 <tcp_write+0x326>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
 8004072:	f06f 000d 	mvn.w	r0, #13
 8004076:	e0dd      	b.n	8004234 <tcp_write+0x326>
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8004078:	6ee5      	ldr	r5, [r4, #108]	; 0x6c

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
 800407a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800407e:	9304      	str	r3, [sp, #16]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8004080:	2d00      	cmp	r5, #0
 8004082:	f000 80d0 	beq.w	8004226 <tcp_write+0x318>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8004086:	f8d5 9000 	ldr.w	r9, [r5]
 800408a:	f1b9 0f00 	cmp.w	r9, #0
 800408e:	f43f af6d 	beq.w	8003f6c <tcp_write+0x5e>
 8004092:	464d      	mov	r5, r9
 8004094:	e7f7      	b.n	8004086 <tcp_write+0x178>
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8004096:	f8ad 9036 	strh.w	r9, [sp, #54]	; 0x36
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800409a:	f1ba 0f00 	cmp.w	sl, #0
 800409e:	d101      	bne.n	80040a4 <tcp_write+0x196>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80040a0:	46d3      	mov	fp, sl
 80040a2:	e092      	b.n	80041ca <tcp_write+0x2bc>
 80040a4:	46cb      	mov	fp, r9
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80040a6:	46c8      	mov	r8, r9
 80040a8:	e786      	b.n	8003fb8 <tcp_write+0xaa>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80040aa:	2201      	movs	r2, #1
 80040ac:	4631      	mov	r1, r6
 80040ae:	2003      	movs	r0, #3
 80040b0:	f7fe f982 	bl	80023b8 <pbuf_alloc>
 80040b4:	4607      	mov	r7, r0
 80040b6:	2800      	cmp	r0, #0
 80040b8:	f000 80ad 	beq.w	8004216 <tcp_write+0x308>
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
 80040bc:	9b05      	ldr	r3, [sp, #20]
 80040be:	4443      	add	r3, r8
 80040c0:	6043      	str	r3, [r0, #4]
 80040c2:	e79e      	b.n	8004002 <tcp_write+0xf4>
 80040c4:	4646      	mov	r6, r8
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 80040c6:	4617      	mov	r7, r2
 80040c8:	e7a5      	b.n	8004016 <tcp_write+0x108>
 80040ca:	4646      	mov	r6, r8
 80040cc:	e7a3      	b.n	8004016 <tcp_write+0x108>
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80040ce:	fab9 f389 	clz	r3, r9
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	9302      	str	r3, [sp, #8]
 80040d6:	9b06      	ldr	r3, [sp, #24]
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	9400      	str	r4, [sp, #0]
 80040dc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80040e0:	9908      	ldr	r1, [sp, #32]
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7ff fe60 	bl	8003da8 <tcp_pbuf_prealloc>
 80040e8:	4683      	mov	fp, r0
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d0b0      	beq.n	8004050 <tcp_write+0x142>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80040ee:	9b05      	ldr	r3, [sp, #20]
 80040f0:	9a08      	ldr	r2, [sp, #32]
 80040f2:	6840      	ldr	r0, [r0, #4]
 80040f4:	1999      	adds	r1, r3, r6
 80040f6:	f003 f82e 	bl	8007156 <memcpy>
 80040fa:	e010      	b.n	800411e <tcp_write+0x210>
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
 80040fc:	9a05      	ldr	r2, [sp, #20]
 80040fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8004100:	4432      	add	r2, r6
 8004102:	6042      	str	r2, [r0, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8004104:	9a07      	ldr	r2, [sp, #28]
 8004106:	4611      	mov	r1, r2
 8004108:	4610      	mov	r0, r2
 800410a:	f7fe f955 	bl	80023b8 <pbuf_alloc>
 800410e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004110:	4683      	mov	fp, r0
 8004112:	b908      	cbnz	r0, 8004118 <tcp_write+0x20a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8004114:	4618      	mov	r0, r3
 8004116:	e00c      	b.n	8004132 <tcp_write+0x224>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8004118:	4619      	mov	r1, r3
 800411a:	f7fe fa05 	bl	8002528 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800411e:	4658      	mov	r0, fp
 8004120:	f7fe f9f5 	bl	800250e <pbuf_clen>
 8004124:	9b04      	ldr	r3, [sp, #16]
 8004126:	4403      	add	r3, r0
 8004128:	b29b      	uxth	r3, r3

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800412a:	2b08      	cmp	r3, #8
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
    }

    queuelen += pbuf_clen(p);
 800412c:	9304      	str	r3, [sp, #16]

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800412e:	d903      	bls.n	8004138 <tcp_write+0x22a>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
 8004130:	4658      	mov	r0, fp
 8004132:	f7fe f91b 	bl	800236c <pbuf_free>
      goto memerr;
 8004136:	e78b      	b.n	8004050 <tcp_write+0x142>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8004138:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800413a:	2200      	movs	r2, #0
 800413c:	4659      	mov	r1, fp
 800413e:	9200      	str	r2, [sp, #0]
 8004140:	4433      	add	r3, r6
 8004142:	4620      	mov	r0, r4
 8004144:	f7ff fe58 	bl	8003df8 <tcp_create_segment>
 8004148:	4683      	mov	fp, r0
 800414a:	2800      	cmp	r0, #0
 800414c:	d080      	beq.n	8004050 <tcp_write+0x142>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800414e:	f1b9 0f00 	cmp.w	r9, #0
 8004152:	d002      	beq.n	800415a <tcp_write+0x24c>
      queue = seg;
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 8004154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004156:	6018      	str	r0, [r3, #0]
 8004158:	e000      	b.n	800415c <tcp_write+0x24e>
 800415a:	4681      	mov	r9, r0

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800415c:	9b08      	ldr	r3, [sp, #32]
 800415e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004162:	441e      	add	r6, r3
 8004164:	b2b6      	uxth	r6, r6
 8004166:	e75e      	b.n	8004026 <tcp_write+0x118>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8004168:	f1b8 0f00 	cmp.w	r8, #0
 800416c:	d01b      	beq.n	80041a6 <tcp_write+0x298>
 800416e:	e003      	b.n	8004178 <tcp_write+0x26a>
 8004170:	f1b8 0f00 	cmp.w	r8, #0
 8004174:	d029      	beq.n	80041ca <tcp_write+0x2bc>
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 8004176:	464f      	mov	r7, r9
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8004178:	686e      	ldr	r6, [r5, #4]
 800417a:	b186      	cbz	r6, 800419e <tcp_write+0x290>
      p->tot_len += oversize_used;
 800417c:	8933      	ldrh	r3, [r6, #8]
 800417e:	4443      	add	r3, r8
 8004180:	8133      	strh	r3, [r6, #8]
      if (p->next == NULL) {
 8004182:	6833      	ldr	r3, [r6, #0]
 8004184:	b94b      	cbnz	r3, 800419a <tcp_write+0x28c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8004186:	6873      	ldr	r3, [r6, #4]
 8004188:	8970      	ldrh	r0, [r6, #10]
 800418a:	9905      	ldr	r1, [sp, #20]
 800418c:	4418      	add	r0, r3
 800418e:	4642      	mov	r2, r8
 8004190:	f002 ffe1 	bl	8007156 <memcpy>
        p->len += oversize_used;
 8004194:	8973      	ldrh	r3, [r6, #10]
 8004196:	4443      	add	r3, r8
 8004198:	8173      	strh	r3, [r6, #10]
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800419a:	6836      	ldr	r6, [r6, #0]
 800419c:	e7ed      	b.n	800417a <tcp_write+0x26c>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
 800419e:	892b      	ldrh	r3, [r5, #8]
 80041a0:	4498      	add	r8, r3
 80041a2:	f8a5 8008 	strh.w	r8, [r5, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80041a6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80041aa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
 80041ae:	b147      	cbz	r7, 80041c2 <tcp_write+0x2b4>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80041b0:	4639      	mov	r1, r7
 80041b2:	6868      	ldr	r0, [r5, #4]
 80041b4:	f7fe f9b8 	bl	8002528 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80041b8:	892a      	ldrh	r2, [r5, #8]
 80041ba:	893b      	ldrh	r3, [r7, #8]
 80041bc:	4413      	add	r3, r2
 80041be:	812b      	strh	r3, [r5, #8]
 80041c0:	e007      	b.n	80041d2 <tcp_write+0x2c4>

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80041c2:	b935      	cbnz	r5, 80041d2 <tcp_write+0x2c4>
    pcb->unsent = queue;
 80041c4:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 80041c8:	e005      	b.n	80041d6 <tcp_write+0x2c8>
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80041ca:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80041ce:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
   * is harmless
   */
  if (last_unsent == NULL) {
    pcb->unsent = queue;
  } else {
    last_unsent->next = queue;
 80041d2:	f8c5 9000 	str.w	r9, [r5]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80041d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80041d8:	4453      	add	r3, sl
 80041da:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 80041dc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80041e0:	ebca 0a03 	rsb	sl, sl, r3
  pcb->snd_queuelen = queuelen;
 80041e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  pcb->snd_buf -= len;
 80041e8:	f8a4 a066 	strh.w	sl, [r4, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
 80041ec:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80041f0:	f1bb 0f00 	cmp.w	fp, #0
 80041f4:	d011      	beq.n	800421a <tcp_write+0x30c>
 80041f6:	f8db 400c 	ldr.w	r4, [fp, #12]
 80041fa:	b184      	cbz	r4, 800421e <tcp_write+0x310>
 80041fc:	9b06      	ldr	r3, [sp, #24]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8004206:	b963      	cbnz	r3, 8004222 <tcp_write+0x314>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8004208:	2008      	movs	r0, #8
 800420a:	89a5      	ldrh	r5, [r4, #12]
 800420c:	f7fd fc1a 	bl	8001a44 <lwip_htons>
 8004210:	4328      	orrs	r0, r5
 8004212:	81a0      	strh	r0, [r4, #12]
 8004214:	e001      	b.n	800421a <tcp_write+0x30c>
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 8004216:	2700      	movs	r7, #0
 8004218:	e71a      	b.n	8004050 <tcp_write+0x142>
  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
 800421a:	4658      	mov	r0, fp
 800421c:	e00a      	b.n	8004234 <tcp_write+0x326>
 800421e:	4620      	mov	r0, r4
 8004220:	e008      	b.n	8004234 <tcp_write+0x326>
 8004222:	2000      	movs	r0, #0
 8004224:	e006      	b.n	8004234 <tcp_write+0x326>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8004226:	46ab      	mov	fp, r5
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
  u16_t oversize_used = 0;
 8004228:	46a8      	mov	r8, r5
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  u16_t pos = 0; /* position in 'arg' data */
 800422a:	462e      	mov	r6, r5
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800422c:	462f      	mov	r7, r5
 800422e:	e6f2      	b.n	8004016 <tcp_write+0x108>
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8004230:	f06f 000c 	mvn.w	r0, #12
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 8004234:	b00f      	add	sp, #60	; 0x3c
 8004236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800423a <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800423a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800423e:	2b07      	cmp	r3, #7
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8004240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004242:	4604      	mov	r4, r0
 8004244:	460d      	mov	r5, r1
 8004246:	f001 0603 	and.w	r6, r1, #3

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800424a:	d818      	bhi.n	800427e <tcp_enqueue_flags+0x44>
 800424c:	f001 0102 	and.w	r1, r1, #2
 8004250:	b2c9      	uxtb	r1, r1

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 8004252:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8004256:	2900      	cmp	r1, #0
 8004258:	bf16      	itet	ne
 800425a:	2701      	movne	r7, #1
 800425c:	2700      	moveq	r7, #0
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800425e:	2104      	movne	r1, #4

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 8004260:	2b00      	cmp	r3, #0
 8004262:	d036      	beq.n	80042d2 <tcp_enqueue_flags+0x98>
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8004264:	2200      	movs	r2, #0
 8004266:	4610      	mov	r0, r2
 8004268:	f7fe f8a6 	bl	80023b8 <pbuf_alloc>
 800426c:	4601      	mov	r1, r0
 800426e:	b130      	cbz	r0, 800427e <tcp_enqueue_flags+0x44>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8004270:	9700      	str	r7, [sp, #0]
 8004272:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004274:	462a      	mov	r2, r5
 8004276:	4620      	mov	r0, r4
 8004278:	f7ff fdbe 	bl	8003df8 <tcp_create_segment>
 800427c:	b920      	cbnz	r0, 8004288 <tcp_enqueue_flags+0x4e>
    pcb->flags |= TF_NAGLEMEMERR;
 800427e:	7fa3      	ldrb	r3, [r4, #30]
 8004280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004284:	77a3      	strb	r3, [r4, #30]
 8004286:	e024      	b.n	80042d2 <tcp_enqueue_flags+0x98>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8004288:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800428a:	b90b      	cbnz	r3, 8004290 <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800428c:	66e0      	str	r0, [r4, #108]	; 0x6c
 800428e:	e004      	b.n	800429a <tcp_enqueue_flags+0x60>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	b10a      	cbz	r2, 8004298 <tcp_enqueue_flags+0x5e>
 8004294:	4613      	mov	r3, r2
 8004296:	e7fb      	b.n	8004290 <tcp_enqueue_flags+0x56>
    useg->next = seg;
 8004298:	6018      	str	r0, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80042a0:	b13e      	cbz	r6, 80042b2 <tcp_enqueue_flags+0x78>
    pcb->snd_lbb++;
 80042a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80042a4:	3301      	adds	r3, #1
 80042a6:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
 80042a8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80042ac:	3b01      	subs	r3, #1
 80042ae:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
 80042b2:	07eb      	lsls	r3, r5, #31
    pcb->flags |= TF_FIN;
 80042b4:	bf42      	ittt	mi
 80042b6:	7fa3      	ldrbmi	r3, [r4, #30]
 80042b8:	f043 0320 	orrmi.w	r3, r3, #32
 80042bc:	77a3      	strbmi	r3, [r4, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80042be:	6840      	ldr	r0, [r0, #4]
 80042c0:	f7fe f925 	bl	800250e <pbuf_clen>
 80042c4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80042c8:	4418      	add	r0, r3
 80042ca:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80042ce:	2000      	movs	r0, #0
 80042d0:	e001      	b.n	80042d6 <tcp_enqueue_flags+0x9c>
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80042d2:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 80042d6:	b003      	add	sp, #12
 80042d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042da <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80042da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80042dc:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80042de:	4605      	mov	r5, r0
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80042e0:	b154      	cbz	r4, 80042f8 <tcp_send_fin+0x1e>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	b10b      	cbz	r3, 80042ea <tcp_send_fin+0x10>
 80042e6:	461c      	mov	r4, r3
 80042e8:	e7fb      	b.n	80042e2 <tcp_send_fin+0x8>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80042ea:	68e3      	ldr	r3, [r4, #12]
 80042ec:	8998      	ldrh	r0, [r3, #12]
 80042ee:	f7fd fbac 	bl	8001a4a <lwip_ntohs>
 80042f2:	f010 0707 	ands.w	r7, r0, #7
 80042f6:	d005      	beq.n	8004304 <tcp_send_fin+0x2a>
      pcb->flags |= TF_FIN;
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80042f8:	4628      	mov	r0, r5
 80042fa:	2101      	movs	r1, #1
}
 80042fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      pcb->flags |= TF_FIN;
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8004300:	f7ff bf9b 	b.w	800423a <tcp_enqueue_flags>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8004304:	68e6      	ldr	r6, [r4, #12]
 8004306:	2001      	movs	r0, #1
 8004308:	89b4      	ldrh	r4, [r6, #12]
 800430a:	f7fd fb9b 	bl	8001a44 <lwip_htons>
 800430e:	4320      	orrs	r0, r4
 8004310:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8004312:	7fab      	ldrb	r3, [r5, #30]
 8004314:	f043 0320 	orr.w	r3, r3, #32
 8004318:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
}
 800431a:	4638      	mov	r0, r7
 800431c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800431e <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800431e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004320:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 8004322:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8004324:	f7fd fb94 	bl	8001a50 <lwip_htonl>
 8004328:	2100      	movs	r1, #0
 800432a:	4602      	mov	r2, r0
 800432c:	4620      	mov	r0, r4
 800432e:	f7ff fdc1 	bl	8003eb4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8004332:	4605      	mov	r5, r0
 8004334:	b188      	cbz	r0, 800435a <tcp_send_empty_ack+0x3c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8004336:	7fa3      	ldrb	r3, [r4, #30]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 8004338:	2206      	movs	r2, #6
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800433a:	f023 0303 	bic.w	r3, r3, #3
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 800433e:	9201      	str	r2, [sp, #4]
 8004340:	7a62      	ldrb	r2, [r4, #9]
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8004342:	77a3      	strb	r3, [r4, #30]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	7aa3      	ldrb	r3, [r4, #10]
 8004348:	1d22      	adds	r2, r4, #4
 800434a:	4621      	mov	r1, r4
 800434c:	f7fd f896 	bl	800147c <ip_output>
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
 8004350:	4628      	mov	r0, r5
 8004352:	f7fe f80b 	bl	800236c <pbuf_free>

  return ERR_OK;
 8004356:	2000      	movs	r0, #0
 8004358:	e001      	b.n	800435e <tcp_send_empty_ack+0x40>
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  if (p == NULL) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800435a:	f06f 0001 	mvn.w	r0, #1
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);

  return ERR_OK;
}
 800435e:	b003      	add	sp, #12
 8004360:	bd30      	pop	{r4, r5, pc}
	...

08004364 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8004364:	4b9a      	ldr	r3, [pc, #616]	; (80045d0 <tcp_output+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4298      	cmp	r0, r3
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800436a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436e:	4604      	mov	r4, r0

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8004370:	f000 812a 	beq.w	80045c8 <tcp_output+0x264>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8004374:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8004378:	f8b0 704c 	ldrh.w	r7, [r0, #76]	; 0x4c

  seg = pcb->unsent;
 800437c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800437e:	429f      	cmp	r7, r3
 8004380:	bf28      	it	cs
 8004382:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8004384:	7f83      	ldrb	r3, [r0, #30]
 8004386:	079a      	lsls	r2, r3, #30
 8004388:	d510      	bpl.n	80043ac <tcp_output+0x48>
 800438a:	b92d      	cbnz	r5, 8004398 <tcp_output+0x34>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800438c:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800438e:	b003      	add	sp, #12
 8004390:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8004394:	f7ff bfc3 	b.w	800431e <tcp_send_empty_ack>
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8004398:	68eb      	ldr	r3, [r5, #12]
 800439a:	6858      	ldr	r0, [r3, #4]
 800439c:	f7fd fb5a 	bl	8001a54 <lwip_ntohl>
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
 80043a0:	892b      	ldrh	r3, [r5, #8]
 80043a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	4418      	add	r0, r3
 80043a8:	4287      	cmp	r7, r0
 80043aa:	d3ef      	bcc.n	800438c <tcp_output+0x28>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80043ac:	6f26      	ldr	r6, [r4, #112]	; 0x70
  if (useg != NULL) {
 80043ae:	b926      	cbnz	r6, 80043ba <tcp_output+0x56>
 80043b0:	f104 0804 	add.w	r8, r4, #4
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  }

  if (pcb->rttest == 0) {
    pcb->rttest = tcp_ticks;
 80043b4:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80045d4 <tcp_output+0x270>
 80043b8:	e0a2      	b.n	8004500 <tcp_output+0x19c>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
 80043ba:	6833      	ldr	r3, [r6, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f7      	beq.n	80043b0 <tcp_output+0x4c>
 80043c0:	461e      	mov	r6, r3
 80043c2:	e7fa      	b.n	80043ba <tcp_output+0x56>
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80043c4:	68eb      	ldr	r3, [r5, #12]
 80043c6:	6858      	ldr	r0, [r3, #4]
 80043c8:	f7fd fb44 	bl	8001a54 <lwip_ntohl>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80043cc:	892b      	ldrh	r3, [r5, #8]
 80043ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	4418      	add	r0, r3
 80043d4:	4287      	cmp	r7, r0
 80043d6:	f0c0 8096 	bcc.w	8004506 <tcp_output+0x1a2>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!", 
 80043da:	68eb      	ldr	r3, [r5, #12]
 80043dc:	8998      	ldrh	r0, [r3, #12]
 80043de:	f7fd fb34 	bl	8001a4a <lwip_ntohs>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 80043e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f040 8094 	bne.w	8004512 <tcp_output+0x1ae>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
 80043ea:	682b      	ldr	r3, [r5, #0]
 80043ec:	66e3      	str	r3, [r4, #108]	; 0x6c

    if (pcb->state != SYN_SENT) {
 80043ee:	7e23      	ldrb	r3, [r4, #24]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d00e      	beq.n	8004412 <tcp_output+0xae>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80043f4:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 80043f8:	2010      	movs	r0, #16
 80043fa:	f8bb a00c 	ldrh.w	sl, [fp, #12]
 80043fe:	f7fd fb21 	bl	8001a44 <lwip_htons>
 8004402:	ea4a 0000 	orr.w	r0, sl, r0
 8004406:	f8ab 000c 	strh.w	r0, [fp, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800440a:	7fa3      	ldrb	r3, [r4, #30]
 800440c:	f023 0303 	bic.w	r3, r3, #3
 8004410:	77a3      	strb	r3, [r4, #30]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 8004412:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004414:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8004418:	f7fd fb1a 	bl	8001a50 <lwip_htonl>
 800441c:	f8ca 0008 	str.w	r0, [sl, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 8004420:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8004422:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8004426:	f7fd fb0d 	bl	8001a44 <lwip_htons>

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800442a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800442c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 800442e:	f8aa 000e 	strh.w	r0, [sl, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8004432:	4413      	add	r3, r2
 8004434:	6323      	str	r3, [r4, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8004436:	7aab      	ldrb	r3, [r5, #10]
 8004438:	07db      	lsls	r3, r3, #31
 800443a:	d50c      	bpl.n	8004456 <tcp_output+0xf2>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
 800443c:	4641      	mov	r1, r8
 800443e:	f240 50b4 	movw	r0, #1460	; 0x5b4

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8004442:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
 8004446:	f7fe fe08 	bl	800305a <tcp_eff_send_mss>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800444a:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800444e:	f7fd faff 	bl	8001a50 <lwip_htonl>
 8004452:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 8004456:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800445a:	3301      	adds	r3, #1
    pcb->rtime = 0;
 800445c:	bf04      	itt	eq
 800445e:	2300      	moveq	r3, #0
 8004460:	86a3      	strheq	r3, [r4, #52]	; 0x34
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d06e      	beq.n	8004546 <tcp_output+0x1e2>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  }

  if (pcb->rttest == 0) {
 8004468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800446a:	b93b      	cbnz	r3, 800447c <tcp_output+0x118>
    pcb->rttest = tcp_ticks;
 800446c:	f8d9 3000 	ldr.w	r3, [r9]
 8004470:	63a3      	str	r3, [r4, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 8004472:	68eb      	ldr	r3, [r5, #12]
 8004474:	6858      	ldr	r0, [r3, #4]
 8004476:	f7fd faed 	bl	8001a54 <lwip_ntohl>
 800447a:	63e0      	str	r0, [r4, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800447c:	6868      	ldr	r0, [r5, #4]
 800447e:	68ea      	ldr	r2, [r5, #12]
 8004480:	6843      	ldr	r3, [r0, #4]

  seg->p->len -= len;
 8004482:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8004484:	6042      	str	r2, [r0, #4]
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	b29b      	uxth	r3, r3

  seg->p->len -= len;
 800448a:	1ac9      	subs	r1, r1, r3
 800448c:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800448e:	8901      	ldrh	r1, [r0, #8]
 8004490:	1acb      	subs	r3, r1, r3
 8004492:	8103      	strh	r3, [r0, #8]

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	7413      	strb	r3, [r2, #16]
 8004498:	7453      	strb	r3, [r2, #17]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 800449a:	2206      	movs	r2, #6
 800449c:	9201      	str	r2, [sp, #4]
 800449e:	7a62      	ldrb	r2, [r4, #9]
 80044a0:	9200      	str	r2, [sp, #0]
 80044a2:	7aa3      	ldrb	r3, [r4, #10]
 80044a4:	4642      	mov	r2, r8
 80044a6:	4621      	mov	r1, r4
 80044a8:	f7fc ffe8 	bl	800147c <ip_output>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }

    tcp_output_segment(seg, pcb);
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80044ac:	68eb      	ldr	r3, [r5, #12]
 80044ae:	6858      	ldr	r0, [r3, #4]
 80044b0:	f7fd fad0 	bl	8001a54 <lwip_ntohl>
 80044b4:	68eb      	ldr	r3, [r5, #12]
 80044b6:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 80044ba:	4682      	mov	sl, r0
 80044bc:	8998      	ldrh	r0, [r3, #12]
 80044be:	f7fd fac4 	bl	8001a4a <lwip_ntohs>
 80044c2:	f010 0003 	ands.w	r0, r0, #3
 80044c6:	bf18      	it	ne
 80044c8:	2001      	movne	r0, #1
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80044ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }

    tcp_output_segment(seg, pcb);
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80044cc:	4458      	add	r0, fp
 80044ce:	4450      	add	r0, sl
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80044d0:	1a1b      	subs	r3, r3, r0
 80044d2:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80044d4:	68eb      	ldr	r3, [r5, #12]
    }

    tcp_output_segment(seg, pcb);
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
      pcb->snd_nxt = snd_nxt;
 80044d6:	bfb8      	it	lt
 80044d8:	6520      	strlt	r0, [r4, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80044da:	8998      	ldrh	r0, [r3, #12]
 80044dc:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80044e0:	f7fd fab3 	bl	8001a4a <lwip_ntohs>
 80044e4:	f010 0003 	ands.w	r0, r0, #3
 80044e8:	bf18      	it	ne
 80044ea:	2001      	movne	r0, #1
 80044ec:	eb10 0f0a 	cmn.w	r0, sl
 80044f0:	d05b      	beq.n	80045aa <tcp_output+0x246>
      seg->next = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	602b      	str	r3, [r5, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80044f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80044f8:	bb6b      	cbnz	r3, 8004556 <tcp_output+0x1f2>
        pcb->unacked = seg;
 80044fa:	6725      	str	r5, [r4, #112]	; 0x70
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
 80044fc:	462e      	mov	r6, r5
 80044fe:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8004500:	2d00      	cmp	r5, #0
 8004502:	f47f af5f 	bne.w	80043c4 <tcp_output+0x60>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8004506:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d153      	bne.n	80045b4 <tcp_output+0x250>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800450c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8004510:	e050      	b.n	80045b4 <tcp_output+0x250>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 8004512:	7fa2      	ldrb	r2, [r4, #30]
 8004514:	f012 0f44 	tst.w	r2, #68	; 0x44
 8004518:	f47f af67 	bne.w	80043ea <tcp_output+0x86>
 800451c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800451e:	b143      	cbz	r3, 8004532 <tcp_output+0x1ce>
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	2900      	cmp	r1, #0
 8004524:	f47f af61 	bne.w	80043ea <tcp_output+0x86>
 8004528:	8919      	ldrh	r1, [r3, #8]
 800452a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800452c:	4299      	cmp	r1, r3
 800452e:	f4bf af5c 	bcs.w	80043ea <tcp_output+0x86>
 8004532:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8004536:	2b00      	cmp	r3, #0
 8004538:	f43f af57 	beq.w	80043ea <tcp_output+0x86>
 800453c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8004540:	2b07      	cmp	r3, #7
 8004542:	d93c      	bls.n	80045be <tcp_output+0x25a>
 8004544:	e751      	b.n	80043ea <tcp_output+0x86>
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
    netif = ip_route(&(pcb->remote_ip));
 8004546:	4640      	mov	r0, r8
 8004548:	f7fc fe62 	bl	8001210 <ip_route>
    if (netif == NULL) {
 800454c:	2800      	cmp	r0, #0
 800454e:	d0ad      	beq.n	80044ac <tcp_output+0x148>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 8004550:	6843      	ldr	r3, [r0, #4]
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	e788      	b.n	8004468 <tcp_output+0x104>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 8004556:	68eb      	ldr	r3, [r5, #12]
 8004558:	6858      	ldr	r0, [r3, #4]
 800455a:	f7fd fa7b 	bl	8001a54 <lwip_ntohl>
 800455e:	68f3      	ldr	r3, [r6, #12]
 8004560:	4682      	mov	sl, r0
 8004562:	6858      	ldr	r0, [r3, #4]
 8004564:	f7fd fa76 	bl	8001a54 <lwip_ntohl>
 8004568:	ebc0 000a 	rsb	r0, r0, sl
 800456c:	2800      	cmp	r0, #0
 800456e:	da1a      	bge.n	80045a6 <tcp_output+0x242>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8004570:	f104 0a70 	add.w	sl, r4, #112	; 0x70
          while (*cur_seg &&
 8004574:	f8da 3000 	ldr.w	r3, [sl]
 8004578:	b92b      	cbnz	r3, 8004586 <tcp_output+0x222>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
 800457a:	f8da 3000 	ldr.w	r3, [sl]
 800457e:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 8004580:	f8ca 5000 	str.w	r5, [sl]
 8004584:	e014      	b.n	80045b0 <tcp_output+0x24c>
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	6858      	ldr	r0, [r3, #4]
 800458a:	f7fd fa63 	bl	8001a54 <lwip_ntohl>
 800458e:	68eb      	ldr	r3, [r5, #12]
 8004590:	4683      	mov	fp, r0
 8004592:	6858      	ldr	r0, [r3, #4]
 8004594:	f7fd fa5e 	bl	8001a54 <lwip_ntohl>
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 8004598:	ebc0 000b 	rsb	r0, r0, fp
 800459c:	2800      	cmp	r0, #0
 800459e:	daec      	bge.n	800457a <tcp_output+0x216>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80045a0:	f8da a000 	ldr.w	sl, [sl]
 80045a4:	e7e6      	b.n	8004574 <tcp_output+0x210>
          }
          seg->next = (*cur_seg);
          (*cur_seg) = seg;
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80045a6:	6035      	str	r5, [r6, #0]
 80045a8:	e7a8      	b.n	80044fc <tcp_output+0x198>
          useg = useg->next;
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7fe f97e 	bl	80028ac <tcp_seg_free>
 80045b0:	4635      	mov	r5, r6
 80045b2:	e7a3      	b.n	80044fc <tcp_output+0x198>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80045b4:	7fa3      	ldrb	r3, [r4, #30]
 80045b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ba:	77a3      	strb	r3, [r4, #30]
  return ERR_OK;
 80045bc:	e004      	b.n	80045c8 <tcp_output+0x264>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 80045be:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 80045c2:	f47f af12 	bne.w	80043ea <tcp_output+0x86>
 80045c6:	e79e      	b.n	8004506 <tcp_output+0x1a2>
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 80045c8:	2000      	movs	r0, #0
 80045ca:	b003      	add	sp, #12
 80045cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d0:	2000543c 	.word	0x2000543c
 80045d4:	20005428 	.word	0x20005428

080045d8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80045d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045dc:	4681      	mov	r9, r0
 80045de:	4688      	mov	r8, r1
 80045e0:	4616      	mov	r6, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80045e2:	2114      	movs	r1, #20
 80045e4:	2200      	movs	r2, #0
 80045e6:	2001      	movs	r0, #1
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80045e8:	461f      	mov	r7, r3
 80045ea:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 80045ee:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80045f2:	f7fd fee1 	bl	80023b8 <pbuf_alloc>
  if (p == NULL) {
 80045f6:	4605      	mov	r5, r0
 80045f8:	b368      	cbz	r0, 8004656 <tcp_rst+0x7e>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80045fa:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
 80045fc:	4658      	mov	r0, fp
 80045fe:	f7fd fa21 	bl	8001a44 <lwip_htons>
 8004602:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
 8004604:	4650      	mov	r0, sl
 8004606:	f7fd fa1d 	bl	8001a44 <lwip_htons>
 800460a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
 800460c:	4648      	mov	r0, r9
 800460e:	f7fd fa1f 	bl	8001a50 <lwip_htonl>
 8004612:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
 8004614:	4640      	mov	r0, r8
 8004616:	f7fd fa1b 	bl	8001a50 <lwip_htonl>
 800461a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800461c:	f245 0014 	movw	r0, #20500	; 0x5014
 8004620:	f7fd fa10 	bl	8001a44 <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8004624:	220b      	movs	r2, #11
 8004626:	73a2      	strb	r2, [r4, #14]
 8004628:	2268      	movs	r2, #104	; 0x68
 800462a:	2300      	movs	r3, #0
 800462c:	73e2      	strb	r2, [r4, #15]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
 800462e:	2206      	movs	r2, #6
  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = htons(local_port);
  tcphdr->dest = htons(remote_port);
  tcphdr->seqno = htonl(seqno);
  tcphdr->ackno = htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8004630:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  tcphdr->chksum = 0;
 8004632:	7423      	strb	r3, [r4, #16]
 8004634:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 8004636:	74a3      	strb	r3, [r4, #18]
 8004638:	74e3      	strb	r3, [r4, #19]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
 800463a:	4631      	mov	r1, r6
 800463c:	9201      	str	r2, [sp, #4]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	463a      	mov	r2, r7
 8004642:	23ff      	movs	r3, #255	; 0xff
 8004644:	4628      	mov	r0, r5
 8004646:	f7fc ff19 	bl	800147c <ip_output>
  pbuf_free(p);
 800464a:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800464c:	b003      	add	sp, #12
 800464e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  pbuf_free(p);
 8004652:	f7fd be8b 	b.w	800236c <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8004656:	b003      	add	sp, #12
 8004658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800465c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800465c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800465e:	b410      	push	{r4}
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8004660:	b192      	cbz	r2, 8004688 <tcp_rexmit_rto+0x2c>
 8004662:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8004664:	680b      	ldr	r3, [r1, #0]
 8004666:	b10b      	cbz	r3, 800466c <tcp_rexmit_rto+0x10>
 8004668:	4619      	mov	r1, r3
 800466a:	e7fb      	b.n	8004664 <tcp_rexmit_rto+0x8>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800466c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 800466e:	600c      	str	r4, [r1, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8004670:	66c2      	str	r2, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
 8004672:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8004676:	6703      	str	r3, [r0, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
 8004678:	3201      	adds	r2, #1
 800467a:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800467e:	6383      	str	r3, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8004680:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;

  /* Do the actual retransmission */
  tcp_output(pcb);
 8004684:	f7ff be6e 	b.w	8004364 <tcp_output>
}
 8004688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800468c:	4770      	bx	lr

0800468e <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800468e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8004690:	6f05      	ldr	r5, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8004692:	4604      	mov	r4, r0
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8004694:	b315      	cbz	r5, 80046dc <tcp_rexmit+0x4e>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8004696:	682b      	ldr	r3, [r5, #0]
 8004698:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800469a:	f100 066c 	add.w	r6, r0, #108	; 0x6c
  while (*cur_seg &&
 800469e:	6833      	ldr	r3, [r6, #0]
 80046a0:	b93b      	cbnz	r3, 80046b2 <tcp_rexmit+0x24>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 80046a2:	6833      	ldr	r3, [r6, #0]
 80046a4:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 80046a6:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	b983      	cbnz	r3, 80046ce <tcp_rexmit+0x40>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80046ac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80046b0:	e00d      	b.n	80046ce <tcp_rexmit+0x40>
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	6858      	ldr	r0, [r3, #4]
 80046b6:	f7fd f9cd 	bl	8001a54 <lwip_ntohl>
 80046ba:	68eb      	ldr	r3, [r5, #12]
 80046bc:	4607      	mov	r7, r0
 80046be:	6858      	ldr	r0, [r3, #4]
 80046c0:	f7fd f9c8 	bl	8001a54 <lwip_ntohl>
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 80046c4:	1a38      	subs	r0, r7, r0
 80046c6:	2800      	cmp	r0, #0
 80046c8:	daeb      	bge.n	80046a2 <tcp_rexmit+0x14>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80046ca:	6836      	ldr	r6, [r6, #0]
 80046cc:	e7e7      	b.n	800469e <tcp_rexmit+0x10>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 80046ce:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80046d2:	3301      	adds	r3, #1
 80046d4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	63a3      	str	r3, [r4, #56]	; 0x38
 80046dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046de <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80046de:	6f03      	ldr	r3, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80046e0:	b510      	push	{r4, lr}
 80046e2:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80046e4:	b313      	cbz	r3, 800472c <tcp_rexmit_fast+0x4e>
 80046e6:	7f83      	ldrb	r3, [r0, #30]
 80046e8:	075b      	lsls	r3, r3, #29
 80046ea:	d41f      	bmi.n	800472c <tcp_rexmit_fast+0x4e>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80046ec:	f7ff ffcf 	bl	800468e <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 80046f0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 80046f4:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 80046f8:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
 80046fa:	bf8b      	itete	hi
 80046fc:	0852      	lsrhi	r2, r2, #1
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 80046fe:	085b      	lsrls	r3, r3, #1
    tcp_rexmit(pcb);

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
      pcb->ssthresh = pcb->snd_wnd / 2;
 8004700:	f8a4 204e 	strhhi.w	r2, [r4, #78]	; 0x4e
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 8004704:	f8a4 304e 	strhls.w	r3, [r4, #78]	; 0x4e
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
 8004708:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800470a:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800470e:	0053      	lsls	r3, r2, #1
 8004710:	4299      	cmp	r1, r3
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 8004712:	bfb8      	it	lt
 8004714:	f8a4 304e 	strhlt.w	r3, [r4, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8004718:	4413      	add	r3, r2
 800471a:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 800471e:	4413      	add	r3, r2
 8004720:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
 8004724:	7fa3      	ldrb	r3, [r4, #30]
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	77a3      	strb	r3, [r4, #30]
 800472c:	bd10      	pop	{r4, pc}

0800472e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
 800472e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004730:	4604      	mov	r4, r0
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 8004732:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8004734:	3801      	subs	r0, #1
 8004736:	f7fd f98b 	bl	8001a50 <lwip_htonl>
 800473a:	2100      	movs	r1, #0
 800473c:	4602      	mov	r2, r0
 800473e:	4620      	mov	r0, r4
 8004740:	f7ff fbb8 	bl	8003eb4 <tcp_output_alloc_header.constprop.0>
  if(p == NULL) {
 8004744:	4605      	mov	r5, r0
 8004746:	b170      	cbz	r0, 8004766 <tcp_keepalive+0x38>
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
 8004748:	2100      	movs	r1, #0
 800474a:	2206      	movs	r2, #6
 800474c:	e88d 0006 	stmia.w	sp, {r1, r2}
 8004750:	7aa3      	ldrb	r3, [r4, #10]
 8004752:	1d22      	adds	r2, r4, #4
 8004754:	4621      	mov	r1, r4
 8004756:	f7fc fe91 	bl	800147c <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 800475a:	4628      	mov	r0, r5

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 800475c:	b003      	add	sp, #12
 800475e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 8004762:	f7fd be03 	b.w	800236c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 8004766:	b003      	add	sp, #12
 8004768:	bd30      	pop	{r4, r5, pc}

0800476a <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800476a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800476e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8004770:	4606      	mov	r6, r0
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;

  if(seg == NULL) {
 8004772:	b915      	cbnz	r5, 800477a <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8004774:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
  }
  if(seg == NULL) {
 8004776:	2d00      	cmp	r5, #0
 8004778:	d03d      	beq.n	80047f6 <tcp_zero_window_probe+0x8c>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800477a:	68eb      	ldr	r3, [r5, #12]
 800477c:	8998      	ldrh	r0, [r3, #12]
 800477e:	f7fd f964 	bl	8001a4a <lwip_ntohs>
 8004782:	f010 0001 	ands.w	r0, r0, #1
 8004786:	bf18      	it	ne
 8004788:	892c      	ldrhne	r4, [r5, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800478a:	68eb      	ldr	r3, [r5, #12]
  }
  if(seg == NULL) {
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800478c:	bf16      	itet	ne
 800478e:	fab4 f484 	clzne	r4, r4
 8004792:	4604      	moveq	r4, r0
 8004794:	0964      	lsrne	r4, r4, #5
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	f084 0101 	eor.w	r1, r4, #1
 800479c:	4630      	mov	r0, r6
 800479e:	f7ff fb89 	bl	8003eb4 <tcp_output_alloc_header.constprop.0>
  if(p == NULL) {
 80047a2:	4607      	mov	r7, r0
 80047a4:	b338      	cbz	r0, 80047f6 <tcp_zero_window_probe+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80047a6:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 80047aa:	b154      	cbz	r4, 80047c2 <tcp_zero_window_probe+0x58>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80047ac:	2011      	movs	r0, #17
 80047ae:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 80047b2:	f7fd f947 	bl	8001a44 <lwip_htons>
 80047b6:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 80047ba:	4320      	orrs	r0, r4
 80047bc:	f8a8 000c 	strh.w	r0, [r8, #12]
 80047c0:	e009      	b.n	80047d6 <tcp_zero_window_probe+0x6c>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80047c2:	6868      	ldr	r0, [r5, #4]
 80047c4:	892a      	ldrh	r2, [r5, #8]
 80047c6:	8903      	ldrh	r3, [r0, #8]
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2201      	movs	r2, #1
 80047ce:	f108 0114 	add.w	r1, r8, #20
 80047d2:	f7fd ff0e 	bl	80025f2 <pbuf_copy_partial>
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
 80047d6:	2100      	movs	r1, #0
 80047d8:	2206      	movs	r2, #6
 80047da:	e88d 0006 	stmia.w	sp, {r1, r2}
 80047de:	7ab3      	ldrb	r3, [r6, #10]
 80047e0:	1d32      	adds	r2, r6, #4
 80047e2:	4631      	mov	r1, r6
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7fc fe49 	bl	800147c <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 80047ea:	4638      	mov	r0, r7

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 80047ec:	b002      	add	sp, #8
 80047ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 80047f2:	f7fd bdbb 	b.w	800236c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 80047f6:	b002      	add	sp, #8
 80047f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047fc <tcp_timer_needed>:

#else /* LWIP_TIMERS */
/* Satisfy the TCP code which calls this function */
void
tcp_timer_needed(void)
{
 80047fc:	4770      	bx	lr
	...

08004800 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
 8004804:	f8d0 8004 	ldr.w	r8, [r0, #4]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 8004808:	8903      	ldrh	r3, [r0, #8]
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800480a:	460f      	mov	r7, r1
 800480c:	f898 1000 	ldrb.w	r1, [r8]
 8004810:	f001 010f 	and.w	r1, r1, #15

  iphdr = (struct ip_hdr *)p->payload;

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 8004814:	1c8a      	adds	r2, r1, #2
 8004816:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800481a:	b085      	sub	sp, #20
 800481c:	4605      	mov	r5, r0

  iphdr = (struct ip_hdr *)p->payload;

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 800481e:	db05      	blt.n	800482c <udp_input+0x2c>
 8004820:	0089      	lsls	r1, r1, #2
 8004822:	4249      	negs	r1, r1
 8004824:	f7fd fd76 	bl	8002314 <pbuf_header>
 8004828:	4604      	mov	r4, r0
 800482a:	b128      	cbz	r0, 8004838 <udp_input+0x38>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
 800482c:	4628      	mov	r0, r5
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
 800482e:	b005      	add	sp, #20
 8004830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
 8004834:	f7fd bd9a 	b.w	800236c <pbuf_free>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 8004838:	4e47      	ldr	r6, [pc, #284]	; (8004958 <udp_input+0x158>)
    snmp_inc_udpinerrors();
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800483a:	f8d5 b004 	ldr.w	fp, [r5, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 800483e:	6830      	ldr	r0, [r6, #0]
 8004840:	4639      	mov	r1, r7
 8004842:	f7fc fe37 	bl	80014b4 <ip4_addr_isbroadcast>
 8004846:	4681      	mov	r9, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 8004848:	f8bb 0000 	ldrh.w	r0, [fp]
 800484c:	f7fd f8fd 	bl	8001a4a <lwip_ntohs>
 8004850:	4682      	mov	sl, r0
  dest = ntohs(udphdr->dest);
 8004852:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 8004856:	f7fd f8f8 	bl	8001a4a <lwip_ntohs>

#if LWIP_DHCP
  pcb = NULL;
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
 800485a:	2844      	cmp	r0, #68	; 0x44

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
  dest = ntohs(udphdr->dest);
 800485c:	9003      	str	r0, [sp, #12]

#if LWIP_DHCP
  pcb = NULL;
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
 800485e:	d110      	bne.n	8004882 <udp_input+0x82>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
 8004860:	f1ba 0f43 	cmp.w	sl, #67	; 0x43
 8004864:	d13f      	bne.n	80048e6 <udp_input+0xe6>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d03c      	beq.n	80048e6 <udp_input+0xe6>
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d039      	beq.n	80048e6 <udp_input+0xe6>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	2a00      	cmp	r2, #0
 8004876:	d06d      	beq.n	8004954 <udp_input+0x154>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
 8004878:	4938      	ldr	r1, [pc, #224]	; (800495c <udp_input+0x15c>)
    if (src == DHCP_SERVER_PORT) {
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 800487a:	6809      	ldr	r1, [r1, #0]
 800487c:	428a      	cmp	r2, r1
 800487e:	d132      	bne.n	80048e6 <udp_input+0xe6>
 8004880:	e068      	b.n	8004954 <udp_input+0x154>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <udp_input+0x160>)

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 8004884:	f8d6 c000 	ldr.w	ip, [r6]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004888:	f8d3 e000 	ldr.w	lr, [r3]
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 800488c:	4b33      	ldr	r3, [pc, #204]	; (800495c <udp_input+0x15c>)
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 800488e:	4621      	mov	r1, r4
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 8004890:	f8d3 b000 	ldr.w	fp, [r3]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004894:	4673      	mov	r3, lr
 8004896:	b32b      	cbz	r3, 80048e4 <udp_input+0xe4>
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
 8004898:	8a5a      	ldrh	r2, [r3, #18]
 800489a:	9803      	ldr	r0, [sp, #12]
 800489c:	4282      	cmp	r2, r0
 800489e:	d11e      	bne.n	80048de <udp_input+0xde>
 80048a0:	681a      	ldr	r2, [r3, #0]
        if (
 80048a2:	f1b9 0f00 	cmp.w	r9, #0
 80048a6:	d100      	bne.n	80048aa <udp_input+0xaa>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 80048a8:	b15a      	cbz	r2, 80048c2 <udp_input+0xc2>
 80048aa:	4562      	cmp	r2, ip
 80048ac:	d009      	beq.n	80048c2 <udp_input+0xc2>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 80048ae:	f1b9 0f00 	cmp.w	r9, #0
 80048b2:	d014      	beq.n	80048de <udp_input+0xde>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 80048b4:	b12a      	cbz	r2, 80048c2 <udp_input+0xc2>
 80048b6:	ea82 020c 	eor.w	r2, r2, ip
 80048ba:	4610      	mov	r0, r2
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	4210      	tst	r0, r2
 80048c0:	d10d      	bne.n	80048de <udp_input+0xde>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
 80048c2:	b924      	cbnz	r4, 80048ce <udp_input+0xce>
 80048c4:	7c1a      	ldrb	r2, [r3, #16]
 80048c6:	f012 0f04 	tst.w	r2, #4
 80048ca:	bf08      	it	eq
 80048cc:	461c      	moveq	r4, r3
            uncon_pcb = pcb;
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 80048ce:	8a9a      	ldrh	r2, [r3, #20]
 80048d0:	4552      	cmp	r2, sl
 80048d2:	d104      	bne.n	80048de <udp_input+0xde>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	d035      	beq.n	8004946 <udp_input+0x146>
 80048da:	455a      	cmp	r2, fp
 80048dc:	d033      	beq.n	8004946 <udp_input+0x146>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80048de:	4619      	mov	r1, r3
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	e7d8      	b.n	8004896 <udp_input+0x96>
      pcb = uncon_pcb;
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 80048e4:	b924      	cbnz	r4, 80048f0 <udp_input+0xf0>
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6833      	ldr	r3, [r6, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d19e      	bne.n	800482c <udp_input+0x2c>
 80048ee:	2400      	movs	r4, #0
          goto end;
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 80048f0:	f06f 0107 	mvn.w	r1, #7
 80048f4:	4628      	mov	r0, r5
 80048f6:	f7fd fd0d 	bl	8002314 <pbuf_header>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d196      	bne.n	800482c <udp_input+0x2c>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 80048fe:	b164      	cbz	r4, 800491a <udp_input+0x11a>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8004900:	69a6      	ldr	r6, [r4, #24]
 8004902:	2e00      	cmp	r6, #0
 8004904:	d092      	beq.n	800482c <udp_input+0x2c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8004906:	f8cd a000 	str.w	sl, [sp]
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <udp_input+0x15c>)
 800490c:	69e0      	ldr	r0, [r4, #28]
 800490e:	462a      	mov	r2, r5
 8004910:	4621      	mov	r1, r4
 8004912:	47b0      	blx	r6
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
 8004914:	b005      	add	sp, #20
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 800491a:	f1b9 0f00 	cmp.w	r9, #0
 800491e:	d185      	bne.n	800482c <udp_input+0x2c>
 8004920:	6833      	ldr	r3, [r6, #0]
 8004922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004926:	2be0      	cmp	r3, #224	; 0xe0
 8004928:	d080      	beq.n	800482c <udp_input+0x2c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 800492a:	f898 1000 	ldrb.w	r1, [r8]
 800492e:	f001 010f 	and.w	r1, r1, #15
 8004932:	3102      	adds	r1, #2
 8004934:	0089      	lsls	r1, r1, #2
 8004936:	4628      	mov	r0, r5
 8004938:	f7fd fcec 	bl	8002314 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 800493c:	2103      	movs	r1, #3
 800493e:	4628      	mov	r0, r5
 8004940:	f7fc fc06 	bl	8001150 <icmp_dest_unreach>
 8004944:	e772      	b.n	800482c <udp_input+0x2c>
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 8004946:	b129      	cbz	r1, 8004954 <udp_input+0x154>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	60ca      	str	r2, [r1, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 800494c:	4a04      	ldr	r2, [pc, #16]	; (8004960 <udp_input+0x160>)
        /* the first fully matching PCB */
        if (prev != NULL) {
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 800494e:	f8c3 e00c 	str.w	lr, [r3, #12]
          udp_pcbs = pcb;
 8004952:	6013      	str	r3, [r2, #0]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004954:	461c      	mov	r4, r3
 8004956:	e7cb      	b.n	80048f0 <udp_input+0xf0>
 8004958:	20002bfc 	.word	0x20002bfc
 800495c:	20002bf4 	.word	0x20002bf4
 8004960:	20005440 	.word	0x20005440

08004964 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 8004964:	b5f0      	push	{r4, r5, r6, r7, lr}
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8004966:	4e24      	ldr	r6, [pc, #144]	; (80049f8 <udp_bind+0x94>)
 8004968:	6837      	ldr	r7, [r6, #0]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800496a:	2300      	movs	r3, #0
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800496c:	463c      	mov	r4, r7
 800496e:	b1c4      	cbz	r4, 80049a2 <udp_bind+0x3e>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8004970:	4284      	cmp	r4, r0
 8004972:	d013      	beq.n	800499c <udp_bind+0x38>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 8004974:	8a65      	ldrh	r5, [r4, #18]
 8004976:	4295      	cmp	r5, r2
 8004978:	d111      	bne.n	800499e <udp_bind+0x3a>
 800497a:	b914      	cbnz	r4, 8004982 <udp_bind+0x1e>
           ip_addr_isany(ipaddr) ||
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 800497c:	f06f 0007 	mvn.w	r0, #7
 8004980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 8004982:	f8d4 e000 	ldr.w	lr, [r4]
 8004986:	f1be 0f00 	cmp.w	lr, #0
 800498a:	d0f7      	beq.n	800497c <udp_bind+0x18>
 800498c:	2900      	cmp	r1, #0
 800498e:	d0f5      	beq.n	800497c <udp_bind+0x18>
           ip_addr_isany(ipaddr) ||
 8004990:	680d      	ldr	r5, [r1, #0]
 8004992:	2d00      	cmp	r5, #0
 8004994:	d0f2      	beq.n	800497c <udp_bind+0x18>
 8004996:	45ae      	cmp	lr, r5
 8004998:	d101      	bne.n	800499e <udp_bind+0x3a>
 800499a:	e7ef      	b.n	800497c <udp_bind+0x18>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 800499c:	2301      	movs	r3, #1
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800499e:	68e4      	ldr	r4, [r4, #12]
 80049a0:	e7e5      	b.n	800496e <udp_bind+0xa>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 80049a2:	b101      	cbz	r1, 80049a6 <udp_bind+0x42>
 80049a4:	6809      	ldr	r1, [r1, #0]
 80049a6:	6001      	str	r1, [r0, #0]

  /* no port specified? */
  if (port == 0) {
 80049a8:	b9ea      	cbnz	r2, 80049e6 <udp_bind+0x82>
 80049aa:	4c14      	ldr	r4, [pc, #80]	; (80049fc <udp_bind+0x98>)
 80049ac:	8821      	ldrh	r1, [r4, #0]
 80049ae:	f44f 4580 	mov.w	r5, #16384	; 0x4000
{
  u16_t n = 0;
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80049b2:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80049b6:	4561      	cmp	r1, ip
 80049b8:	bf1a      	itte	ne
 80049ba:	1c4a      	addne	r2, r1, #1
 80049bc:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80049be:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80049c2:	46be      	mov	lr, r7
 80049c4:	f1be 0f00 	cmp.w	lr, #0
 80049c8:	d00c      	beq.n	80049e4 <udp_bind+0x80>
    if (pcb->local_port == udp_port) {
 80049ca:	f8be 1012 	ldrh.w	r1, [lr, #18]
 80049ce:	4291      	cmp	r1, r2
 80049d0:	d105      	bne.n	80049de <udp_bind+0x7a>
 80049d2:	3d01      	subs	r5, #1
 80049d4:	b2ad      	uxth	r5, r5
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	d1ed      	bne.n	80049b6 <udp_bind+0x52>
 80049da:	8022      	strh	r2, [r4, #0]
 80049dc:	e7ce      	b.n	800497c <udp_bind+0x18>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80049de:	f8de e00c 	ldr.w	lr, [lr, #12]
 80049e2:	e7ef      	b.n	80049c4 <udp_bind+0x60>
 80049e4:	8022      	strh	r2, [r4, #0]
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  }
  pcb->local_port = port;
 80049e6:	8242      	strh	r2, [r0, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80049e8:	b91b      	cbnz	r3, 80049f2 <udp_bind+0x8e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80049ea:	60c7      	str	r7, [r0, #12]
    udp_pcbs = pcb;
 80049ec:	6030      	str	r0, [r6, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 80049ee:	4618      	mov	r0, r3
 80049f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f2:	2000      	movs	r0, #0
}
 80049f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20005440 	.word	0x20005440
 80049fc:	2000000a 	.word	0x2000000a

08004a00 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8004a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a04:	4692      	mov	sl, r2
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8004a06:	8a42      	ldrh	r2, [r0, #18]
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8004a08:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	460e      	mov	r6, r1
 8004a10:	4699      	mov	r9, r3
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8004a12:	b132      	cbz	r2, 8004a22 <udp_sendto_if+0x22>
      return err;
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8004a14:	2108      	movs	r1, #8
 8004a16:	4630      	mov	r0, r6
 8004a18:	f7fd fc7c 	bl	8002314 <pbuf_header>
 8004a1c:	b938      	cbnz	r0, 8004a2e <udp_sendto_if+0x2e>
 8004a1e:	4635      	mov	r5, r6
 8004a20:	e012      	b.n	8004a48 <udp_sendto_if+0x48>
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8004a22:	4601      	mov	r1, r0
 8004a24:	f7ff ff9e 	bl	8004964 <udp_bind>
    if (err != ERR_OK) {
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d0f3      	beq.n	8004a14 <udp_sendto_if+0x14>
 8004a2c:	e046      	b.n	8004abc <udp_sendto_if+0xbc>
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2108      	movs	r1, #8
 8004a32:	2001      	movs	r0, #1
 8004a34:	f7fd fcc0 	bl	80023b8 <pbuf_alloc>
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8004a38:	4605      	mov	r5, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d037      	beq.n	8004aae <udp_sendto_if+0xae>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
    }
    if (p->tot_len != 0) {
 8004a3e:	8933      	ldrh	r3, [r6, #8]
 8004a40:	b113      	cbz	r3, 8004a48 <udp_sendto_if+0x48>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8004a42:	4631      	mov	r1, r6
 8004a44:	f7fd fd7e 	bl	8002544 <pbuf_chain>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  udphdr->src = htons(pcb->local_port);
 8004a48:	8a60      	ldrh	r0, [r4, #18]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8004a4a:	686f      	ldr	r7, [r5, #4]
  udphdr->src = htons(pcb->local_port);
 8004a4c:	f7fc fffa 	bl	8001a44 <lwip_htons>
 8004a50:	8038      	strh	r0, [r7, #0]
  udphdr->dest = htons(dst_port);
 8004a52:	4648      	mov	r0, r9
 8004a54:	f7fc fff6 	bl	8001a44 <lwip_htons>
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 8004a58:	2300      	movs	r3, #0
 8004a5a:	71bb      	strb	r3, [r7, #6]
 8004a5c:	71fb      	strb	r3, [r7, #7]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 8004a5e:	6823      	ldr	r3, [r4, #0]
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  udphdr->src = htons(pcb->local_port);
  udphdr->dest = htons(dst_port);
 8004a60:	8078      	strh	r0, [r7, #2]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 8004a62:	b913      	cbnz	r3, 8004a6a <udp_sendto_if+0x6a>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 8004a64:	f108 0904 	add.w	r9, r8, #4
 8004a68:	e00a      	b.n	8004a80 <udp_sendto_if+0x80>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 8004a6a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d005      	beq.n	8004a7e <udp_sendto_if+0x7e>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 8004a72:	42b5      	cmp	r5, r6
 8004a74:	d01e      	beq.n	8004ab4 <udp_sendto_if+0xb4>
        /* free the header pbuf */
        pbuf_free(q);
 8004a76:	4628      	mov	r0, r5
 8004a78:	f7fd fc78 	bl	800236c <pbuf_free>
 8004a7c:	e01a      	b.n	8004ab4 <udp_sendto_if+0xb4>
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 8004a7e:	46a1      	mov	r9, r4
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 8004a80:	8928      	ldrh	r0, [r5, #8]
 8004a82:	f7fc ffdf 	bl	8001a44 <lwip_htons>
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 8004a86:	2211      	movs	r2, #17
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 8004a88:	80b8      	strh	r0, [r7, #4]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 8004a8a:	7aa3      	ldrb	r3, [r4, #10]
 8004a8c:	f8cd 8008 	str.w	r8, [sp, #8]
 8004a90:	9201      	str	r2, [sp, #4]
 8004a92:	7a62      	ldrb	r2, [r4, #9]
 8004a94:	9200      	str	r2, [sp, #0]
 8004a96:	4649      	mov	r1, r9
 8004a98:	4652      	mov	r2, sl
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f7fc fc96 	bl	80013cc <ip_output_if>
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8004aa0:	42b5      	cmp	r5, r6
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 8004aa2:	4604      	mov	r4, r0
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8004aa4:	d009      	beq.n	8004aba <udp_sendto_if+0xba>
    /* free the header pbuf */
    pbuf_free(q);
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f7fd fc60 	bl	800236c <pbuf_free>
 8004aac:	e005      	b.n	8004aba <udp_sendto_if+0xba>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8004aae:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab2:	e003      	b.n	8004abc <udp_sendto_if+0xbc>
        /* free the header pbuf */
        pbuf_free(q);
        q = NULL;
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 8004ab4:	f06f 0005 	mvn.w	r0, #5
 8004ab8:	e000      	b.n	8004abc <udp_sendto_if+0xbc>
    q = NULL;
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8004aba:	4620      	mov	r0, r4
}
 8004abc:	b004      	add	sp, #16
 8004abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004ac4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004ac4:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004ac6:	2614      	movs	r6, #20
 8004ac8:	4c07      	ldr	r4, [pc, #28]	; (8004ae8 <etharp_free_entry+0x24>)
 8004aca:	4346      	muls	r6, r0
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004acc:	4605      	mov	r5, r0
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004ace:	59a0      	ldr	r0, [r4, r6]
 8004ad0:	b118      	cbz	r0, 8004ada <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004ad2:	f7fd fc4b 	bl	800236c <pbuf_free>
    arp_table[i].q = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004ada:	2314      	movs	r3, #20
 8004adc:	fb03 4405 	mla	r4, r3, r5, r4
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	74a3      	strb	r3, [r4, #18]
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20002ad8 	.word	0x20002ad8

08004aec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 8004aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	4a33      	ldr	r2, [pc, #204]	; (8004bc0 <etharp_find_entry+0xd4>)
 8004af2:	2300      	movs	r3, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8004af4:	250a      	movs	r5, #10
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 8004af6:	4607      	mov	r7, r0
 8004af8:	468b      	mov	fp, r1
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u8_t age_queue = 0;
 8004afa:	4698      	mov	r8, r3
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
 8004afc:	469c      	mov	ip, r3
 8004afe:	469e      	mov	lr, r3
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
 8004b00:	462e      	mov	r6, r5
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004b02:	462c      	mov	r4, r5
 8004b04:	4628      	mov	r0, r5
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004b06:	2e0a      	cmp	r6, #10
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
 8004b08:	f892 9000 	ldrb.w	r9, [r2]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004b0c:	d104      	bne.n	8004b18 <etharp_find_entry+0x2c>
 8004b0e:	f1b9 0f00 	cmp.w	r9, #0
 8004b12:	d104      	bne.n	8004b1e <etharp_find_entry+0x32>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8004b14:	b25e      	sxtb	r6, r3
 8004b16:	e018      	b.n	8004b4a <etharp_find_entry+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004b18:	f1b9 0f00 	cmp.w	r9, #0
 8004b1c:	d015      	beq.n	8004b4a <etharp_find_entry+0x5e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 8004b1e:	b147      	cbz	r7, 8004b32 <etharp_find_entry+0x46>
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	468a      	mov	sl, r1
 8004b24:	f852 1c0e 	ldr.w	r1, [r2, #-14]
 8004b28:	458a      	cmp	sl, r1
 8004b2a:	d102      	bne.n	8004b32 <etharp_find_entry+0x46>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8004b2c:	b258      	sxtb	r0, r3
 8004b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8004b32:	f1b9 0f01 	cmp.w	r9, #1
 8004b36:	f892 9001 	ldrb.w	r9, [r2, #1]
 8004b3a:	d13c      	bne.n	8004bb6 <etharp_find_entry+0xca>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8004b3c:	f852 1c12 	ldr.w	r1, [r2, #-18]
 8004b40:	b3a1      	cbz	r1, 8004bac <etharp_find_entry+0xc0>
          if (arp_table[i].ctime >= age_queue) {
 8004b42:	45c1      	cmp	r9, r8
 8004b44:	d301      	bcc.n	8004b4a <etharp_find_entry+0x5e>
            old_queue = i;
 8004b46:	b25d      	sxtb	r5, r3
 8004b48:	46c8      	mov	r8, r9
 8004b4a:	3301      	adds	r3, #1
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004b4c:	2b0a      	cmp	r3, #10
 8004b4e:	f102 0214 	add.w	r2, r2, #20
 8004b52:	d1d8      	bne.n	8004b06 <etharp_find_entry+0x1a>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004b54:	f01b 0f02 	tst.w	fp, #2
 8004b58:	d124      	bne.n	8004ba4 <etharp_find_entry+0xb8>
 8004b5a:	2e0a      	cmp	r6, #10
 8004b5c:	d103      	bne.n	8004b66 <etharp_find_entry+0x7a>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004b5e:	f01b 0f01 	tst.w	fp, #1
 8004b62:	d102      	bne.n	8004b6a <etharp_find_entry+0x7e>
 8004b64:	e01e      	b.n	8004ba4 <etharp_find_entry+0xb8>
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
 8004b66:	b2f4      	uxtb	r4, r6
 8004b68:	e00d      	b.n	8004b86 <etharp_find_entry+0x9a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8004b6a:	2c0a      	cmp	r4, #10
 8004b6c:	d001      	beq.n	8004b72 <etharp_find_entry+0x86>
      /* recycle oldest stable*/
      i = old_stable;
 8004b6e:	b2e4      	uxtb	r4, r4
 8004b70:	e006      	b.n	8004b80 <etharp_find_entry+0x94>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004b72:	280a      	cmp	r0, #10
 8004b74:	d001      	beq.n	8004b7a <etharp_find_entry+0x8e>
      /* recycle oldest pending */
      i = old_pending;
 8004b76:	b2c4      	uxtb	r4, r0
 8004b78:	e002      	b.n	8004b80 <etharp_find_entry+0x94>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004b7a:	2d0a      	cmp	r5, #10
 8004b7c:	d012      	beq.n	8004ba4 <etharp_find_entry+0xb8>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8004b7e:	b2ec      	uxtb	r4, r5
      return (s8_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7ff ff9f 	bl	8004ac4 <etharp_free_entry>
 8004b86:	490f      	ldr	r1, [pc, #60]	; (8004bc4 <etharp_find_entry+0xd8>)
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8004b88:	b127      	cbz	r7, 8004b94 <etharp_find_entry+0xa8>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004b8a:	2214      	movs	r2, #20
 8004b8c:	fb02 1204 	mla	r2, r2, r4, r1
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	6053      	str	r3, [r2, #4]
  }
  arp_table[i].ctime = 0;
 8004b94:	2314      	movs	r3, #20
 8004b96:	fb03 1304 	mla	r3, r3, r4, r1
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	74da      	strb	r2, [r3, #19]
  return (err_t)i;
 8004b9e:	b260      	sxtb	r0, r4
 8004ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            age_queue = arp_table[i].ctime;
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8004bac:	45f1      	cmp	r9, lr
 8004bae:	d3cc      	bcc.n	8004b4a <etharp_find_entry+0x5e>
            old_pending = i;
 8004bb0:	b258      	sxtb	r0, r3
 8004bb2:	46ce      	mov	lr, r9
 8004bb4:	e7c9      	b.n	8004b4a <etharp_find_entry+0x5e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8004bb6:	45e1      	cmp	r9, ip
            old_stable = i;
 8004bb8:	bf24      	itt	cs
 8004bba:	b25c      	sxtbcs	r4, r3
 8004bbc:	46cc      	movcs	ip, r9
 8004bbe:	e7c4      	b.n	8004b4a <etharp_find_entry+0x5e>
 8004bc0:	20002aea 	.word	0x20002aea
 8004bc4:	20002ad8 	.word	0x20002ad8

08004bc8 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 8004bc8:	b430      	push	{r4, r5}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 8004bca:	684c      	ldr	r4, [r1, #4]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8004bcc:	681d      	ldr	r5, [r3, #0]
 8004bce:	6025      	str	r5, [r4, #0]
 8004bd0:	889b      	ldrh	r3, [r3, #4]
 8004bd2:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
 8004bd4:	6813      	ldr	r3, [r2, #0]
 8004bd6:	f8c4 3006 	str.w	r3, [r4, #6]
 8004bda:	8893      	ldrh	r3, [r2, #4]
 8004bdc:	8163      	strh	r3, [r4, #10]
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 8004bde:	2308      	movs	r3, #8
 8004be0:	7323      	strb	r3, [r4, #12]
 8004be2:	2300      	movs	r3, #0
 8004be4:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 8004be6:	6983      	ldr	r3, [r0, #24]
}
 8004be8:	bc30      	pop	{r4, r5}
  ETHADDR32_COPY(&ethhdr->dest, dst);
  ETHADDR16_COPY(&ethhdr->src, src);
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 8004bea:	4718      	bx	r3

08004bec <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4c0e      	ldr	r4, [pc, #56]	; (8004c28 <etharp_tmr+0x3c>)
 8004bf0:	2500      	movs	r5, #0
        etharp_free_entry(i);
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004bf2:	2602      	movs	r6, #2
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
 8004bf4:	7ca2      	ldrb	r2, [r4, #18]
    if (state != ETHARP_STATE_EMPTY
 8004bf6:	b182      	cbz	r2, 8004c1a <etharp_tmr+0x2e>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8004bf8:	7ce3      	ldrb	r3, [r4, #19]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b2db      	uxtb	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004bfe:	2bef      	cmp	r3, #239	; 0xef
    if (state != ETHARP_STATE_EMPTY
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8004c00:	74e3      	strb	r3, [r4, #19]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004c02:	d803      	bhi.n	8004c0c <etharp_tmr+0x20>
 8004c04:	2a01      	cmp	r2, #1
 8004c06:	d105      	bne.n	8004c14 <etharp_tmr+0x28>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d906      	bls.n	8004c1a <etharp_tmr+0x2e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f7ff ff59 	bl	8004ac4 <etharp_free_entry>
 8004c12:	e002      	b.n	8004c1a <etharp_tmr+0x2e>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 8004c14:	2a03      	cmp	r2, #3
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004c16:	bf08      	it	eq
 8004c18:	74a6      	strbeq	r6, [r4, #18]
 8004c1a:	3501      	adds	r5, #1
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004c1c:	2d0a      	cmp	r5, #10
 8004c1e:	f104 0414 	add.w	r4, r4, #20
 8004c22:	d1e7      	bne.n	8004bf4 <etharp_tmr+0x8>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
 8004c26:	bf00      	nop
 8004c28:	20002ad8 	.word	0x20002ad8

08004c2c <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4d08      	ldr	r5, [pc, #32]	; (8004c50 <etharp_cleanup_netif+0x24>)
 8004c30:	4606      	mov	r6, r0
 8004c32:	2400      	movs	r4, #0
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004c34:	7cab      	ldrb	r3, [r5, #18]
 8004c36:	b12b      	cbz	r3, 8004c44 <etharp_cleanup_netif+0x18>
 8004c38:	68ab      	ldr	r3, [r5, #8]
 8004c3a:	42b3      	cmp	r3, r6
 8004c3c:	d102      	bne.n	8004c44 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff ff40 	bl	8004ac4 <etharp_free_entry>
 8004c44:	3401      	adds	r4, #1
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004c46:	2c0a      	cmp	r4, #10
 8004c48:	f105 0514 	add.w	r5, r5, #20
 8004c4c:	d1f2      	bne.n	8004c34 <etharp_cleanup_netif+0x8>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	20002ad8 	.word	0x20002ad8

08004c54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 8004c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 8004c58:	2200      	movs	r2, #0
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	4688      	mov	r8, r1
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 8004c5e:	2003      	movs	r0, #3
 8004c60:	212a      	movs	r1, #42	; 0x2a
 8004c62:	f7fd fba9 	bl	80023b8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8004c66:	4605      	mov	r5, r0
 8004c68:	b3d0      	cbz	r0, 8004ce0 <etharp_request+0x8c>
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 8004c6a:	6844      	ldr	r4, [r0, #4]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	f7fc fee9 	bl	8001a44 <lwip_htons>
 8004c72:	82a0      	strh	r0, [r4, #20]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8004c74:	f8d6 302b 	ldr.w	r3, [r6, #43]	; 0x2b
 8004c78:	f8c4 3016 	str.w	r3, [r4, #22]
 8004c7c:	f8b6 302f 	ldrh.w	r3, [r6, #47]	; 0x2f
 8004c80:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <etharp_request+0x94>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	889b      	ldrh	r3, [r3, #4]
 8004c88:	84a3      	strh	r3, [r4, #36]	; 0x24
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 8004c8a:	4b18      	ldr	r3, [pc, #96]	; (8004cec <etharp_request+0x98>)
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8004c8c:	6222      	str	r2, [r4, #32]
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	889b      	ldrh	r3, [r3, #4]
 8004c92:	6022      	str	r2, [r4, #0]
 8004c94:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 8004c96:	f8d6 302b 	ldr.w	r3, [r6, #43]	; 0x2b
 8004c9a:	f8c4 3006 	str.w	r3, [r4, #6]
 8004c9e:	f8b6 302f 	ldrh.w	r3, [r6, #47]	; 0x2f
 8004ca2:	8163      	strh	r3, [r4, #10]
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8004ca4:	6873      	ldr	r3, [r6, #4]
 8004ca6:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8004ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cac:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73a3      	strb	r3, [r4, #14]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004cb4:	7463      	strb	r3, [r4, #17]
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004cb6:	2201      	movs	r2, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 8004cb8:	2306      	movs	r3, #6
  hdr->protolen = sizeof(ip_addr_t);
 8004cba:	2104      	movs	r1, #4
 8004cbc:	74e1      	strb	r1, [r4, #19]
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004cbe:	73e2      	strb	r2, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 8004cc0:	74a3      	strb	r3, [r4, #18]
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	7422      	strb	r2, [r4, #16]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
  hdr->protolen = sizeof(ip_addr_t);

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 8004cc6:	7322      	strb	r2, [r4, #12]
 8004cc8:	7363      	strb	r3, [r4, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 8004cca:	4629      	mov	r1, r5
 8004ccc:	69b3      	ldr	r3, [r6, #24]
 8004cce:	4630      	mov	r0, r6
 8004cd0:	4798      	blx	r3
 8004cd2:	4604      	mov	r4, r0
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f7fd fb49 	bl	800236c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8004cda:	4620      	mov	r0, r4
 8004cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
 8004ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce8:	0800a926 	.word	0x0800a926
 8004cec:	0800a920 	.word	0x0800a920

08004cf0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8004cf4:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <etharp_output_to_arp_index+0x44>)
 8004cf6:	2414      	movs	r4, #20
 8004cf8:	fb04 3402 	mla	r4, r4, r2, r3
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8004cfc:	4615      	mov	r5, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8004cfe:	7ca2      	ldrb	r2, [r4, #18]
 8004d00:	2a02      	cmp	r2, #2
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8004d02:	4607      	mov	r7, r0
 8004d04:	4688      	mov	r8, r1
 8004d06:	461e      	mov	r6, r3
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8004d08:	d108      	bne.n	8004d1c <etharp_output_to_arp_index+0x2c>
 8004d0a:	7ce3      	ldrb	r3, [r4, #19]
 8004d0c:	2be3      	cmp	r3, #227	; 0xe3
 8004d0e:	d905      	bls.n	8004d1c <etharp_output_to_arp_index+0x2c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8004d10:	1d21      	adds	r1, r4, #4
 8004d12:	f7ff ff9f 	bl	8004c54 <etharp_request>
 8004d16:	b908      	cbnz	r0, 8004d1c <etharp_output_to_arp_index+0x2c>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	74a3      	strb	r3, [r4, #18]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 8004d1c:	2314      	movs	r3, #20
 8004d1e:	fb03 6305 	mla	r3, r3, r5, r6
 8004d22:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8004d26:	4641      	mov	r1, r8
 8004d28:	4638      	mov	r0, r7
 8004d2a:	330c      	adds	r3, #12
    &arp_table[arp_idx].ethaddr);
}
 8004d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 8004d30:	f7ff bf4a 	b.w	8004bc8 <etharp_send_ip>
 8004d34:	20002ad8 	.word	0x20002ad8

08004d38 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 8004d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3c:	4688      	mov	r8, r1
 8004d3e:	4607      	mov	r7, r0
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 8004d40:	4601      	mov	r1, r0
 8004d42:	f8d8 0000 	ldr.w	r0, [r8]
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 8004d46:	4614      	mov	r4, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 8004d48:	f7fc fbb4 	bl	80014b4 <ip4_addr_isbroadcast>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d140      	bne.n	8004dd2 <etharp_query+0x9a>
      ip_addr_ismulticast(ipaddr) ||
 8004d50:	f8d8 3000 	ldr.w	r3, [r8]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 8004d54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d58:	2ae0      	cmp	r2, #224	; 0xe0
 8004d5a:	d03a      	beq.n	8004dd2 <etharp_query+0x9a>
      ip_addr_ismulticast(ipaddr) ||
      ip_addr_isany(ipaddr)) {
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d038      	beq.n	8004dd2 <etharp_query+0x9a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 8004d60:	2101      	movs	r1, #1
 8004d62:	4640      	mov	r0, r8
 8004d64:	f7ff fec2 	bl	8004aec <etharp_find_entry>

  /* could not find or create entry? */
  if (i < 0) {
 8004d68:	1e05      	subs	r5, r0, #0
 8004d6a:	db36      	blt.n	8004dda <etharp_query+0xa2>
    }
    return (err_t)i;
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8004d6c:	4e31      	ldr	r6, [pc, #196]	; (8004e34 <etharp_query+0xfc>)
 8004d6e:	2314      	movs	r3, #20
 8004d70:	fb03 6205 	mla	r2, r3, r5, r6
 8004d74:	7c91      	ldrb	r1, [r2, #18]
 8004d76:	b909      	cbnz	r1, 8004d7c <etharp_query+0x44>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004d78:	2101      	movs	r1, #1
 8004d7a:	7491      	strb	r1, [r2, #18]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 8004d7c:	fb03 6305 	mla	r3, r3, r5, r6
 8004d80:	7c9b      	ldrb	r3, [r3, #18]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d000      	beq.n	8004d88 <etharp_query+0x50>
 8004d86:	b93c      	cbnz	r4, 8004d98 <etharp_query+0x60>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8004d88:	4641      	mov	r1, r8
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f7ff ff62 	bl	8004c54 <etharp_request>
 8004d90:	4602      	mov	r2, r0
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8004d92:	b91c      	cbnz	r4, 8004d9c <etharp_query+0x64>
 8004d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8004d9c:	2314      	movs	r3, #20
 8004d9e:	436b      	muls	r3, r5
 8004da0:	18f1      	adds	r1, r6, r3
 8004da2:	7c89      	ldrb	r1, [r1, #18]
 8004da4:	2901      	cmp	r1, #1
 8004da6:	d90c      	bls.n	8004dc2 <etharp_query+0x8a>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8004da8:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <etharp_query+0x100>)
 8004daa:	7015      	strb	r5, [r2, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 8004dac:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <etharp_query+0xfc>)
 8004dae:	4413      	add	r3, r2
 8004db0:	4621      	mov	r1, r4
 8004db2:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8004db6:	4638      	mov	r0, r7
 8004db8:	330c      	adds	r3, #12
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
    }
  }
  return result;
}
 8004dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 8004dbe:	f7ff bf03 	b.w	8004bc8 <etharp_send_ip>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004dc2:	d10d      	bne.n	8004de0 <etharp_query+0xa8>
 8004dc4:	4623      	mov	r3, r4
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 8004dc6:	b173      	cbz	r3, 8004de6 <etharp_query+0xae>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 8004dc8:	7b1a      	ldrb	r2, [r3, #12]
 8004dca:	2a01      	cmp	r2, #1
 8004dcc:	d11d      	bne.n	8004e0a <etharp_query+0xd2>
        copy_needed = 1;
        break;
      }
      p = p->next;
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	e7f9      	b.n	8004dc6 <etharp_query+0x8e>
  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr) ||
      ip_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8004dd2:	f06f 000d 	mvn.w	r0, #13
 8004dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dda:	4628      	mov	r0, r5
 8004ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de0:	4610      	mov	r0, r2
 8004de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
      pbuf_ref(p);
 8004de6:	4620      	mov	r0, r4
 8004de8:	f7fd fb99 	bl	800251e <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8004dec:	b1f4      	cbz	r4, 8004e2c <etharp_query+0xf4>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8004dee:	2314      	movs	r3, #20
 8004df0:	fb03 f205 	mul.w	r2, r3, r5
 8004df4:	461f      	mov	r7, r3
 8004df6:	58b0      	ldr	r0, [r6, r2]
 8004df8:	b108      	cbz	r0, 8004dfe <etharp_query+0xc6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8004dfa:	f7fd fab7 	bl	800236c <pbuf_free>
      }
      arp_table[i].q = p;
 8004dfe:	fb07 f005 	mul.w	r0, r7, r5
 8004e02:	5034      	str	r4, [r6, r0]
      result = ERR_OK;
 8004e04:	2000      	movs	r0, #0
 8004e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
      p = p->next;
    }
    if(copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	8919      	ldrh	r1, [r3, #8]
 8004e0e:	2003      	movs	r0, #3
 8004e10:	f7fd fad2 	bl	80023b8 <pbuf_alloc>
      if(p != NULL) {
 8004e14:	4607      	mov	r7, r0
 8004e16:	b148      	cbz	r0, 8004e2c <etharp_query+0xf4>
        if (pbuf_copy(p, q) != ERR_OK) {
 8004e18:	4621      	mov	r1, r4
 8004e1a:	f7fd fb9b 	bl	8002554 <pbuf_copy>
 8004e1e:	b118      	cbz	r0, 8004e28 <etharp_query+0xf0>
          pbuf_free(p);
 8004e20:	4638      	mov	r0, r7
 8004e22:	f7fd faa3 	bl	800236c <pbuf_free>
 8004e26:	e001      	b.n	8004e2c <etharp_query+0xf4>
 8004e28:	463c      	mov	r4, r7
 8004e2a:	e7e0      	b.n	8004dee <etharp_query+0xb6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }
  return result;
}
 8004e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e34:	20002ad8 	.word	0x20002ad8
 8004e38:	20002ad4 	.word	0x20002ad4

08004e3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 8004e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3e:	460e      	mov	r6, r1
 8004e40:	4604      	mov	r4, r0
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 8004e42:	210e      	movs	r1, #14
 8004e44:	4630      	mov	r0, r6
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 8004e46:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 8004e48:	f7fd fa64 	bl	8002314 <pbuf_header>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d15e      	bne.n	8004f0e <etharp_output+0xd2>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 8004e50:	4621      	mov	r1, r4
 8004e52:	6828      	ldr	r0, [r5, #0]
 8004e54:	f7fc fb2e 	bl	80014b4 <ip4_addr_isbroadcast>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d150      	bne.n	8004efe <etharp_output+0xc2>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e62:	2ae0      	cmp	r2, #224	; 0xe0
 8004e64:	d114      	bne.n	8004e90 <etharp_output+0x54>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 8004e6c:	235e      	movs	r3, #94	; 0x5e
 8004e6e:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004e72:	786b      	ldrb	r3, [r5, #1]
    dest = (struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 8004e74:	f88d 0001 	strb.w	r0, [sp, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7c:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8004e80:	78ab      	ldrb	r3, [r5, #2]
 8004e82:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8004e86:	78eb      	ldrb	r3, [r5, #3]
 8004e88:	f88d 3005 	strb.w	r3, [sp, #5]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8004e8c:	466b      	mov	r3, sp
 8004e8e:	e037      	b.n	8004f00 <etharp_output+0xc4>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 8004e90:	6862      	ldr	r2, [r4, #4]
 8004e92:	68a1      	ldr	r1, [r4, #8]
 8004e94:	405a      	eors	r2, r3
 8004e96:	420a      	tst	r2, r1
 8004e98:	d008      	beq.n	8004eac <etharp_output+0x70>
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <etharp_output+0x70>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 8004ea4:	68e3      	ldr	r3, [r4, #12]
 8004ea6:	f104 050c 	add.w	r5, r4, #12
 8004eaa:	b39b      	cbz	r3, 8004f14 <etharp_output+0xd8>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <etharp_output+0xe0>)
 8004eae:	481c      	ldr	r0, [pc, #112]	; (8004f20 <etharp_output+0xe4>)
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	2114      	movs	r1, #20
 8004eb4:	fb01 0002 	mla	r0, r1, r2, r0
 8004eb8:	7c81      	ldrb	r1, [r0, #18]
 8004eba:	2901      	cmp	r1, #1
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	d903      	bls.n	8004ec8 <etharp_output+0x8c>
 8004ec0:	682f      	ldr	r7, [r5, #0]
 8004ec2:	6843      	ldr	r3, [r0, #4]
 8004ec4:	429f      	cmp	r7, r3
 8004ec6:	d00a      	beq.n	8004ede <etharp_output+0xa2>
 8004ec8:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <etharp_output+0xe4>)
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 8004eca:	2200      	movs	r2, #0
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8004ecc:	7c98      	ldrb	r0, [r3, #18]
 8004ece:	2801      	cmp	r0, #1
 8004ed0:	d90a      	bls.n	8004ee8 <etharp_output+0xac>
 8004ed2:	682f      	ldr	r7, [r5, #0]
 8004ed4:	6858      	ldr	r0, [r3, #4]
 8004ed6:	4287      	cmp	r7, r0
 8004ed8:	d106      	bne.n	8004ee8 <etharp_output+0xac>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	700a      	strb	r2, [r1, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8004ede:	4631      	mov	r1, r6
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7ff ff05 	bl	8004cf0 <etharp_output_to_arp_index>
 8004ee6:	e017      	b.n	8004f18 <etharp_output+0xdc>
 8004ee8:	3201      	adds	r2, #1
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8004eea:	2a0a      	cmp	r2, #10
 8004eec:	f103 0314 	add.w	r3, r3, #20
 8004ef0:	d1ec      	bne.n	8004ecc <etharp_output+0x90>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8004ef2:	4632      	mov	r2, r6
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff ff1e 	bl	8004d38 <etharp_query>
 8004efc:	e00c      	b.n	8004f18 <etharp_output+0xdc>
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <etharp_output+0xe8>)
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 8004f00:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 8004f04:	4631      	mov	r1, r6
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff fe5e 	bl	8004bc8 <etharp_send_ip>
 8004f0c:	e004      	b.n	8004f18 <etharp_output+0xdc>
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
 8004f0e:	f06f 0001 	mvn.w	r0, #1
 8004f12:	e001      	b.n	8004f18 <etharp_output+0xdc>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 8004f14:	f06f 0003 	mvn.w	r0, #3

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
}
 8004f18:	b003      	add	sp, #12
 8004f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f1c:	20002ad4 	.word	0x20002ad4
 8004f20:	20002ad8 	.word	0x20002ad8
 8004f24:	0800a920 	.word	0x0800a920

08004f28 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8004f2c:	8947      	ldrh	r7, [r0, #10]
 8004f2e:	2f0e      	cmp	r7, #14
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8004f30:	b085      	sub	sp, #20
 8004f32:	4605      	mov	r5, r0
 8004f34:	460e      	mov	r6, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8004f36:	f240 80d3 	bls.w	80050e0 <ethernet_input+0x1b8>
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8004f3a:	6844      	ldr	r4, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8004f3c:	7823      	ldrb	r3, [r4, #0]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 8004f3e:	f8b4 800c 	ldrh.w	r8, [r4, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8004f42:	07d8      	lsls	r0, r3, #31
 8004f44:	d514      	bpl.n	8004f70 <ethernet_input+0x48>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d108      	bne.n	8004f5c <ethernet_input+0x34>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 8004f4a:	7863      	ldrb	r3, [r4, #1]
 8004f4c:	b983      	cbnz	r3, 8004f70 <ethernet_input+0x48>
 8004f4e:	78a3      	ldrb	r3, [r4, #2]
 8004f50:	2b5e      	cmp	r3, #94	; 0x5e
 8004f52:	d10d      	bne.n	8004f70 <ethernet_input+0x48>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8004f54:	7b6b      	ldrb	r3, [r5, #13]
 8004f56:	f043 0310 	orr.w	r3, r3, #16
 8004f5a:	e008      	b.n	8004f6e <ethernet_input+0x46>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8004f5c:	2206      	movs	r2, #6
 8004f5e:	4964      	ldr	r1, [pc, #400]	; (80050f0 <ethernet_input+0x1c8>)
 8004f60:	4620      	mov	r0, r4
 8004f62:	f002 f8e9 	bl	8007138 <memcmp>
 8004f66:	b918      	cbnz	r0, 8004f70 <ethernet_input+0x48>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8004f68:	7b6b      	ldrb	r3, [r5, #13]
 8004f6a:	f043 0308 	orr.w	r3, r3, #8
 8004f6e:	736b      	strb	r3, [r5, #13]
    }
  }

  switch (type) {
 8004f70:	f1b8 0f08 	cmp.w	r8, #8
 8004f74:	d003      	beq.n	8004f7e <ethernet_input+0x56>
 8004f76:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
 8004f7a:	d012      	beq.n	8004fa2 <ethernet_input+0x7a>
 8004f7c:	e0b0      	b.n	80050e0 <ethernet_input+0x1b8>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8004f7e:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8004f82:	0699      	lsls	r1, r3, #26
 8004f84:	f140 80ac 	bpl.w	80050e0 <ethernet_input+0x1b8>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 8004f88:	f06f 010d 	mvn.w	r1, #13
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f7fd f9c1 	bl	8002314 <pbuf_header>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f040 80a4 	bne.w	80050e0 <ethernet_input+0x1b8>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f7fc f956 	bl	800124c <ip_input>
      }
      break;
 8004fa0:	e0a1      	b.n	80050e6 <ethernet_input+0x1be>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8004fa2:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8004fa6:	069a      	lsls	r2, r3, #26
 8004fa8:	f140 809a 	bpl.w	80050e0 <ethernet_input+0x1b8>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 8004fac:	2f29      	cmp	r7, #41	; 0x29
 8004fae:	f240 8097 	bls.w	80050e0 <ethernet_input+0x1b8>
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8004fb2:	89e3      	ldrh	r3, [r4, #14]
 8004fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb8:	f040 8092 	bne.w	80050e0 <ethernet_input+0x1b8>
 8004fbc:	7ca3      	ldrb	r3, [r4, #18]
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	f040 808e 	bne.w	80050e0 <ethernet_input+0x1b8>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 8004fc4:	7ce3      	ldrb	r3, [r4, #19]
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	f040 808a 	bne.w	80050e0 <ethernet_input+0x1b8>
      (hdr->protolen != sizeof(ip_addr_t)) ||
 8004fcc:	8a23      	ldrh	r3, [r4, #16]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	f040 8086 	bne.w	80050e0 <ethernet_input+0x1b8>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8004fd4:	46a2      	mov	sl, r4
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 8004fd6:	6873      	ldr	r3, [r6, #4]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8004fd8:	f85a 0f1c 	ldr.w	r0, [sl, #28]!
 8004fdc:	9002      	str	r0, [sp, #8]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8004fde:	f8d4 0026 	ldr.w	r0, [r4, #38]	; 0x26
 8004fe2:	9003      	str	r0, [sp, #12]

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 8004fe4:	b133      	cbz	r3, 8004ff4 <ethernet_input+0xcc>
    for_us = 0;
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 8004fe6:	9a03      	ldr	r2, [sp, #12]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f1d3 0800 	rsbs	r8, r3, #0
 8004fee:	eb48 0803 	adc.w	r8, r8, r3
 8004ff2:	e000      	b.n	8004ff6 <ethernet_input+0xce>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
    for_us = 0;
 8004ff4:	4698      	mov	r8, r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 8004ff6:	9802      	ldr	r0, [sp, #8]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004ff8:	f1b8 0f00 	cmp.w	r8, #0
 8004ffc:	f104 0716 	add.w	r7, r4, #22
 8005000:	bf14      	ite	ne
 8005002:	f04f 0b01 	movne.w	fp, #1
 8005006:	f04f 0b02 	moveq.w	fp, #2
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 800500a:	f106 092b 	add.w	r9, r6, #43	; 0x2b
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 800500e:	b3a0      	cbz	r0, 800507a <ethernet_input+0x152>
      ip_addr_isbroadcast(ipaddr, netif) ||
 8005010:	4631      	mov	r1, r6
 8005012:	f7fc fa4f 	bl	80014b4 <ip4_addr_isbroadcast>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 8005016:	9001      	str	r0, [sp, #4]
 8005018:	bb78      	cbnz	r0, 800507a <ethernet_input+0x152>
      ip_addr_isbroadcast(ipaddr, netif) ||
 800501a:	9b02      	ldr	r3, [sp, #8]
 800501c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005020:	2be0      	cmp	r3, #224	; 0xe0
 8005022:	d02a      	beq.n	800507a <ethernet_input+0x152>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 8005024:	4659      	mov	r1, fp
 8005026:	a802      	add	r0, sp, #8
 8005028:	f7ff fd60 	bl	8004aec <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800502c:	2800      	cmp	r0, #0
 800502e:	db24      	blt.n	800507a <ethernet_input+0x152>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8005030:	4930      	ldr	r1, [pc, #192]	; (80050f4 <ethernet_input+0x1cc>)

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8005032:	9a01      	ldr	r2, [sp, #4]
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8005034:	2314      	movs	r3, #20
 8005036:	4343      	muls	r3, r0
 8005038:	eb01 0c03 	add.w	ip, r1, r3
 800503c:	2002      	movs	r0, #2
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800503e:	f103 0e08 	add.w	lr, r3, #8
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8005042:	f88c 0012 	strb.w	r0, [ip, #18]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8005046:	f8cc 6008 	str.w	r6, [ip, #8]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800504a:	448e      	add	lr, r1
 800504c:	6838      	ldr	r0, [r7, #0]
 800504e:	f8ce 0004 	str.w	r0, [lr, #4]
 8005052:	88b8      	ldrh	r0, [r7, #4]
 8005054:	f8ae 0008 	strh.w	r0, [lr, #8]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8005058:	f851 b003 	ldr.w	fp, [r1, r3]

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800505c:	f88c 2013 	strb.w	r2, [ip, #19]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8005060:	f1bb 0f00 	cmp.w	fp, #0
 8005064:	d009      	beq.n	800507a <ethernet_input+0x152>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8005066:	50ca      	str	r2, [r1, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 8005068:	4630      	mov	r0, r6
 800506a:	463b      	mov	r3, r7
 800506c:	464a      	mov	r2, r9
 800506e:	4659      	mov	r1, fp
 8005070:	f7ff fdaa 	bl	8004bc8 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 8005074:	4658      	mov	r0, fp
 8005076:	f7fd f979 	bl	800236c <pbuf_free>
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800507a:	8aa3      	ldrh	r3, [r4, #20]
 800507c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005080:	d007      	beq.n	8005092 <ethernet_input+0x16a>
 8005082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005086:	d12b      	bne.n	80050e0 <ethernet_input+0x1b8>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 8005088:	a902      	add	r1, sp, #8
 800508a:	4630      	mov	r0, r6
 800508c:	f7fc fed0 	bl	8001e30 <dhcp_arp_reply>
 8005090:	e026      	b.n	80050e0 <ethernet_input+0x1b8>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 8005092:	f1b8 0f00 	cmp.w	r8, #0
 8005096:	d023      	beq.n	80050e0 <ethernet_input+0x1b8>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 8005098:	2002      	movs	r0, #2
 800509a:	f7fc fcd3 	bl	8001a44 <lwip_htons>
 800509e:	82a0      	strh	r0, [r4, #20]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 80050a0:	f8da 3000 	ldr.w	r3, [sl]
 80050a4:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 80050a8:	6873      	ldr	r3, [r6, #4]
 80050aa:	61e3      	str	r3, [r4, #28]
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6223      	str	r3, [r4, #32]
 80050b0:	88bb      	ldrh	r3, [r7, #4]
 80050b2:	84a3      	strh	r3, [r4, #36]	; 0x24
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	88bb      	ldrh	r3, [r7, #4]
 80050ba:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 80050bc:	f8d9 3000 	ldr.w	r3, [r9]
 80050c0:	f8c4 3016 	str.w	r3, [r4, #22]
 80050c4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80050c8:	80bb      	strh	r3, [r7, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 80050ca:	f8d9 3000 	ldr.w	r3, [r9]
 80050ce:	f8c4 3006 	str.w	r3, [r4, #6]
 80050d2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80050d6:	8163      	strh	r3, [r4, #10]

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 80050d8:	69b3      	ldr	r3, [r6, #24]
 80050da:	4629      	mov	r1, r5
 80050dc:	4630      	mov	r0, r6
 80050de:	4798      	blx	r3
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80050e0:	4628      	mov	r0, r5
 80050e2:	f7fd f943 	bl	800236c <pbuf_free>
  return ERR_OK;
}
 80050e6:	2000      	movs	r0, #0
 80050e8:	b005      	add	sp, #20
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ee:	bf00      	nop
 80050f0:	0800a920 	.word	0x0800a920
 80050f4:	20002ad8 	.word	0x20002ad8

080050f8 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  u8 *buffer =  (u8 *)(DMATxDescToSet->Buffer1Addr);
 80050f8:	4b28      	ldr	r3, [pc, #160]	; (800519c <low_level_output+0xa4>)
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80050fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  u8 *buffer =  (u8 *)(DMATxDescToSet->Buffer1Addr);
 80050fe:	681e      	ldr	r6, [r3, #0]
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = DMATxDescToSet;
  bufferoffset = 0;
 8005100:	f04f 0900 	mov.w	r9, #0

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  u8 *buffer =  (u8 *)(DMATxDescToSet->Buffer1Addr);
 8005104:	68b3      	ldr	r3, [r6, #8]
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005106:	460d      	mov	r5, r1
  err_t errval;
  struct pbuf *q;
  u8 *buffer =  (u8 *)(DMATxDescToSet->Buffer1Addr);
  __IO ETH_DMADESCTypeDef *DmaTxDesc;
  uint16_t framelength = 0;
 8005108:	46c8      	mov	r8, r9
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800510a:	f240 5bf4 	movw	fp, #1524	; 0x5f4

  DmaTxDesc = DMATxDescToSet;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800510e:	b365      	cbz	r5, 800516a <low_level_output+0x72>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATxDesc_OWN) != (u32)RESET)
 8005110:	6832      	ldr	r2, [r6, #0]
 8005112:	2a00      	cmp	r2, #0
 8005114:	db2e      	blt.n	8005174 <low_level_output+0x7c>
        errval = ERR_BUF;
        goto error;
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005116:	896f      	ldrh	r7, [r5, #10]
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005118:	464c      	mov	r4, r9
        goto error;
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
 800511a:	f04f 0a00 	mov.w	sl, #0

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800511e:	eb04 0907 	add.w	r9, r4, r7
 8005122:	45d9      	cmp	r9, fp
 8005124:	eb03 0004 	add.w	r0, r3, r4
 8005128:	6869      	ldr	r1, [r5, #4]
 800512a:	d913      	bls.n	8005154 <low_level_output+0x5c>
      {
        /* Copy data to Tx buffer*/
        memcpy( (u8_t*)((u8_t*)buffer + bufferoffset), (u8_t*)((u8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800512c:	f5c4 64be 	rsb	r4, r4, #1520	; 0x5f0
 8005130:	3404      	adds	r4, #4
 8005132:	4622      	mov	r2, r4
 8005134:	4451      	add	r1, sl
 8005136:	f002 f80e 	bl	8007156 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADESCTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800513a:	68f6      	ldr	r6, [r6, #12]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATxDesc_OWN) != (u32)RESET)
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	db1b      	blt.n	800517a <low_level_output+0x82>

        buffer = (u8 *)(DmaTxDesc->Buffer1Addr);

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005142:	44a0      	add	r8, r4
        }

        buffer = (u8 *)(DmaTxDesc->Buffer1Addr);

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005144:	44a2      	add	sl, r4
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (u8 *)(DmaTxDesc->Buffer1Addr);
 8005146:	68b3      	ldr	r3, [r6, #8]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005148:	f2a9 57f4 	subw	r7, r9, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800514c:	fa1f f888 	uxth.w	r8, r8
        bufferoffset = 0;
 8005150:	2400      	movs	r4, #0
 8005152:	e7e4      	b.n	800511e <low_level_output+0x26>
      }

      /* Copy the remaining bytes */
      memcpy( (u8_t*)((u8_t*)buffer + bufferoffset), (u8_t*)((u8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005154:	463a      	mov	r2, r7
 8005156:	4451      	add	r1, sl
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
 8005158:	44b8      	add	r8, r7
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	fa1f f888 	uxth.w	r8, r8
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
      }

      /* Copy the remaining bytes */
      memcpy( (u8_t*)((u8_t*)buffer + bufferoffset), (u8_t*)((u8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005160:	f001 fff9 	bl	8007156 <memcpy>

  DmaTxDesc = DMATxDescToSet;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005164:	682d      	ldr	r5, [r5, #0]
 8005166:	9b01      	ldr	r3, [sp, #4]
 8005168:	e7d1      	b.n	800510e <low_level_output+0x16>
  
  /* Note: padding and CRC for transmitted frame 
     are automatically inserted by DMA */

  /* Prepare transmit descriptors to give to DMA*/ 
  ETH_Prepare_Transmit_Descriptors(framelength);
 800516a:	4640      	mov	r0, r8
 800516c:	f000 f986 	bl	800547c <ETH_Prepare_Transmit_Descriptors>

  errval = ERR_OK;
 8005170:	4628      	mov	r0, r5
 8005172:	e004      	b.n	800517e <low_level_output+0x86>
  for(q = p; q != NULL; q = q->next)
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATxDesc_OWN) != (u32)RESET)
      {
        errval = ERR_BUF;
 8005174:	f06f 0001 	mvn.w	r0, #1
 8005178:	e001      	b.n	800517e <low_level_output+0x86>
        DmaTxDesc = (ETH_DMADESCTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATxDesc_OWN) != (u32)RESET)
        {
          errval = ERR_USE;
 800517a:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((ETH->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <low_level_output+0xa8>)
 8005180:	f241 0214 	movw	r2, #4116	; 0x1014
 8005184:	5899      	ldr	r1, [r3, r2]
 8005186:	0689      	lsls	r1, r1, #26
 8005188:	d505      	bpl.n	8005196 <low_level_output+0x9e>
  {
    /* Clear TUS ETHERNET DMA flag */
    ETH->DMASR = ETH_DMASR_TUS;
 800518a:	2120      	movs	r1, #32
 800518c:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    ETH->DMATPDR = 0;
 800518e:	f241 0204 	movw	r2, #4100	; 0x1004
 8005192:	2100      	movs	r1, #0
 8005194:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8005196:	b003      	add	sp, #12
 8005198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519c:	20005454 	.word	0x20005454
 80051a0:	40028000 	.word	0x40028000

080051a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
err_t ethernetif_input(struct netif *netif)
{
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	b087      	sub	sp, #28
 80051aa:	4682      	mov	sl, r0
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;  
  
  /* get received frame */
  frame = ETH_Get_Received_Frame();
 80051ac:	a803      	add	r0, sp, #12
 80051ae:	f000 f94f 	bl	8005450 <ETH_Get_Received_Frame>
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = frame.length;
  buffer = (u8 *)frame.buffer;
  
  /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
  p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80051b2:	2203      	movs	r2, #3
  /* get received frame */
  frame = ETH_Get_Received_Frame();
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = frame.length;
  buffer = (u8 *)frame.buffer;
 80051b4:	9b04      	ldr	r3, [sp, #16]
  
  /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
  p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80051b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;  
  
  /* get received frame */
  frame = ETH_Get_Received_Frame();
 80051ba:	9f05      	ldr	r7, [sp, #20]
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = frame.length;
  buffer = (u8 *)frame.buffer;
 80051bc:	9301      	str	r3, [sp, #4]
  
  /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
  p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80051be:	4610      	mov	r0, r2
 80051c0:	f7fd f8fa 	bl	80023b8 <pbuf_alloc>
  
  if (p != NULL)
 80051c4:	4605      	mov	r5, r0
 80051c6:	b928      	cbnz	r0, 80051d4 <ethernetif_input+0x30>
  
  /* Release descriptors to DMA */
  DMARxDesc =frame.descriptor;

  /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
  for (i=0; i<DMA_RX_FRAME_infos->Seg_Count; i++)
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <ethernetif_input+0xd4>)
  {  
    DMARxDesc->Status = ETH_DMARxDesc_OWN;
 80051ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
  /* Release descriptors to DMA */
  DMARxDesc =frame.descriptor;

  /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
  for (i=0; i<DMA_RX_FRAME_infos->Seg_Count; i++)
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	2300      	movs	r3, #0
 80051d2:	e029      	b.n	8005228 <ethernetif_input+0x84>
  buffer = (u8 *)frame.buffer;
  
  /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
  p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  
  if (p != NULL)
 80051d4:	46bb      	mov	fp, r7
 80051d6:	4606      	mov	r6, r0
 80051d8:	f04f 0900 	mov.w	r9, #0
  {
    DMARxDesc = frame.descriptor;
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
    {
      byteslefttocopy = q->len;
 80051dc:	8972      	ldrh	r2, [r6, #10]
 80051de:	464c      	mov	r4, r9
      payloadoffset = 0;
 80051e0:	f04f 0800 	mov.w	r8, #0
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80051e4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80051e8:	eb04 0902 	add.w	r9, r4, r2
 80051ec:	4599      	cmp	r9, r3
 80051ee:	9b01      	ldr	r3, [sp, #4]
 80051f0:	6870      	ldr	r0, [r6, #4]
 80051f2:	eb03 0104 	add.w	r1, r3, r4
 80051f6:	d910      	bls.n	800521a <ethernetif_input+0x76>
      {
        /* Copy data to pbuf*/
        memcpy( (u8_t*)((u8_t*)q->payload + payloadoffset), (u8_t*)((u8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80051f8:	f5c4 64be 	rsb	r4, r4, #1520	; 0x5f0
 80051fc:	3404      	adds	r4, #4
 80051fe:	4622      	mov	r2, r4
 8005200:	4440      	add	r0, r8
 8005202:	f001 ffa8 	bl	8007156 <memcpy>
        
        /* Point to next descriptor */
        DMARxDesc = (ETH_DMADESCTypeDef *)(DMARxDesc->Buffer2NextDescAddr);
 8005206:	f8db b00c 	ldr.w	fp, [fp, #12]
        buffer = (unsigned char *)(DMARxDesc->Buffer1Addr);
 800520a:	f8db 3008 	ldr.w	r3, [fp, #8]
 800520e:	9301      	str	r3, [sp, #4]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005210:	44a0      	add	r8, r4
        
        /* Point to next descriptor */
        DMARxDesc = (ETH_DMADESCTypeDef *)(DMARxDesc->Buffer2NextDescAddr);
        buffer = (unsigned char *)(DMARxDesc->Buffer1Addr);
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005212:	f2a9 52f4 	subw	r2, r9, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 8005216:	2400      	movs	r4, #0
 8005218:	e7e4      	b.n	80051e4 <ethernetif_input+0x40>
      }
      /* Copy remaining data in pbuf */
      memcpy( (u8_t*)((u8_t*)q->payload + payloadoffset), (u8_t*)((u8_t*)buffer + bufferoffset), byteslefttocopy);
 800521a:	4440      	add	r0, r8
 800521c:	f001 ff9b 	bl	8007156 <memcpy>
  
  if (p != NULL)
  {
    DMARxDesc = frame.descriptor;
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 8005220:	6836      	ldr	r6, [r6, #0]
 8005222:	2e00      	cmp	r6, #0
 8005224:	d1da      	bne.n	80051dc <ethernetif_input+0x38>
 8005226:	e7cf      	b.n	80051c8 <ethernetif_input+0x24>
  
  /* Release descriptors to DMA */
  DMARxDesc =frame.descriptor;

  /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
  for (i=0; i<DMA_RX_FRAME_infos->Seg_Count; i++)
 8005228:	688a      	ldr	r2, [r1, #8]
 800522a:	4293      	cmp	r3, r2
 800522c:	d203      	bcs.n	8005236 <ethernetif_input+0x92>
  {  
    DMARxDesc->Status = ETH_DMARxDesc_OWN;
 800522e:	6038      	str	r0, [r7, #0]
    DMARxDesc = (ETH_DMADESCTypeDef *)(DMARxDesc->Buffer2NextDescAddr);
 8005230:	68ff      	ldr	r7, [r7, #12]
  
  /* Release descriptors to DMA */
  DMARxDesc =frame.descriptor;

  /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
  for (i=0; i<DMA_RX_FRAME_infos->Seg_Count; i++)
 8005232:	3301      	adds	r3, #1
 8005234:	e7f8      	b.n	8005228 <ethernetif_input+0x84>
    DMARxDesc->Status = ETH_DMARxDesc_OWN;
    DMARxDesc = (ETH_DMADESCTypeDef *)(DMARxDesc->Buffer2NextDescAddr);
  }
  
  /* Clear Segment_Count */
  DMA_RX_FRAME_infos->Seg_Count =0;
 8005236:	2200      	movs	r2, #0
 8005238:	608a      	str	r2, [r1, #8]
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((ETH->DMASR & ETH_DMASR_RBUS) != (u32)RESET)  
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <ethernetif_input+0xd8>)
 800523c:	f241 0114 	movw	r1, #4116	; 0x1014
 8005240:	5858      	ldr	r0, [r3, r1]
 8005242:	0600      	lsls	r0, r0, #24
  {
    /* Clear RBUS ETHERNET DMA flag */
    ETH->DMASR = ETH_DMASR_RBUS;
 8005244:	bf41      	itttt	mi
 8005246:	2080      	movmi	r0, #128	; 0x80
 8005248:	5058      	strmi	r0, [r3, r1]
    /* Resume DMA reception */
    ETH->DMARPDR = 0;
 800524a:	f241 0108 	movwmi	r1, #4104	; 0x1008
 800524e:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);

  /* no packet could be read, silently ignore this */
  if (p == NULL) return ERR_MEM;
 8005250:	b155      	cbz	r5, 8005268 <ethernetif_input+0xc4>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005252:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005256:	4651      	mov	r1, sl
 8005258:	4628      	mov	r0, r5
 800525a:	4798      	blx	r3
  
  if (err != ERR_OK)
 800525c:	4604      	mov	r4, r0
 800525e:	b130      	cbz	r0, 800526e <ethernetif_input+0xca>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005260:	4628      	mov	r0, r5
 8005262:	f7fd f883 	bl	800236c <pbuf_free>
 8005266:	e002      	b.n	800526e <ethernetif_input+0xca>

  /* move received packet into a new pbuf */
  p = low_level_input(netif);

  /* no packet could be read, silently ignore this */
  if (p == NULL) return ERR_MEM;
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	e000      	b.n	8005270 <ethernetif_input+0xcc>
 800526e:	4620      	mov	r0, r4
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
  }
  return err;
}
 8005270:	b007      	add	sp, #28
 8005272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005276:	bf00      	nop
 8005278:	20006cac 	.word	0x20006cac
 800527c:	40028000 	.word	0x40028000

08005280 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005280:	b538      	push	{r3, r4, r5, lr}
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005282:	2373      	movs	r3, #115	; 0x73
 8005284:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005288:	2374      	movs	r3, #116	; 0x74
 800528a:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 800528e:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <ethernetif_init+0x80>)
 8005290:	6143      	str	r3, [r0, #20]
  netif->linkoutput = low_level_output;
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <ethernetif_init+0x84>)
 8005294:	6183      	str	r3, [r0, #24]
{
#ifdef CHECKSUM_BY_HARDWARE
  int i; 
#endif
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8005296:	2306      	movs	r3, #6

  /* set MAC hardware address */
  netif->hwaddr[0] =  MAC_ADDR0;
  netif->hwaddr[1] =  MAC_ADDR1;
 8005298:	2500      	movs	r5, #0
{
#ifdef CHECKSUM_BY_HARDWARE
  int i; 
#endif
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 800529a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

  /* set MAC hardware address */
  netif->hwaddr[0] =  MAC_ADDR0;
 800529e:	2302      	movs	r3, #2
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80052a0:	4604      	mov	r4, r0
#endif
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;

  /* set MAC hardware address */
  netif->hwaddr[0] =  MAC_ADDR0;
 80052a2:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  netif->hwaddr[3] =  MAC_ADDR3;
  netif->hwaddr[4] =  MAC_ADDR4;
  netif->hwaddr[5] =  MAC_ADDR5;
  
  /* initialize MAC address in ethernet MAC */ 
  ETH_MACAddressConfig(ETH_MAC_Address0, netif->hwaddr); 
 80052a6:	f100 012b 	add.w	r1, r0, #43	; 0x2b
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;

  /* set MAC hardware address */
  netif->hwaddr[0] =  MAC_ADDR0;
  netif->hwaddr[1] =  MAC_ADDR1;
 80052aa:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  netif->hwaddr[2] =  MAC_ADDR2;
 80052ae:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
  netif->hwaddr[3] =  MAC_ADDR3;
 80052b2:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e
  netif->hwaddr[4] =  MAC_ADDR4;
 80052b6:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
  netif->hwaddr[5] =  MAC_ADDR5;
 80052ba:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  
  /* initialize MAC address in ethernet MAC */ 
  ETH_MACAddressConfig(ETH_MAC_Address0, netif->hwaddr); 
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f8bc 	bl	800543c <ETH_MACAddressConfig>

  /* maximum transfer unit */
  netif->mtu = 1500;
 80052c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80052c8:	8523      	strh	r3, [r4, #40]	; 0x28

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80052ca:	2322      	movs	r3, #34	; 0x22
 80052cc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31

  /* Initialize Tx Descriptors list: Chain Mode */
  ETH_DMATxDescChainInit(DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80052d0:	2204      	movs	r2, #4
 80052d2:	490d      	ldr	r1, [pc, #52]	; (8005308 <ethernetif_init+0x88>)
 80052d4:	480d      	ldr	r0, [pc, #52]	; (800530c <ethernetif_init+0x8c>)

#ifdef CHECKSUM_BY_HARDWARE
  /* Enable the TCP, UDP and ICMP checksum insertion for the Tx frames */
  for(i=0; i<ETH_TXBUFNB; i++)
    {
      ETH_DMATxDescChecksumInsertionConfig(&DMATxDscrTab[i], ETH_DMATxDesc_ChecksumTCPUDPICMPFull);
 80052d6:	4c0d      	ldr	r4, [pc, #52]	; (800530c <ethernetif_init+0x8c>)
  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

  /* Initialize Tx Descriptors list: Chain Mode */
  ETH_DMATxDescChainInit(DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80052d8:	f000 f9a2 	bl	8005620 <ETH_DMATxDescChainInit>
  /* Initialize Rx Descriptors list: Chain Mode  */
  ETH_DMARxDescChainInit(DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80052dc:	2204      	movs	r2, #4
 80052de:	490c      	ldr	r1, [pc, #48]	; (8005310 <ethernetif_init+0x90>)
 80052e0:	480c      	ldr	r0, [pc, #48]	; (8005314 <ethernetif_init+0x94>)
 80052e2:	f000 f92d 	bl	8005540 <ETH_DMARxDescChainInit>

#ifdef CHECKSUM_BY_HARDWARE
  /* Enable the TCP, UDP and ICMP checksum insertion for the Tx frames */
  for(i=0; i<ETH_TXBUFNB; i++)
    {
      ETH_DMATxDescChecksumInsertionConfig(&DMATxDscrTab[i], ETH_DMATxDesc_ChecksumTCPUDPICMPFull);
 80052e6:	1960      	adds	r0, r4, r5
 80052e8:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 80052ec:	3520      	adds	r5, #32
 80052ee:	f000 f9bd 	bl	800566c <ETH_DMATxDescChecksumInsertionConfig>
  /* Initialize Rx Descriptors list: Chain Mode  */
  ETH_DMARxDescChainInit(DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);

#ifdef CHECKSUM_BY_HARDWARE
  /* Enable the TCP, UDP and ICMP checksum insertion for the Tx frames */
  for(i=0; i<ETH_TXBUFNB; i++)
 80052f2:	2d80      	cmp	r5, #128	; 0x80
 80052f4:	d1f7      	bne.n	80052e6 <ethernetif_init+0x66>
#endif

   /* Note: TCP, UDP, ICMP checksum checking for received frame are enabled in DMA config */

  /* Enable MAC and DMA transmission and reception */
  ETH_Start();
 80052f6:	f000 f9e3 	bl	80056c0 <ETH_Start>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
 80052fa:	2000      	movs	r0, #0
 80052fc:	bd38      	pop	{r3, r4, r5, pc}
 80052fe:	bf00      	nop
 8005300:	08004e3d 	.word	0x08004e3d
 8005304:	080050f9 	.word	0x080050f9
 8005308:	20006d30 	.word	0x20006d30
 800530c:	20005458 	.word	0x20005458
 8005310:	200054d8 	.word	0x200054d8
 8005314:	20006cb0 	.word	0x20006cb0

08005318 <ETH_DeInit>:
  * @brief  De-initializes the ETHERNET peripheral registers to their default reset values.
  * @param  None 
  * @retval None
  */
void ETH_DeInit(void)
{
 8005318:	b508      	push	{r3, lr}
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_ETH_MAC, ENABLE);
 800531a:	2101      	movs	r1, #1
 800531c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005320:	f000 fd8a 	bl	8005e38 <RCC_AHB1PeriphResetCmd>
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_ETH_MAC, DISABLE);
 8005324:	2100      	movs	r1, #0
 8005326:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
}
 800532a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ETH_DeInit(void)
{
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_ETH_MAC, ENABLE);
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_ETH_MAC, DISABLE);
 800532e:	f000 bd83 	b.w	8005e38 <RCC_AHB1PeriphResetCmd>

08005332 <ETH_StructInit>:
  /* Ethernet interframe gap set to 96 bits */
  ETH_InitStruct->ETH_InterFrameGap = ETH_InterFrameGap_96Bit;
  /* Carrier Sense Enabled in Half-Duplex mode */
  ETH_InitStruct->ETH_CarrierSense = ETH_CarrierSense_Enable;
  /* PHY speed configured to 100Mbit/s */
  ETH_InitStruct->ETH_Speed = ETH_Speed_100M; 
 8005332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005336:	6142      	str	r2, [r0, #20]
  /* Receive own Frames in Half-Duplex mode enabled */
  ETH_InitStruct->ETH_ReceiveOwn = ETH_ReceiveOwn_Enable;
  /* MAC MII loopback disabled */ 
  ETH_InitStruct->ETH_LoopbackMode = ETH_LoopbackMode_Disable;
  /* Full-Duplex mode selected */
  ETH_InitStruct->ETH_Mode = ETH_Mode_FullDuplex;
 8005338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800533c:	6202      	str	r2, [r0, #32]
  /* Receive all frames disabled */
  ETH_InitStruct->ETH_ReceiveAll = ETH_ReceiveAll_Disable;
  /* Source address filtering (on the optional MAC addresses) disabled */
  ETH_InitStruct->ETH_SourceAddrFilter = ETH_SourceAddrFilter_Disable;
  /* Do not forward control frames that do not pass the address filtering */
  ETH_InitStruct->ETH_PassControlFrames = ETH_PassControlFrames_BlockAll;
 800533e:	2240      	movs	r2, #64	; 0x40
 8005340:	6402      	str	r2, [r0, #64]	; 0x40
  /* Disable reception of Broadcast frames */
  ETH_InitStruct->ETH_BroadcastFramesReception = ETH_BroadcastFramesReception_Disable;
 8005342:	2220      	movs	r2, #32
{
  /* ETH_InitStruct members default value */
  /*------------------------   MAC Configuration   ---------------------------*/
  
  /* PHY Auto-negotiation enabled */
  ETH_InitStruct->ETH_AutoNegotiation = ETH_AutoNegotiation_Enable;
 8005344:	2301      	movs	r3, #1
  /* Source address filtering (on the optional MAC addresses) disabled */
  ETH_InitStruct->ETH_SourceAddrFilter = ETH_SourceAddrFilter_Disable;
  /* Do not forward control frames that do not pass the address filtering */
  ETH_InitStruct->ETH_PassControlFrames = ETH_PassControlFrames_BlockAll;
  /* Disable reception of Broadcast frames */
  ETH_InitStruct->ETH_BroadcastFramesReception = ETH_BroadcastFramesReception_Disable;
 8005346:	6442      	str	r2, [r0, #68]	; 0x44
  /* Initialize hash table high and low regs */
  ETH_InitStruct->ETH_HashTableHigh = 0x0;
  ETH_InitStruct->ETH_HashTableLow = 0x0;
  /* Flow control config (flow control disabled)*/
  ETH_InitStruct->ETH_PauseTime = 0x0;
  ETH_InitStruct->ETH_ZeroQuantaPause = ETH_ZeroQuantaPause_Disable;
 8005348:	2280      	movs	r2, #128	; 0x80
{
  /* ETH_InitStruct members default value */
  /*------------------------   MAC Configuration   ---------------------------*/
  
  /* PHY Auto-negotiation enabled */
  ETH_InitStruct->ETH_AutoNegotiation = ETH_AutoNegotiation_Enable;
 800534a:	6003      	str	r3, [r0, #0]
  /* Initialize hash table high and low regs */
  ETH_InitStruct->ETH_HashTableHigh = 0x0;
  ETH_InitStruct->ETH_HashTableLow = 0x0;
  /* Flow control config (flow control disabled)*/
  ETH_InitStruct->ETH_PauseTime = 0x0;
  ETH_InitStruct->ETH_ZeroQuantaPause = ETH_ZeroQuantaPause_Disable;
 800534c:	6642      	str	r2, [r0, #100]	; 0x64
  /*------------------------   MAC Configuration   ---------------------------*/
  
  /* PHY Auto-negotiation enabled */
  ETH_InitStruct->ETH_AutoNegotiation = ETH_AutoNegotiation_Enable;
  /* MAC watchdog enabled: cuts off long frame */
  ETH_InitStruct->ETH_Watchdog = ETH_Watchdog_Enable;
 800534e:	2300      	movs	r3, #0
  ETH_InitStruct->ETH_VLANTagIdentifier = 0x0;
  
  /*---------------------- DMA Configuration   -------------------------------*/
  
  /* Drops frames with with TCP/IP checksum errors */
  ETH_InitStruct->ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Disable; 
 8005350:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  /*------------------------   MAC Configuration   ---------------------------*/
  
  /* PHY Auto-negotiation enabled */
  ETH_InitStruct->ETH_AutoNegotiation = ETH_AutoNegotiation_Enable;
  /* MAC watchdog enabled: cuts off long frame */
  ETH_InitStruct->ETH_Watchdog = ETH_Watchdog_Enable;
 8005354:	6043      	str	r3, [r0, #4]
  /* MAC Jabber enabled in Half-duplex mode */
  ETH_InitStruct->ETH_Jabber = ETH_Jabber_Enable;
 8005356:	6083      	str	r3, [r0, #8]
  /* Ethernet interframe gap set to 96 bits */
  ETH_InitStruct->ETH_InterFrameGap = ETH_InterFrameGap_96Bit;
 8005358:	60c3      	str	r3, [r0, #12]
  /* Carrier Sense Enabled in Half-Duplex mode */
  ETH_InitStruct->ETH_CarrierSense = ETH_CarrierSense_Enable;
 800535a:	6103      	str	r3, [r0, #16]
  /* PHY speed configured to 100Mbit/s */
  ETH_InitStruct->ETH_Speed = ETH_Speed_100M; 
  /* Receive own Frames in Half-Duplex mode enabled */
  ETH_InitStruct->ETH_ReceiveOwn = ETH_ReceiveOwn_Enable;
 800535c:	6183      	str	r3, [r0, #24]
  /* MAC MII loopback disabled */ 
  ETH_InitStruct->ETH_LoopbackMode = ETH_LoopbackMode_Disable;
 800535e:	61c3      	str	r3, [r0, #28]
  /* Full-Duplex mode selected */
  ETH_InitStruct->ETH_Mode = ETH_Mode_FullDuplex;
  /* IPv4 and TCP/UDP/ICMP frame Checksum Offload disabled */
  ETH_InitStruct->ETH_ChecksumOffload = ETH_ChecksumOffload_Disable;
 8005360:	6243      	str	r3, [r0, #36]	; 0x24
  /* Retry Transmission enabled for half-duplex mode */ 
  ETH_InitStruct->ETH_RetryTransmission = ETH_RetryTransmission_Enable;
 8005362:	6283      	str	r3, [r0, #40]	; 0x28
  /* Automatic PAD/CRC strip disabled*/
  ETH_InitStruct->ETH_AutomaticPadCRCStrip = ETH_AutomaticPadCRCStrip_Disable;
 8005364:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* half-duplex mode retransmission Backoff time_limit = 10 slot times*/ 
  ETH_InitStruct->ETH_BackOffLimit = ETH_BackOffLimit_10;
 8005366:	6303      	str	r3, [r0, #48]	; 0x30
  /* half-duplex mode Deferral check disabled */
  ETH_InitStruct->ETH_DeferralCheck = ETH_DeferralCheck_Disable;
 8005368:	6343      	str	r3, [r0, #52]	; 0x34
  /* Receive all frames disabled */
  ETH_InitStruct->ETH_ReceiveAll = ETH_ReceiveAll_Disable;
 800536a:	6383      	str	r3, [r0, #56]	; 0x38
  /* Source address filtering (on the optional MAC addresses) disabled */
  ETH_InitStruct->ETH_SourceAddrFilter = ETH_SourceAddrFilter_Disable;
 800536c:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* Do not forward control frames that do not pass the address filtering */
  ETH_InitStruct->ETH_PassControlFrames = ETH_PassControlFrames_BlockAll;
  /* Disable reception of Broadcast frames */
  ETH_InitStruct->ETH_BroadcastFramesReception = ETH_BroadcastFramesReception_Disable;
  /* Normal Destination address filtering (not reverse addressing) */
  ETH_InitStruct->ETH_DestinationAddrFilter = ETH_DestinationAddrFilter_Normal;
 800536e:	6483      	str	r3, [r0, #72]	; 0x48
  /* Promiscuous address filtering mode disabled */
  ETH_InitStruct->ETH_PromiscuousMode = ETH_PromiscuousMode_Disable;
 8005370:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* Perfect address filtering for multicast addresses */
  ETH_InitStruct->ETH_MulticastFramesFilter = ETH_MulticastFramesFilter_Perfect;
 8005372:	6503      	str	r3, [r0, #80]	; 0x50
  /* Perfect address filtering for unicast addresses */
  ETH_InitStruct->ETH_UnicastFramesFilter = ETH_UnicastFramesFilter_Perfect;
 8005374:	6543      	str	r3, [r0, #84]	; 0x54
  /* Initialize hash table high and low regs */
  ETH_InitStruct->ETH_HashTableHigh = 0x0;
 8005376:	6583      	str	r3, [r0, #88]	; 0x58
  ETH_InitStruct->ETH_HashTableLow = 0x0;
 8005378:	65c3      	str	r3, [r0, #92]	; 0x5c
  /* Flow control config (flow control disabled)*/
  ETH_InitStruct->ETH_PauseTime = 0x0;
 800537a:	6603      	str	r3, [r0, #96]	; 0x60
  ETH_InitStruct->ETH_ZeroQuantaPause = ETH_ZeroQuantaPause_Disable;
  ETH_InitStruct->ETH_PauseLowThreshold = ETH_PauseLowThreshold_Minus4;
 800537c:	6683      	str	r3, [r0, #104]	; 0x68
  ETH_InitStruct->ETH_UnicastPauseFrameDetect = ETH_UnicastPauseFrameDetect_Disable;
 800537e:	66c3      	str	r3, [r0, #108]	; 0x6c
  ETH_InitStruct->ETH_ReceiveFlowControl = ETH_ReceiveFlowControl_Disable;
 8005380:	6703      	str	r3, [r0, #112]	; 0x70
  ETH_InitStruct->ETH_TransmitFlowControl = ETH_TransmitFlowControl_Disable;
 8005382:	6743      	str	r3, [r0, #116]	; 0x74
  /* VLANtag config (VLAN field not checked) */
  ETH_InitStruct->ETH_VLANTagComparison = ETH_VLANTagComparison_16Bit;
 8005384:	6783      	str	r3, [r0, #120]	; 0x78
  ETH_InitStruct->ETH_VLANTagIdentifier = 0x0;
 8005386:	67c3      	str	r3, [r0, #124]	; 0x7c
  
  /*---------------------- DMA Configuration   -------------------------------*/
  
  /* Drops frames with with TCP/IP checksum errors */
  ETH_InitStruct->ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Disable; 
 8005388:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Store and forward mode enabled for receive */
  ETH_InitStruct->ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
 800538c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005390:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  ETH_InitStruct->ETH_ReceiveThresholdControl = ETH_ReceiveThresholdControl_64Bytes;
  /* Disable Operate on second frame (transmit a second frame to FIFO without 
  waiting status of previous frame*/
  ETH_InitStruct->ETH_SecondFrameOperate = ETH_SecondFrameOperate_Disable;
  /* DMA works on 32-bit aligned start source and destinations addresses */
  ETH_InitStruct->ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
 8005394:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  /* Enabled Fixed Burst Mode (mix of INC4, INC8, INC16 and SINGLE DMA transactions */
  ETH_InitStruct->ETH_FixedBurst = ETH_FixedBurst_Enable;
 8005398:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800539c:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  /* DMA transfer max burst length = 32 beats = 32 x 32bits */
  ETH_InitStruct->ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
 80053a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  /* Store and forward mode enabled for receive */
  ETH_InitStruct->ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
  /* Flush received frame that created FIFO overflow */
  ETH_InitStruct->ETH_FlushReceivedFrame = ETH_FlushReceivedFrame_Enable;
  /* Store and forward mode enabled for transmit */
  ETH_InitStruct->ETH_TransmitStoreForward = ETH_TransmitStoreForward_Enable;  
 80053a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  /* DMA works on 32-bit aligned start source and destinations addresses */
  ETH_InitStruct->ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  /* Enabled Fixed Burst Mode (mix of INC4, INC8, INC16 and SINGLE DMA transactions */
  ETH_InitStruct->ETH_FixedBurst = ETH_FixedBurst_Enable;
  /* DMA transfer max burst length = 32 beats = 32 x 32bits */
  ETH_InitStruct->ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
 80053a8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  ETH_InitStruct->ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
 80053ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  /* Drops frames with with TCP/IP checksum errors */
  ETH_InitStruct->ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Disable; 
  /* Store and forward mode enabled for receive */
  ETH_InitStruct->ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
  /* Flush received frame that created FIFO overflow */
  ETH_InitStruct->ETH_FlushReceivedFrame = ETH_FlushReceivedFrame_Enable;
 80053b0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  /* Store and forward mode enabled for transmit */
  ETH_InitStruct->ETH_TransmitStoreForward = ETH_TransmitStoreForward_Enable;  
 80053b4:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  /* Threshold TXFIFO level set to 64 bytes (used when threshold mode is enabled) */
  ETH_InitStruct->ETH_TransmitThresholdControl = ETH_TransmitThresholdControl_64Bytes;
 80053b8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  /* Disable forwarding frames with errors (short frames, CRC,...)*/
  ETH_InitStruct->ETH_ForwardErrorFrames = ETH_ForwardErrorFrames_Disable;
 80053bc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  /* Disable undersized good frames */
  ETH_InitStruct->ETH_ForwardUndersizedGoodFrames = ETH_ForwardUndersizedGoodFrames_Disable;
 80053c0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  /* Threshold RXFIFO level set to 64 bytes (used when Cut through mode is enabled) */
  ETH_InitStruct->ETH_ReceiveThresholdControl = ETH_ReceiveThresholdControl_64Bytes;
 80053c4:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
  /* Disable Operate on second frame (transmit a second frame to FIFO without 
  waiting status of previous frame*/
  ETH_InitStruct->ETH_SecondFrameOperate = ETH_SecondFrameOperate_Disable;
 80053c8:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  ETH_InitStruct->ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  /* Enabled Fixed Burst Mode (mix of INC4, INC8, INC16 and SINGLE DMA transactions */
  ETH_InitStruct->ETH_FixedBurst = ETH_FixedBurst_Enable;
  /* DMA transfer max burst length = 32 beats = 32 x 32bits */
  ETH_InitStruct->ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
  ETH_InitStruct->ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
 80053cc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  /* DMA Ring mode skip length = 0 */
  ETH_InitStruct->ETH_DescriptorSkipLength = 0x0; 
 80053d0:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  /* Equal priority (round-robin) between transmit and receive DMA engines */
  ETH_InitStruct->ETH_DMAArbitration = ETH_DMAArbitration_RoundRobin_RxTx_1_1;
 80053d4:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 80053d8:	4770      	bx	lr
	...

080053dc <ETH_MACTransmissionCmd>:
  * @param  NewState: new state of the MAC transmission.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ETH_MACTransmissionCmd(FunctionalState NewState)
{ 
 80053dc:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	4c09      	ldr	r4, [pc, #36]	; (8005408 <ETH_MACTransmissionCmd+0x2c>)
 80053e2:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the MAC transmission */
    ETH->MACCR |= ETH_MACCR_TE;
 80053e4:	6823      	ldr	r3, [r4, #0]
{ 
  __IO uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80053e6:	b110      	cbz	r0, 80053ee <ETH_MACTransmissionCmd+0x12>
  {
    /* Enable the MAC transmission */
    ETH->MACCR |= ETH_MACCR_TE;
 80053e8:	f043 0308 	orr.w	r3, r3, #8
 80053ec:	e001      	b.n	80053f2 <ETH_MACTransmissionCmd+0x16>
  }
  else
  {
    /* Disable the MAC transmission */
    ETH->MACCR &= ~ETH_MACCR_TE;
 80053ee:	f023 0308 	bic.w	r3, r3, #8
 80053f2:	6023      	str	r3, [r4, #0]
  }

  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->MACCR;
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	9301      	str	r3, [sp, #4]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 80053f8:	2001      	movs	r0, #1
 80053fa:	f001 f98b 	bl	8006714 <Delay>
  ETH->MACCR = tmpreg;
 80053fe:	9b01      	ldr	r3, [sp, #4]
 8005400:	6023      	str	r3, [r4, #0]
}
 8005402:	b002      	add	sp, #8
 8005404:	bd10      	pop	{r4, pc}
 8005406:	bf00      	nop
 8005408:	40028000 	.word	0x40028000

0800540c <ETH_MACReceptionCmd>:
  * @param  NewState: new state of the MAC reception.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ETH_MACReceptionCmd(FunctionalState NewState)
{ 
 800540c:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	4c09      	ldr	r4, [pc, #36]	; (8005438 <ETH_MACReceptionCmd+0x2c>)
 8005412:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the MAC reception */
    ETH->MACCR |= ETH_MACCR_RE;
 8005414:	6823      	ldr	r3, [r4, #0]
{ 
  __IO uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005416:	b110      	cbz	r0, 800541e <ETH_MACReceptionCmd+0x12>
  {
    /* Enable the MAC reception */
    ETH->MACCR |= ETH_MACCR_RE;
 8005418:	f043 0304 	orr.w	r3, r3, #4
 800541c:	e001      	b.n	8005422 <ETH_MACReceptionCmd+0x16>
  }
  else
  {
    /* Disable the MAC reception */
    ETH->MACCR &= ~ETH_MACCR_RE; 
 800541e:	f023 0304 	bic.w	r3, r3, #4
 8005422:	6023      	str	r3, [r4, #0]
  }

  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->MACCR;
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	9301      	str	r3, [sp, #4]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 8005428:	2001      	movs	r0, #1
 800542a:	f001 f973 	bl	8006714 <Delay>
  ETH->MACCR = tmpreg;
 800542e:	9b01      	ldr	r3, [sp, #4]
 8005430:	6023      	str	r3, [r4, #0]
}
 8005432:	b002      	add	sp, #8
 8005434:	bd10      	pop	{r4, pc}
 8005436:	bf00      	nop
 8005438:	40028000 	.word	0x40028000

0800543c <ETH_MACAddressConfig>:
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *) (ETH_MAC_ADDR_HBASE + MacAddr)) = tmpreg;
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <ETH_MACAddressConfig+0x10>)
  uint32_t tmpreg;
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800543e:	888a      	ldrh	r2, [r1, #4]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *) (ETH_MAC_ADDR_HBASE + MacAddr)) = tmpreg;
 8005440:	50c2      	str	r2, [r0, r3]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *) (ETH_MAC_ADDR_LBASE + MacAddr)) = tmpreg;
 8005442:	3304      	adds	r3, #4
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *) (ETH_MAC_ADDR_HBASE + MacAddr)) = tmpreg;
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8005444:	680a      	ldr	r2, [r1, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *) (ETH_MAC_ADDR_LBASE + MacAddr)) = tmpreg;
 8005446:	50c2      	str	r2, [r0, r3]
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40028040 	.word	0x40028040

08005450 <ETH_Get_Received_Frame>:
  *   with polling method only).
  * @param  none
  * @retval Structure of type FrameTypeDef
  */
FrameTypeDef ETH_Get_Received_Frame(void)
{ 
 8005450:	b570      	push	{r4, r5, r6, lr}
  uint32_t framelength = 0;
  FrameTypeDef frame = {0,0,0}; 

  /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
  framelength = ((DMARxDescToGet->Status & ETH_DMARxDesc_FL) >> ETH_DMARxDesc_FrameLengthShift) - 4;
 8005452:	4908      	ldr	r1, [pc, #32]	; (8005474 <ETH_Get_Received_Frame+0x24>)
  frame.length = framelength;

  /* Get the address of the first frame descriptor and the buffer start address */ 
  frame.descriptor = DMA_RX_FRAME_infos->FS_Rx_Desc;
 8005454:	4d08      	ldr	r5, [pc, #32]	; (8005478 <ETH_Get_Received_Frame+0x28>)
{ 
  uint32_t framelength = 0;
  FrameTypeDef frame = {0,0,0}; 

  /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
  framelength = ((DMARxDescToGet->Status & ETH_DMARxDesc_FL) >> ETH_DMARxDesc_FrameLengthShift) - 4;
 8005456:	680c      	ldr	r4, [r1, #0]
  frame.length = framelength;

  /* Get the address of the first frame descriptor and the buffer start address */ 
  frame.descriptor = DMA_RX_FRAME_infos->FS_Rx_Desc;
 8005458:	682d      	ldr	r5, [r5, #0]
{ 
  uint32_t framelength = 0;
  FrameTypeDef frame = {0,0,0}; 

  /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
  framelength = ((DMARxDescToGet->Status & ETH_DMARxDesc_FL) >> ETH_DMARxDesc_FrameLengthShift) - 4;
 800545a:	6823      	ldr	r3, [r4, #0]
  frame.length = framelength;

  /* Get the address of the first frame descriptor and the buffer start address */ 
  frame.descriptor = DMA_RX_FRAME_infos->FS_Rx_Desc;
 800545c:	682e      	ldr	r6, [r5, #0]
  frame.buffer =(DMA_RX_FRAME_infos->FS_Rx_Desc)->Buffer1Addr;
 800545e:	682d      	ldr	r5, [r5, #0]
  /* Chained Mode */    
  /* Selects the next DMA Rx descriptor list for next buffer to read */ 
  DMARxDescToGet = (ETH_DMADESCTypeDef*) (DMARxDescToGet->Buffer2NextDescAddr);

  /* Return Frame */
  return (frame);
 8005460:	f3c3 430d 	ubfx	r3, r3, #16, #14
  framelength = ((DMARxDescToGet->Status & ETH_DMARxDesc_FL) >> ETH_DMARxDesc_FrameLengthShift) - 4;
  frame.length = framelength;

  /* Get the address of the first frame descriptor and the buffer start address */ 
  frame.descriptor = DMA_RX_FRAME_infos->FS_Rx_Desc;
  frame.buffer =(DMA_RX_FRAME_infos->FS_Rx_Desc)->Buffer1Addr;
 8005464:	68ad      	ldr	r5, [r5, #8]

  /* Update the ETHERNET DMA global Rx descriptor with next Rx descriptor */
  /* Chained Mode */    
  /* Selects the next DMA Rx descriptor list for next buffer to read */ 
  DMARxDescToGet = (ETH_DMADESCTypeDef*) (DMARxDescToGet->Buffer2NextDescAddr);
 8005466:	68e4      	ldr	r4, [r4, #12]
 8005468:	600c      	str	r4, [r1, #0]

  /* Return Frame */
  return (frame);
 800546a:	3b04      	subs	r3, #4
 800546c:	e880 0068 	stmia.w	r0, {r3, r5, r6}
}
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	bf00      	nop
 8005474:	20005450 	.word	0x20005450
 8005478:	20006cac 	.word	0x20006cac

0800547c <ETH_Prepare_Transmit_Descriptors>:
  * @brief  Prepares DMA Tx descriptors to transmit an ethernet frame
  * @param  FrameLength : length of the frame to send
  * @retval error status
  */
uint32_t ETH_Prepare_Transmit_Descriptors(u16 FrameLength)
{   
 800547c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t buf_count =0, size=0,i=0;
  __IO ETH_DMADESCTypeDef *DMATxDesc;

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if((DMATxDescToSet->Status & ETH_DMATxDesc_OWN) != (u32)RESET)
 800547e:	4c2d      	ldr	r4, [pc, #180]	; (8005534 <ETH_Prepare_Transmit_Descriptors+0xb8>)
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	2a00      	cmp	r2, #0
 8005486:	db50      	blt.n	800552a <ETH_Prepare_Transmit_Descriptors+0xae>
    return ETH_ERROR;
  }

  DMATxDesc = DMATxDescToSet;
  
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005488:	f240 55f4 	movw	r5, #1524	; 0x5f4
 800548c:	42a8      	cmp	r0, r5
 800548e:	d916      	bls.n	80054be <ETH_Prepare_Transmit_Descriptors+0x42>
  {
    buf_count = FrameLength/ETH_TX_BUF_SIZE;
 8005490:	fbb0 f1f5 	udiv	r1, r0, r5
 8005494:	b28a      	uxth	r2, r1
    if (FrameLength%ETH_TX_BUF_SIZE) buf_count++;
 8005496:	fb05 0111 	mls	r1, r5, r1, r0
 800549a:	b289      	uxth	r1, r1
 800549c:	b109      	cbz	r1, 80054a2 <ETH_Prepare_Transmit_Descriptors+0x26>
 800549e:	3201      	adds	r2, #1
 80054a0:	e001      	b.n	80054a6 <ETH_Prepare_Transmit_Descriptors+0x2a>
  }
  else buf_count =1;

  if (buf_count ==1)
 80054a2:	2a01      	cmp	r2, #1
 80054a4:	d00b      	beq.n	80054be <ETH_Prepare_Transmit_Descriptors+0x42>
      if (i== (buf_count-1))
      {
        /* Setting the last segment bit */
        DMATxDesc->Status |= ETH_DMATxDesc_LS;
        size = FrameLength - (buf_count-1)*ETH_TX_BUF_SIZE;
        DMATxDesc->ControlBufferSize = (size & ETH_DMATxDesc_TBS1);
 80054a6:	4924      	ldr	r1, [pc, #144]	; (8005538 <ETH_Prepare_Transmit_Descriptors+0xbc>)
 80054a8:	f200 50f4 	addw	r0, r0, #1524	; 0x5f4
 80054ac:	fb01 0002 	mla	r0, r1, r2, r0
 80054b0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80054b4:	2100      	movs	r1, #0
        /* Setting the first segment bit */
        DMATxDesc->Status |= ETH_DMATxDesc_FS;  
      }

      /* Program size */
      DMATxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATxDesc_TBS1);
 80054b6:	f240 56f4 	movw	r6, #1524	; 0x5f4
      
      if (i== (buf_count-1))
 80054ba:	1e57      	subs	r7, r2, #1
 80054bc:	e01c      	b.n	80054f8 <ETH_Prepare_Transmit_Descriptors+0x7c>
  else buf_count =1;

  if (buf_count ==1)
  {
    /*set LAST and FIRST segment */
    DMATxDesc->Status |=ETH_DMATxDesc_FS|ETH_DMATxDesc_LS;
 80054be:	681a      	ldr	r2, [r3, #0]
    /* Set frame size */
    DMATxDesc->ControlBufferSize = (FrameLength & ETH_DMATxDesc_TBS1);
 80054c0:	f3c0 000c 	ubfx	r0, r0, #0, #13
  else buf_count =1;

  if (buf_count ==1)
  {
    /*set LAST and FIRST segment */
    DMATxDesc->Status |=ETH_DMATxDesc_FS|ETH_DMATxDesc_LS;
 80054c4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80054c8:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    DMATxDesc->ControlBufferSize = (FrameLength & ETH_DMATxDesc_TBS1);
 80054ca:	6058      	str	r0, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    DMATxDesc->Status |= ETH_DMATxDesc_OWN;
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80054d2:	601a      	str	r2, [r3, #0]
    DMATxDesc= (ETH_DMADESCTypeDef *)(DMATxDesc->Buffer2NextDescAddr);
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	e01a      	b.n	800550e <ETH_Prepare_Transmit_Descriptors+0x92>
        /* Setting the first segment bit */
        DMATxDesc->Status |= ETH_DMATxDesc_FS;  
      }

      /* Program size */
      DMATxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATxDesc_TBS1);
 80054d8:	605e      	str	r6, [r3, #4]
      
      if (i== (buf_count-1))
 80054da:	428f      	cmp	r7, r1
      {
        /* Setting the last segment bit */
        DMATxDesc->Status |= ETH_DMATxDesc_LS;
 80054dc:	bf01      	itttt	eq
 80054de:	681d      	ldreq	r5, [r3, #0]
 80054e0:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 80054e4:	601d      	streq	r5, [r3, #0]
        size = FrameLength - (buf_count-1)*ETH_TX_BUF_SIZE;
        DMATxDesc->ControlBufferSize = (size & ETH_DMATxDesc_TBS1);
 80054e6:	6058      	streq	r0, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      DMATxDesc->Status |= ETH_DMATxDesc_OWN;
 80054e8:	681d      	ldr	r5, [r3, #0]
    DMATxDesc->Status |= ETH_DMATxDesc_OWN;
    DMATxDesc= (ETH_DMADESCTypeDef *)(DMATxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< buf_count; i++)
 80054ea:	3101      	adds	r1, #1
        size = FrameLength - (buf_count-1)*ETH_TX_BUF_SIZE;
        DMATxDesc->ControlBufferSize = (size & ETH_DMATxDesc_TBS1);
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      DMATxDesc->Status |= ETH_DMATxDesc_OWN;
 80054ec:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80054f0:	601d      	str	r5, [r3, #0]
    DMATxDesc->Status |= ETH_DMATxDesc_OWN;
    DMATxDesc= (ETH_DMADESCTypeDef *)(DMATxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< buf_count; i++)
 80054f2:	4291      	cmp	r1, r2
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      DMATxDesc->Status |= ETH_DMATxDesc_OWN;

      DMATxDesc = (ETH_DMADESCTypeDef *)(DMATxDesc->Buffer2NextDescAddr);
 80054f4:	68db      	ldr	r3, [r3, #12]
    DMATxDesc->Status |= ETH_DMATxDesc_OWN;
    DMATxDesc= (ETH_DMADESCTypeDef *)(DMATxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< buf_count; i++)
 80054f6:	d00a      	beq.n	800550e <ETH_Prepare_Transmit_Descriptors+0x92>
    {
      /* Clear FIRST and LAST segment bits */
      DMATxDesc->Status &= ~(ETH_DMATxDesc_FS | ETH_DMATxDesc_LS);
 80054f8:	681d      	ldr	r5, [r3, #0]
 80054fa:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80054fe:	601d      	str	r5, [r3, #0]
      
      if (i==0) 
 8005500:	2900      	cmp	r1, #0
 8005502:	d1e9      	bne.n	80054d8 <ETH_Prepare_Transmit_Descriptors+0x5c>
      {
        /* Setting the first segment bit */
        DMATxDesc->Status |= ETH_DMATxDesc_FS;  
 8005504:	681d      	ldr	r5, [r3, #0]
 8005506:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800550a:	601d      	str	r5, [r3, #0]
 800550c:	e7e4      	b.n	80054d8 <ETH_Prepare_Transmit_Descriptors+0x5c>

      DMATxDesc = (ETH_DMADESCTypeDef *)(DMATxDesc->Buffer2NextDescAddr);
    }
  }
  
  DMATxDescToSet = DMATxDesc;
 800550e:	6023      	str	r3, [r4, #0]

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if ((ETH->DMASR & ETH_DMASR_TBUS) != (u32)RESET)
 8005510:	f241 0214 	movw	r2, #4116	; 0x1014
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <ETH_Prepare_Transmit_Descriptors+0xc0>)
 8005516:	5899      	ldr	r1, [r3, r2]
 8005518:	0749      	lsls	r1, r1, #29
 800551a:	d508      	bpl.n	800552e <ETH_Prepare_Transmit_Descriptors+0xb2>
  {
    /* Clear TBUS ETHERNET DMA flag */
    ETH->DMASR = ETH_DMASR_TBUS;
 800551c:	2104      	movs	r1, #4
 800551e:	5099      	str	r1, [r3, r2]
    /* Resume DMA transmission*/
    ETH->DMATPDR = 0;
 8005520:	f241 0204 	movw	r2, #4100	; 0x1004
 8005524:	2100      	movs	r1, #0
 8005526:	5099      	str	r1, [r3, r2]
 8005528:	e001      	b.n	800552e <ETH_Prepare_Transmit_Descriptors+0xb2>

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if((DMATxDescToSet->Status & ETH_DMATxDesc_OWN) != (u32)RESET)
  {  
    /* Return ERROR: OWN bit set */
    return ETH_ERROR;
 800552a:	2000      	movs	r0, #0
 800552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    /* Resume DMA transmission*/
    ETH->DMATPDR = 0;
  }

  /* Return SUCCESS */
  return ETH_SUCCESS;   
 800552e:	2001      	movs	r0, #1
}
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005532:	bf00      	nop
 8005534:	20005454 	.word	0x20005454
 8005538:	fffffa0c 	.word	0xfffffa0c
 800553c:	40028000 	.word	0x40028000

08005540 <ETH_DMARxDescChainInit>:
{
  uint32_t i = 0;
  ETH_DMADESCTypeDef *DMARxDesc;
  
  /* Set the DMARxDescToGet pointer with the first one of the DMARxDescTab list */
  DMARxDescToGet = DMARxDescTab; 
 8005540:	4b14      	ldr	r3, [pc, #80]	; (8005594 <ETH_DMARxDescChainInit+0x54>)
  * @param  RxBuff: Pointer on the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval None
  */
void ETH_DMARxDescChainInit(ETH_DMADESCTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8005542:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;
  ETH_DMADESCTypeDef *DMARxDesc;
  
  /* Set the DMARxDescToGet pointer with the first one of the DMARxDescTab list */
  DMARxDescToGet = DMARxDescTab; 
 8005544:	6018      	str	r0, [r3, #0]
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8005546:	2400      	movs	r4, #0
 8005548:	f100 0320 	add.w	r3, r0, #32
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARxDesc_OWN;
 800554c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARxDesc_RCH | (uint32_t)ETH_RX_BUF_SIZE;  
 8005550:	f244 56f4 	movw	r6, #17908	; 0x45f4
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005554:	f240 57f4 	movw	r7, #1524	; 0x5f4

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8005558:	f102 3eff 	add.w	lr, r2, #4294967295
  ETH_DMADESCTypeDef *DMARxDesc;
  
  /* Set the DMARxDescToGet pointer with the first one of the DMARxDescTab list */
  DMARxDescToGet = DMARxDescTab; 
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800555c:	4294      	cmp	r4, r2
 800555e:	d010      	beq.n	8005582 <ETH_DMARxDescChainInit+0x42>
    DMARxDesc->Status = ETH_DMARxDesc_OWN;

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARxDesc_RCH | (uint32_t)ETH_RX_BUF_SIZE;  
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005560:	fb07 1c04 	mla	ip, r7, r4, r1
 8005564:	f843 cc18 	str.w	ip, [r3, #-24]

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8005568:	4574      	cmp	r4, lr
 800556a:	bf2c      	ite	cs
 800556c:	4684      	movcs	ip, r0
 800556e:	469c      	movcc	ip, r3
  for(i=0; i < RxBuffCount; i++)
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARxDesc_OWN;
 8005570:	f843 5c20 	str.w	r5, [r3, #-32]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARxDesc_RCH | (uint32_t)ETH_RX_BUF_SIZE;  
 8005574:	f843 6c1c 	str.w	r6, [r3, #-28]

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8005578:	f843 cc14 	str.w	ip, [r3, #-20]
  ETH_DMADESCTypeDef *DMARxDesc;
  
  /* Set the DMARxDescToGet pointer with the first one of the DMARxDescTab list */
  DMARxDescToGet = DMARxDescTab; 
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800557c:	3401      	adds	r4, #1
 800557e:	3320      	adds	r3, #32
 8005580:	e7ec      	b.n	800555c <ETH_DMARxDescChainInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
    }
  }

  /* Set Receive Descriptor List Address Register */
  ETH->DMARDLAR = (uint32_t) DMARxDescTab;
 8005582:	f241 030c 	movw	r3, #4108	; 0x100c
 8005586:	4a04      	ldr	r2, [pc, #16]	; (8005598 <ETH_DMARxDescChainInit+0x58>)
 8005588:	50d0      	str	r0, [r2, r3]

  DMA_RX_FRAME_infos = &RX_Frame_Descriptor;
 800558a:	4b04      	ldr	r3, [pc, #16]	; (800559c <ETH_DMARxDescChainInit+0x5c>)
 800558c:	4a04      	ldr	r2, [pc, #16]	; (80055a0 <ETH_DMARxDescChainInit+0x60>)
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005592:	bf00      	nop
 8005594:	20005450 	.word	0x20005450
 8005598:	40028000 	.word	0x40028000
 800559c:	20006cac 	.word	0x20006cac
 80055a0:	20005444 	.word	0x20005444

080055a4 <ETH_CheckFrameReceived>:
  * @retval Returns 1 when a frame is received, 0 if none.
  */
uint32_t ETH_CheckFrameReceived(void)
{
  /* check if last segment */
  if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 80055a4:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <ETH_CheckFrameReceived+0x74>)
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	6819      	ldr	r1, [r3, #0]
 80055aa:	2900      	cmp	r1, #0
  * @brief  This function polls for a frame reception
  * @param  None
  * @retval Returns 1 when a frame is received, 0 if none.
  */
uint32_t ETH_CheckFrameReceived(void)
{
 80055ac:	b510      	push	{r4, lr}
  /* check if last segment */
  if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 80055ae:	db0e      	blt.n	80055ce <ETH_CheckFrameReceived+0x2a>
     ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) != (uint32_t)RESET)) 
 80055b0:	6819      	ldr	r1, [r3, #0]
  * @retval Returns 1 when a frame is received, 0 if none.
  */
uint32_t ETH_CheckFrameReceived(void)
{
  /* check if last segment */
  if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 80055b2:	05cc      	lsls	r4, r1, #23
 80055b4:	d50b      	bpl.n	80055ce <ETH_CheckFrameReceived+0x2a>
     ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) != (uint32_t)RESET)) 
  {
    DMA_RX_FRAME_infos->Seg_Count++;
 80055b6:	4a19      	ldr	r2, [pc, #100]	; (800561c <ETH_CheckFrameReceived+0x78>)
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	6891      	ldr	r1, [r2, #8]
 80055bc:	3101      	adds	r1, #1
 80055be:	6091      	str	r1, [r2, #8]
    if (DMA_RX_FRAME_infos->Seg_Count == 1)
 80055c0:	6891      	ldr	r1, [r2, #8]
 80055c2:	2901      	cmp	r1, #1
    {
      DMA_RX_FRAME_infos->FS_Rx_Desc = DMARxDescToGet;
 80055c4:	bf08      	it	eq
 80055c6:	6013      	streq	r3, [r2, #0]
    }
    DMA_RX_FRAME_infos->LS_Rx_Desc = DMARxDescToGet;
    return 1;
 80055c8:	2001      	movs	r0, #1
    DMA_RX_FRAME_infos->Seg_Count++;
    if (DMA_RX_FRAME_infos->Seg_Count == 1)
    {
      DMA_RX_FRAME_infos->FS_Rx_Desc = DMARxDescToGet;
    }
    DMA_RX_FRAME_infos->LS_Rx_Desc = DMARxDescToGet;
 80055ca:	6053      	str	r3, [r2, #4]
    return 1;
 80055cc:	bd10      	pop	{r4, pc}
  }

  /* check if first segment */
  else if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	2900      	cmp	r1, #0
 80055d2:	db0d      	blt.n	80055f0 <ETH_CheckFrameReceived+0x4c>
          ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) != (uint32_t)RESET)&&
 80055d4:	6819      	ldr	r1, [r3, #0]
    DMA_RX_FRAME_infos->LS_Rx_Desc = DMARxDescToGet;
    return 1;
  }

  /* check if first segment */
  else if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 80055d6:	0588      	lsls	r0, r1, #22
 80055d8:	d50a      	bpl.n	80055f0 <ETH_CheckFrameReceived+0x4c>
          ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) != (uint32_t)RESET)&&
            ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) == (uint32_t)RESET))
 80055da:	6818      	ldr	r0, [r3, #0]
    return 1;
  }

  /* check if first segment */
  else if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
          ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) != (uint32_t)RESET)&&
 80055dc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80055e0:	d106      	bne.n	80055f0 <ETH_CheckFrameReceived+0x4c>
            ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) == (uint32_t)RESET))
  {
    DMA_RX_FRAME_infos->FS_Rx_Desc = DMARxDescToGet;
 80055e2:	490e      	ldr	r1, [pc, #56]	; (800561c <ETH_CheckFrameReceived+0x78>)
 80055e4:	6809      	ldr	r1, [r1, #0]
    DMA_RX_FRAME_infos->LS_Rx_Desc = NULL;
    DMA_RX_FRAME_infos->Seg_Count = 1;   
 80055e6:	2401      	movs	r4, #1
  /* check if first segment */
  else if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
          ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) != (uint32_t)RESET)&&
            ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) == (uint32_t)RESET))
  {
    DMA_RX_FRAME_infos->FS_Rx_Desc = DMARxDescToGet;
 80055e8:	600b      	str	r3, [r1, #0]
    DMA_RX_FRAME_infos->LS_Rx_Desc = NULL;
 80055ea:	6048      	str	r0, [r1, #4]
    DMA_RX_FRAME_infos->Seg_Count = 1;   
 80055ec:	608c      	str	r4, [r1, #8]
 80055ee:	e00e      	b.n	800560e <ETH_CheckFrameReceived+0x6a>
    DMARxDescToGet = (ETH_DMADESCTypeDef*) (DMARxDescToGet->Buffer2NextDescAddr);
  }

  /* check if intermediate segment */ 
  else if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 80055f0:	6819      	ldr	r1, [r3, #0]
 80055f2:	2900      	cmp	r1, #0
 80055f4:	db0e      	blt.n	8005614 <ETH_CheckFrameReceived+0x70>
          ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) == (uint32_t)RESET)&&
 80055f6:	6818      	ldr	r0, [r3, #0]
    DMA_RX_FRAME_infos->Seg_Count = 1;   
    DMARxDescToGet = (ETH_DMADESCTypeDef*) (DMARxDescToGet->Buffer2NextDescAddr);
  }

  /* check if intermediate segment */ 
  else if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 80055f8:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80055fc:	d10a      	bne.n	8005614 <ETH_CheckFrameReceived+0x70>
          ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) == (uint32_t)RESET)&&
            ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) == (uint32_t)RESET))
 80055fe:	6819      	ldr	r1, [r3, #0]
    DMARxDescToGet = (ETH_DMADESCTypeDef*) (DMARxDescToGet->Buffer2NextDescAddr);
  }

  /* check if intermediate segment */ 
  else if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
          ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) == (uint32_t)RESET)&&
 8005600:	05c9      	lsls	r1, r1, #23
 8005602:	d408      	bmi.n	8005616 <ETH_CheckFrameReceived+0x72>
            ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) == (uint32_t)RESET))
  {
    (DMA_RX_FRAME_infos->Seg_Count) ++;
 8005604:	4905      	ldr	r1, [pc, #20]	; (800561c <ETH_CheckFrameReceived+0x78>)
 8005606:	680c      	ldr	r4, [r1, #0]
 8005608:	68a1      	ldr	r1, [r4, #8]
 800560a:	3101      	adds	r1, #1
 800560c:	60a1      	str	r1, [r4, #8]
    DMARxDescToGet = (ETH_DMADESCTypeDef*) (DMARxDescToGet->Buffer2NextDescAddr);
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	bd10      	pop	{r4, pc}
  } 
  return 0;
 8005614:	2000      	movs	r0, #0
}
 8005616:	bd10      	pop	{r4, pc}
 8005618:	20005450 	.word	0x20005450
 800561c:	20006cac 	.word	0x20006cac

08005620 <ETH_DMATxDescChainInit>:
{
  uint32_t i = 0;
  ETH_DMADESCTypeDef *DMATxDesc;
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  DMATxDescToSet = DMATxDescTab;
 8005620:	4b10      	ldr	r3, [pc, #64]	; (8005664 <ETH_DMATxDescChainInit+0x44>)
  * @param  TxBuff: Pointer on the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval None
  */
void ETH_DMATxDescChainInit(ETH_DMADESCTypeDef *DMATxDescTab, uint8_t* TxBuff, uint32_t TxBuffCount)
{
 8005622:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;
  ETH_DMADESCTypeDef *DMATxDesc;
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  DMATxDescToSet = DMATxDescTab;
 8005624:	6018      	str	r0, [r3, #0]
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8005626:	2400      	movs	r4, #0
 8005628:	f100 0320 	add.w	r3, r0, #32
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    DMATxDesc = DMATxDescTab + i;
    /* Set Second Address Chained bit */
    DMATxDesc->Status = ETH_DMATxDesc_TCH;  
 800562c:	f44f 1580 	mov.w	r5, #1048576	; 0x100000

    /* Set Buffer1 address pointer */
    DMATxDesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8005630:	f240 56f4 	movw	r6, #1524	; 0x5f4
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8005634:	1e57      	subs	r7, r2, #1
  ETH_DMADESCTypeDef *DMATxDesc;
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  DMATxDescToSet = DMATxDescTab;
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8005636:	4294      	cmp	r4, r2
 8005638:	d00e      	beq.n	8005658 <ETH_DMATxDescChainInit+0x38>
    DMATxDesc = DMATxDescTab + i;
    /* Set Second Address Chained bit */
    DMATxDesc->Status = ETH_DMATxDesc_TCH;  

    /* Set Buffer1 address pointer */
    DMATxDesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800563a:	fb06 1e04 	mla	lr, r6, r4, r1
 800563e:	f843 ec18 	str.w	lr, [r3, #-24]
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      DMATxDesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8005642:	42bc      	cmp	r4, r7
 8005644:	bf2c      	ite	cs
 8005646:	4686      	movcs	lr, r0
 8005648:	469e      	movcc	lr, r3
  for(i=0; i < TxBuffCount; i++)
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    DMATxDesc = DMATxDescTab + i;
    /* Set Second Address Chained bit */
    DMATxDesc->Status = ETH_DMATxDesc_TCH;  
 800564a:	f843 5c20 	str.w	r5, [r3, #-32]
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      DMATxDesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800564e:	f843 ec14 	str.w	lr, [r3, #-20]
  ETH_DMADESCTypeDef *DMATxDesc;
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  DMATxDescToSet = DMATxDescTab;
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8005652:	3401      	adds	r4, #1
 8005654:	3320      	adds	r3, #32
 8005656:	e7ee      	b.n	8005636 <ETH_DMATxDescChainInit+0x16>
      DMATxDesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
    }
  }

  /* Set Transmit Desciptor List Address Register */
  ETH->DMATDLAR = (uint32_t) DMATxDescTab;
 8005658:	f241 0310 	movw	r3, #4112	; 0x1010
 800565c:	4a02      	ldr	r2, [pc, #8]	; (8005668 <ETH_DMATxDescChainInit+0x48>)
 800565e:	50d0      	str	r0, [r2, r3]
 8005660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005662:	bf00      	nop
 8005664:	20005454 	.word	0x20005454
 8005668:	40028000 	.word	0x40028000

0800566c <ETH_DMATxDescChecksumInsertionConfig>:
{
  /* Check the parameters */
  assert_param(IS_ETH_DMA_TXDESC_CHECKSUM(DMATxDesc_Checksum));
  
  /* Set the selected DMA Tx desc checksum insertion control */
  DMATxDesc->Status |= DMATxDesc_Checksum;
 800566c:	6803      	ldr	r3, [r0, #0]
 800566e:	4319      	orrs	r1, r3
 8005670:	6001      	str	r1, [r0, #0]
 8005672:	4770      	bx	lr

08005674 <ETH_SoftwareReset>:
  */
void ETH_SoftwareReset(void)
{
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  ETH->DMABMR |= ETH_DMABMR_SR;
 8005674:	4a02      	ldr	r2, [pc, #8]	; (8005680 <ETH_SoftwareReset+0xc>)
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	4770      	bx	lr
 8005680:	40029000 	.word	0x40029000

08005684 <ETH_GetSoftwareResetStatus>:
  * @retval The new state of DMA Bus Mode register SR bit (SET or RESET).
  */
FlagStatus ETH_GetSoftwareResetStatus(void)
{
  FlagStatus bitstatus = RESET;
  if((ETH->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8005684:	4b02      	ldr	r3, [pc, #8]	; (8005690 <ETH_GetSoftwareResetStatus+0xc>)
 8005686:	6818      	ldr	r0, [r3, #0]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005688:	f000 0001 	and.w	r0, r0, #1
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40029000 	.word	0x40029000

08005694 <ETH_FlushTransmitFIFO>:
  * @brief  Clears the ETHERNET transmit FIFO.
  * @param  None
  * @retval None
  */
void ETH_FlushTransmitFIFO(void)
{
 8005694:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmpreg = 0;
 8005696:	2300      	movs	r3, #0
  /* Set the Flush Transmit FIFO bit */
  ETH->DMAOMR |= ETH_DMAOMR_FTF;
 8005698:	4d08      	ldr	r5, [pc, #32]	; (80056bc <ETH_FlushTransmitFIFO+0x28>)
  * @param  None
  * @retval None
  */
void ETH_FlushTransmitFIFO(void)
{
  __IO uint32_t tmpreg = 0;
 800569a:	9301      	str	r3, [sp, #4]
  /* Set the Flush Transmit FIFO bit */
  ETH->DMAOMR |= ETH_DMAOMR_FTF;
 800569c:	f241 0418 	movw	r4, #4120	; 0x1018
  
  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->DMAOMR;
  _eth_delay_(ETH_REG_WRITE_DELAY);
 80056a0:	2001      	movs	r0, #1
  */
void ETH_FlushTransmitFIFO(void)
{
  __IO uint32_t tmpreg = 0;
  /* Set the Flush Transmit FIFO bit */
  ETH->DMAOMR |= ETH_DMAOMR_FTF;
 80056a2:	592b      	ldr	r3, [r5, r4]
 80056a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a8:	512b      	str	r3, [r5, r4]
  
  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->DMAOMR;
 80056aa:	592b      	ldr	r3, [r5, r4]
 80056ac:	9301      	str	r3, [sp, #4]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 80056ae:	f001 f831 	bl	8006714 <Delay>
  ETH->DMAOMR = tmpreg;
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	512b      	str	r3, [r5, r4]
}
 80056b6:	b003      	add	sp, #12
 80056b8:	bd30      	pop	{r4, r5, pc}
 80056ba:	bf00      	nop
 80056bc:	40028000 	.word	0x40028000

080056c0 <ETH_Start>:
  * @brief  Enables ENET MAC and DMA reception/transmission 
  * @param  None
  * @retval None
  */
void ETH_Start(void)
{
 80056c0:	b508      	push	{r3, lr}
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionCmd(ENABLE);
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7ff fe8a 	bl	80053dc <ETH_MACTransmissionCmd>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionCmd(ENABLE);
 80056c8:	2001      	movs	r0, #1
 80056ca:	f7ff fe9f 	bl	800540c <ETH_MACReceptionCmd>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO();
 80056ce:	f7ff ffe1 	bl	8005694 <ETH_FlushTransmitFIFO>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA transmission */
    ETH->DMAOMR |= ETH_DMAOMR_ST;  
 80056d2:	4a06      	ldr	r2, [pc, #24]	; (80056ec <ETH_Start+0x2c>)
 80056d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80056d8:	58d1      	ldr	r1, [r2, r3]
 80056da:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80056de:	50d1      	str	r1, [r2, r3]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA reception */
    ETH->DMAOMR |= ETH_DMAOMR_SR;  
 80056e0:	58d1      	ldr	r1, [r2, r3]
 80056e2:	f041 0102 	orr.w	r1, r1, #2
 80056e6:	50d1      	str	r1, [r2, r3]
 80056e8:	bd08      	pop	{r3, pc}
 80056ea:	bf00      	nop
 80056ec:	40028000 	.word	0x40028000

080056f0 <ETH_DMATransmissionCmd>:
  * @param  NewState: new state of the DMA transmission.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ETH_DMATransmissionCmd(FunctionalState NewState)
{ 
 80056f0:	4a05      	ldr	r2, [pc, #20]	; (8005708 <ETH_DMATransmissionCmd+0x18>)
 80056f2:	f241 0318 	movw	r3, #4120	; 0x1018
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA transmission */
    ETH->DMAOMR |= ETH_DMAOMR_ST;  
 80056f6:	58d1      	ldr	r1, [r2, r3]
void ETH_DMATransmissionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80056f8:	b110      	cbz	r0, 8005700 <ETH_DMATransmissionCmd+0x10>
  {
    /* Enable the DMA transmission */
    ETH->DMAOMR |= ETH_DMAOMR_ST;  
 80056fa:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80056fe:	e001      	b.n	8005704 <ETH_DMATransmissionCmd+0x14>
  }
  else
  {
    /* Disable the DMA transmission */
    ETH->DMAOMR &= ~ETH_DMAOMR_ST;
 8005700:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005704:	50d1      	str	r1, [r2, r3]
 8005706:	4770      	bx	lr
 8005708:	40028000 	.word	0x40028000

0800570c <ETH_DMAReceptionCmd>:
  * @param  NewState: new state of the DMA reception.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ETH_DMAReceptionCmd(FunctionalState NewState)
{ 
 800570c:	4a05      	ldr	r2, [pc, #20]	; (8005724 <ETH_DMAReceptionCmd+0x18>)
 800570e:	f241 0318 	movw	r3, #4120	; 0x1018
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA reception */
    ETH->DMAOMR |= ETH_DMAOMR_SR;  
 8005712:	58d1      	ldr	r1, [r2, r3]
void ETH_DMAReceptionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005714:	b110      	cbz	r0, 800571c <ETH_DMAReceptionCmd+0x10>
  {
    /* Enable the DMA reception */
    ETH->DMAOMR |= ETH_DMAOMR_SR;  
 8005716:	f041 0102 	orr.w	r1, r1, #2
 800571a:	e001      	b.n	8005720 <ETH_DMAReceptionCmd+0x14>
  }
  else
  {
    /* Disable the DMA reception */
    ETH->DMAOMR &= ~ETH_DMAOMR_SR;
 800571c:	f021 0102 	bic.w	r1, r1, #2
 8005720:	50d1      	str	r1, [r2, r3]
 8005722:	4770      	bx	lr
 8005724:	40028000 	.word	0x40028000

08005728 <ETH_Stop>:
  * @brief  Disables ENET MAC and DMA reception/transmission 
  * @param  None
  * @retval None
  */
void ETH_Stop(void)
{  
 8005728:	b508      	push	{r3, lr}
  /* Stop DMA transmission */
  ETH_DMATransmissionCmd(DISABLE);
 800572a:	2000      	movs	r0, #0
 800572c:	f7ff ffe0 	bl	80056f0 <ETH_DMATransmissionCmd>

  /* Stop DMA reception */
  ETH_DMAReceptionCmd(DISABLE);
 8005730:	2000      	movs	r0, #0
 8005732:	f7ff ffeb 	bl	800570c <ETH_DMAReceptionCmd>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionCmd(DISABLE);
 8005736:	2000      	movs	r0, #0
 8005738:	f7ff fe68 	bl	800540c <ETH_MACReceptionCmd>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO();
 800573c:	f7ff ffaa 	bl	8005694 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionCmd(DISABLE);
 8005740:	2000      	movs	r0, #0
}
 8005742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO();

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionCmd(DISABLE);
 8005746:	f7ff be49 	b.w	80053dc <ETH_MACTransmissionCmd>
	...

0800574c <ETH_ReadPHYRegister>:
  *     @arg More PHY register could be read depending on the used PHY
  * @retval ETH_ERROR: in case of timeout
  *         MAC MIIDR register value: Data read from the selected PHY register (correct read )
  */
uint16_t ETH_ReadPHYRegister(uint16_t PHYAddress, uint16_t PHYReg)
{
 800574c:	b082      	sub	sp, #8
  uint32_t tmpreg = 0;     
  __IO uint32_t timeout = 0;
 800574e:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_ETH_PHY_ADDRESS(PHYAddress));
  assert_param(IS_ETH_PHY_REG(PHYReg));
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = ETH->MACMIIAR;
 8005750:	4a11      	ldr	r2, [pc, #68]	; (8005798 <ETH_ReadPHYRegister+0x4c>)
  *         MAC MIIDR register value: Data read from the selected PHY register (correct read )
  */
uint16_t ETH_ReadPHYRegister(uint16_t PHYAddress, uint16_t PHYReg)
{
  uint32_t tmpreg = 0;     
  __IO uint32_t timeout = 0;
 8005752:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ETH_PHY_ADDRESS(PHYAddress));
  assert_param(IS_ETH_PHY_REG(PHYReg));
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = ETH->MACMIIAR;
 8005754:	6913      	ldr	r3, [r2, #16]
 8005756:	0189      	lsls	r1, r1, #6
 8005758:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 800575c:	f003 031c 	and.w	r3, r3, #28
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~MACMIIAR_CR_MASK;
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)PHYAddress<<11) & ETH_MACMIIAR_PA);/* Set the PHY device address */
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);      /* Set the PHY register address */
 8005760:	02c0      	lsls	r0, r0, #11
 8005762:	430b      	orrs	r3, r1
 8005764:	b280      	uxth	r0, r0
  tmpreg &= ~ETH_MACMIIAR_MW;                              /* Set the read mode */
 8005766:	4303      	orrs	r3, r0
  tmpreg |= ETH_MACMIIAR_MB;                               /* Set the MII Busy bit */
 8005768:	f043 0301 	orr.w	r3, r3, #1
  /* Check for the Busy flag */
  do
  {
    timeout++;
    tmpreg = ETH->MACMIIAR;
  } while ((tmpreg & ETH_MACMIIAR_MB) && (timeout < (uint32_t)PHY_READ_TO));
 800576c:	490b      	ldr	r1, [pc, #44]	; (800579c <ETH_ReadPHYRegister+0x50>)
  tmpreg |=(((uint32_t)PHYAddress<<11) & ETH_MACMIIAR_PA);/* Set the PHY device address */
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);      /* Set the PHY register address */
  tmpreg &= ~ETH_MACMIIAR_MW;                              /* Set the read mode */
  tmpreg |= ETH_MACMIIAR_MB;                               /* Set the MII Busy bit */
  /* Write the result value into the MII Address register */
  ETH->MACMIIAR = tmpreg;
 800576e:	6113      	str	r3, [r2, #16]
  /* Check for the Busy flag */
  do
  {
    timeout++;
 8005770:	9b01      	ldr	r3, [sp, #4]
 8005772:	3301      	adds	r3, #1
 8005774:	9301      	str	r3, [sp, #4]
    tmpreg = ETH->MACMIIAR;
 8005776:	6913      	ldr	r3, [r2, #16]
  } while ((tmpreg & ETH_MACMIIAR_MB) && (timeout < (uint32_t)PHY_READ_TO));
 8005778:	07db      	lsls	r3, r3, #31
 800577a:	d502      	bpl.n	8005782 <ETH_ReadPHYRegister+0x36>
 800577c:	9b01      	ldr	r3, [sp, #4]
 800577e:	428b      	cmp	r3, r1
 8005780:	d9f6      	bls.n	8005770 <ETH_ReadPHYRegister+0x24>
  /* Return ERROR in case of timeout */
  if(timeout == PHY_READ_TO)
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <ETH_ReadPHYRegister+0x54>)
 8005784:	9a01      	ldr	r2, [sp, #4]
 8005786:	429a      	cmp	r2, r3
  {
    return (uint16_t)ETH_ERROR;
  }
  
  /* Return data register value */
  return (uint16_t)(ETH->MACMIIDR);
 8005788:	bf1b      	ittet	ne
 800578a:	4b03      	ldrne	r3, [pc, #12]	; (8005798 <ETH_ReadPHYRegister+0x4c>)
 800578c:	6958      	ldrne	r0, [r3, #20]
    tmpreg = ETH->MACMIIAR;
  } while ((tmpreg & ETH_MACMIIAR_MB) && (timeout < (uint32_t)PHY_READ_TO));
  /* Return ERROR in case of timeout */
  if(timeout == PHY_READ_TO)
  {
    return (uint16_t)ETH_ERROR;
 800578e:	2000      	moveq	r0, #0
  }
  
  /* Return data register value */
  return (uint16_t)(ETH->MACMIIDR);
 8005790:	b280      	uxthne	r0, r0
}
 8005792:	b002      	add	sp, #8
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40028000 	.word	0x40028000
 800579c:	0004fffe 	.word	0x0004fffe
 80057a0:	0004ffff 	.word	0x0004ffff

080057a4 <ETH_WritePHYRegister>:
  * @param  PHYValue: the value to write
  * @retval ETH_ERROR: in case of timeout
  *         ETH_SUCCESS: for correct write
  */
uint32_t ETH_WritePHYRegister(uint16_t PHYAddress, uint16_t PHYReg, uint16_t PHYValue)
{
 80057a4:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmpreg = 0;
  __IO uint32_t timeout = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ETH_PHY_ADDRESS(PHYAddress));
  assert_param(IS_ETH_PHY_REG(PHYReg));

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = ETH->MACMIIAR;
 80057aa:	4b10      	ldr	r3, [pc, #64]	; (80057ec <ETH_WritePHYRegister+0x48>)
 80057ac:	691c      	ldr	r4, [r3, #16]
  tmpreg |=(((uint32_t)PHYAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);      /* Set the PHY register address */
  tmpreg |= ETH_MACMIIAR_MW;                               /* Set the write mode */
  tmpreg |= ETH_MACMIIAR_MB;                               /* Set the MII Busy bit */
  /* Give the value to the MII data register */
  ETH->MACMIIDR = PHYValue;
 80057ae:	615a      	str	r2, [r3, #20]
 80057b0:	f004 041c 	and.w	r4, r4, #28
 80057b4:	0189      	lsls	r1, r1, #6
 80057b6:	f044 0403 	orr.w	r4, r4, #3
 80057ba:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg &= ~MACMIIAR_CR_MASK;
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)PHYAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);      /* Set the PHY register address */
  tmpreg |= ETH_MACMIIAR_MW;                               /* Set the write mode */
  tmpreg |= ETH_MACMIIAR_MB;                               /* Set the MII Busy bit */
 80057be:	02c0      	lsls	r0, r0, #11
 80057c0:	4321      	orrs	r1, r4
 80057c2:	b280      	uxth	r0, r0
 80057c4:	4301      	orrs	r1, r0
  /* Give the value to the MII data register */
  ETH->MACMIIDR = PHYValue;
  /* Write the result value into the MII Address register */
  ETH->MACMIIAR = tmpreg;
 80057c6:	6119      	str	r1, [r3, #16]
  /* Check for the Busy flag */
  do
  {
    timeout++;
    tmpreg = ETH->MACMIIAR;
  } while ((tmpreg & ETH_MACMIIAR_MB) && (timeout < (uint32_t)PHY_WRITE_TO));
 80057c8:	4909      	ldr	r1, [pc, #36]	; (80057f0 <ETH_WritePHYRegister+0x4c>)
  /* Write the result value into the MII Address register */
  ETH->MACMIIAR = tmpreg;
  /* Check for the Busy flag */
  do
  {
    timeout++;
 80057ca:	9a01      	ldr	r2, [sp, #4]
 80057cc:	3201      	adds	r2, #1
 80057ce:	9201      	str	r2, [sp, #4]
    tmpreg = ETH->MACMIIAR;
 80057d0:	691a      	ldr	r2, [r3, #16]
  } while ((tmpreg & ETH_MACMIIAR_MB) && (timeout < (uint32_t)PHY_WRITE_TO));
 80057d2:	07d2      	lsls	r2, r2, #31
 80057d4:	d502      	bpl.n	80057dc <ETH_WritePHYRegister+0x38>
 80057d6:	9a01      	ldr	r2, [sp, #4]
 80057d8:	428a      	cmp	r2, r1
 80057da:	d9f6      	bls.n	80057ca <ETH_WritePHYRegister+0x26>
  /* Return ERROR in case of timeout */
  if(timeout == PHY_WRITE_TO)
 80057dc:	9801      	ldr	r0, [sp, #4]
    return ETH_ERROR;
  }

  /* Return SUCCESS */
  return ETH_SUCCESS;  
}
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <ETH_WritePHYRegister+0x50>)
 80057e0:	1ac0      	subs	r0, r0, r3
 80057e2:	bf18      	it	ne
 80057e4:	2001      	movne	r0, #1
 80057e6:	b002      	add	sp, #8
 80057e8:	bd10      	pop	{r4, pc}
 80057ea:	bf00      	nop
 80057ec:	40028000 	.word	0x40028000
 80057f0:	0004fffe 	.word	0x0004fffe
 80057f4:	0004ffff 	.word	0x0004ffff

080057f8 <ETH_Init>:
  * @param PHYAddress: external PHY address
  * @retval ETH_ERROR: Ethernet initialization failed
  *         ETH_SUCCESS: Ethernet successfully initialized
  */
uint32_t ETH_Init(ETH_InitTypeDef* ETH_InitStruct, uint16_t PHYAddress)
{
 80057f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fa:	b089      	sub	sp, #36	; 0x24
  uint32_t RegValue = 0, tmpreg = 0;
  __IO uint32_t i = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	9301      	str	r3, [sp, #4]
  assert_param(IS_ETH_DMA_DESC_SKIP_LENGTH(ETH_InitStruct->ETH_DescriptorSkipLength));
  assert_param(IS_ETH_DMA_ARBITRATION_ROUNDROBIN_RXTX(ETH_InitStruct->ETH_DMAArbitration));
  /*-------------------------------- MAC Config ------------------------------*/
  /*---------------------- ETHERNET MACMIIAR Configuration -------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = ETH->MACMIIAR;
 8005800:	4fa1      	ldr	r7, [pc, #644]	; (8005a88 <ETH_Init+0x290>)
{
  uint32_t RegValue = 0, tmpreg = 0;
  __IO uint32_t i = 0;
  RCC_ClocksTypeDef  rcc_clocks;
  uint32_t hclk = 60000000;
  __IO uint32_t timeout = 0, err = ETH_SUCCESS;
 8005802:	9302      	str	r3, [sp, #8]
 8005804:	2301      	movs	r3, #1
 8005806:	9303      	str	r3, [sp, #12]
  * @param PHYAddress: external PHY address
  * @retval ETH_ERROR: Ethernet initialization failed
  *         ETH_SUCCESS: Ethernet successfully initialized
  */
uint32_t ETH_Init(ETH_InitTypeDef* ETH_InitStruct, uint16_t PHYAddress)
{
 8005808:	4604      	mov	r4, r0
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = ETH->MACMIIAR;
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= MACMIIAR_CR_MASK;
  /* Get hclk frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800580a:	a804      	add	r0, sp, #16
  * @param PHYAddress: external PHY address
  * @retval ETH_ERROR: Ethernet initialization failed
  *         ETH_SUCCESS: Ethernet successfully initialized
  */
uint32_t ETH_Init(ETH_InitTypeDef* ETH_InitStruct, uint16_t PHYAddress)
{
 800580c:	460e      	mov	r6, r1
  assert_param(IS_ETH_DMA_DESC_SKIP_LENGTH(ETH_InitStruct->ETH_DescriptorSkipLength));
  assert_param(IS_ETH_DMA_ARBITRATION_ROUNDROBIN_RXTX(ETH_InitStruct->ETH_DMAArbitration));
  /*-------------------------------- MAC Config ------------------------------*/
  /*---------------------- ETHERNET MACMIIAR Configuration -------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = ETH->MACMIIAR;
 800580e:	693d      	ldr	r5, [r7, #16]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= MACMIIAR_CR_MASK;
  /* Get hclk frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8005810:	f000 faaa 	bl	8005d68 <RCC_GetClocksFreq>
  hclk = rcc_clocks.HCLK_Frequency;
 8005814:	9b05      	ldr	r3, [sp, #20]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8005816:	4a9d      	ldr	r2, [pc, #628]	; (8005a8c <ETH_Init+0x294>)
 8005818:	499d      	ldr	r1, [pc, #628]	; (8005a90 <ETH_Init+0x298>)
 800581a:	441a      	add	r2, r3
 800581c:	428a      	cmp	r2, r1
  /*-------------------------------- MAC Config ------------------------------*/
  /*---------------------- ETHERNET MACMIIAR Configuration -------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = ETH->MACMIIAR;
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= MACMIIAR_CR_MASK;
 800581e:	f025 051c 	bic.w	r5, r5, #28
  /* Get hclk frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  hclk = rcc_clocks.HCLK_Frequency;
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8005822:	d802      	bhi.n	800582a <ETH_Init+0x32>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005824:	f045 0508 	orr.w	r5, r5, #8
 8005828:	e015      	b.n	8005856 <ETH_Init+0x5e>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800582a:	4a9a      	ldr	r2, [pc, #616]	; (8005a94 <ETH_Init+0x29c>)
 800582c:	499a      	ldr	r1, [pc, #616]	; (8005a98 <ETH_Init+0x2a0>)
 800582e:	441a      	add	r2, r3
 8005830:	428a      	cmp	r2, r1
 8005832:	d802      	bhi.n	800583a <ETH_Init+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005834:	f045 050c 	orr.w	r5, r5, #12
 8005838:	e00d      	b.n	8005856 <ETH_Init+0x5e>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800583a:	4a98      	ldr	r2, [pc, #608]	; (8005a9c <ETH_Init+0x2a4>)
 800583c:	4998      	ldr	r1, [pc, #608]	; (8005aa0 <ETH_Init+0x2a8>)
 800583e:	441a      	add	r2, r3
 8005840:	428a      	cmp	r2, r1
 8005842:	d908      	bls.n	8005856 <ETH_Init+0x5e>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8005844:	4a97      	ldr	r2, [pc, #604]	; (8005aa4 <ETH_Init+0x2ac>)
 8005846:	441a      	add	r2, r3
 8005848:	4b97      	ldr	r3, [pc, #604]	; (8005aa8 <ETH_Init+0x2b0>)
 800584a:	429a      	cmp	r2, r3
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800584c:	bf94      	ite	ls
 800584e:	f045 0504 	orrls.w	r5, r5, #4
  }
  else /* ((hclk >= 150000000)&&(hclk <= 168000000)) */
  {
    /* CSR Clock Range between 150-168 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8005852:	f045 0510 	orrhi.w	r5, r5, #16
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  ETH->MACMIIAR = (uint32_t)tmpreg;  
 8005856:	613d      	str	r5, [r7, #16]
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_Reset)))
 8005858:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800585c:	2100      	movs	r1, #0
 800585e:	4630      	mov	r0, r6
 8005860:	f7ff ffa0 	bl	80057a4 <ETH_WritePHYRegister>
 8005864:	b908      	cbnz	r0, 800586a <ETH_Init+0x72>
  {
    /* Return ERROR in case of write timeout */
    err = ETH_ERROR;
 8005866:	9003      	str	r0, [sp, #12]
    goto error;
 8005868:	e059      	b.n	800591e <ETH_Init+0x126>
  }
  
  /* Delay to assure PHY reset */
  _eth_delay_(PHY_RESET_DELAY);
 800586a:	20ff      	movs	r0, #255	; 0xff
 800586c:	f000 ff52 	bl	8006714 <Delay>
  
  if(ETH_InitStruct->ETH_AutoNegotiation != ETH_AutoNegotiation_Disable)
 8005870:	6821      	ldr	r1, [r4, #0]
 8005872:	2900      	cmp	r1, #0
 8005874:	d044      	beq.n	8005900 <ETH_Init+0x108>
  {
    /* We wait for linked status...*/
    do
    {
      timeout++;
    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_Linked_Status) && (timeout < PHY_READ_TO));
 8005876:	4d8d      	ldr	r5, [pc, #564]	; (8005aac <ETH_Init+0x2b4>)
  if(ETH_InitStruct->ETH_AutoNegotiation != ETH_AutoNegotiation_Disable)
  {
    /* We wait for linked status...*/
    do
    {
      timeout++;
 8005878:	9b02      	ldr	r3, [sp, #8]
    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_Linked_Status) && (timeout < PHY_READ_TO));
 800587a:	2101      	movs	r1, #1
  if(ETH_InitStruct->ETH_AutoNegotiation != ETH_AutoNegotiation_Disable)
  {
    /* We wait for linked status...*/
    do
    {
      timeout++;
 800587c:	3301      	adds	r3, #1
    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_Linked_Status) && (timeout < PHY_READ_TO));
 800587e:	4630      	mov	r0, r6
  if(ETH_InitStruct->ETH_AutoNegotiation != ETH_AutoNegotiation_Disable)
  {
    /* We wait for linked status...*/
    do
    {
      timeout++;
 8005880:	9302      	str	r3, [sp, #8]
    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_Linked_Status) && (timeout < PHY_READ_TO));
 8005882:	f7ff ff63 	bl	800574c <ETH_ReadPHYRegister>
 8005886:	0740      	lsls	r0, r0, #29
 8005888:	d402      	bmi.n	8005890 <ETH_Init+0x98>
 800588a:	9b02      	ldr	r3, [sp, #8]
 800588c:	42ab      	cmp	r3, r5
 800588e:	d9f3      	bls.n	8005878 <ETH_Init+0x80>
    
    /* Return ERROR in case of timeout */
    if(timeout == PHY_READ_TO)
 8005890:	9a02      	ldr	r2, [sp, #8]
 8005892:	4b87      	ldr	r3, [pc, #540]	; (8005ab0 <ETH_Init+0x2b8>)
 8005894:	429a      	cmp	r2, r3
 8005896:	f04f 0100 	mov.w	r1, #0
 800589a:	d101      	bne.n	80058a0 <ETH_Init+0xa8>
    {
      err = ETH_ERROR;
 800589c:	9103      	str	r1, [sp, #12]
      goto error;
 800589e:	e03e      	b.n	800591e <ETH_Init+0x126>
    }
    
    /* Reset Timeout counter */
    timeout = 0; 
    /* Enable Auto-Negotiation */
    if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_AutoNegotiation)))
 80058a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058a4:	4630      	mov	r0, r6
      err = ETH_ERROR;
      goto error;
    }
    
    /* Reset Timeout counter */
    timeout = 0; 
 80058a6:	9102      	str	r1, [sp, #8]
    /* Enable Auto-Negotiation */
    if(!(ETH_WritePHYRegister(PHYAddress, PHY_BCR, PHY_AutoNegotiation)))
 80058a8:	f7ff ff7c 	bl	80057a4 <ETH_WritePHYRegister>
 80058ac:	b900      	cbnz	r0, 80058b0 <ETH_Init+0xb8>
    {
      /* Return ERROR in case of write timeout */
      err = ETH_ERROR;
 80058ae:	9003      	str	r0, [sp, #12]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      timeout++;
    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
 80058b0:	4d7e      	ldr	r5, [pc, #504]	; (8005aac <ETH_Init+0x2b4>)
    }
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      timeout++;
 80058b2:	9b02      	ldr	r3, [sp, #8]
    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
 80058b4:	2101      	movs	r1, #1
    }
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      timeout++;
 80058b6:	3301      	adds	r3, #1
    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
 80058b8:	4630      	mov	r0, r6
    }
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      timeout++;
 80058ba:	9302      	str	r3, [sp, #8]
    } while (!(ETH_ReadPHYRegister(PHYAddress, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
 80058bc:	f7ff ff46 	bl	800574c <ETH_ReadPHYRegister>
 80058c0:	0681      	lsls	r1, r0, #26
 80058c2:	d402      	bmi.n	80058ca <ETH_Init+0xd2>
 80058c4:	9b02      	ldr	r3, [sp, #8]
 80058c6:	42ab      	cmp	r3, r5
 80058c8:	d9f3      	bls.n	80058b2 <ETH_Init+0xba>

    /* Return ERROR in case of timeout */
    if(timeout == PHY_READ_TO)
 80058ca:	4b79      	ldr	r3, [pc, #484]	; (8005ab0 <ETH_Init+0x2b8>)
 80058cc:	9a02      	ldr	r2, [sp, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	d101      	bne.n	80058da <ETH_Init+0xe2>
    {
      err = ETH_ERROR;
 80058d6:	9303      	str	r3, [sp, #12]
      goto error;
 80058d8:	e021      	b.n	800591e <ETH_Init+0x126>
    }

    /* Reset Timeout counter */
    timeout = 0;
    /* Read the result of the auto-negotiation */
    RegValue = ETH_ReadPHYRegister(PHYAddress, PHY_SR);
 80058da:	2110      	movs	r1, #16
 80058dc:	4630      	mov	r0, r6
      err = ETH_ERROR;
      goto error;
    }

    /* Reset Timeout counter */
    timeout = 0;
 80058de:	9302      	str	r3, [sp, #8]
    /* Read the result of the auto-negotiation */
    RegValue = ETH_ReadPHYRegister(PHYAddress, PHY_SR);
 80058e0:	f7ff ff34 	bl	800574c <ETH_ReadPHYRegister>
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((RegValue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80058e4:	f000 0304 	and.w	r3, r0, #4
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	b10b      	cbz	r3, 80058f0 <ETH_Init+0xf8>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      ETH_InitStruct->ETH_Mode = ETH_Mode_FullDuplex;  
 80058ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      ETH_InitStruct->ETH_Mode = ETH_Mode_HalfDuplex;           
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if(RegValue & PHY_SPEED_STATUS)
 80058f0:	0782      	lsls	r2, r0, #30
      ETH_InitStruct->ETH_Mode = ETH_Mode_FullDuplex;  
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      ETH_InitStruct->ETH_Mode = ETH_Mode_HalfDuplex;           
 80058f2:	6223      	str	r3, [r4, #32]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if(RegValue & PHY_SPEED_STATUS)
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      ETH_InitStruct->ETH_Speed = ETH_Speed_10M; 
 80058f4:	bf4c      	ite	mi
 80058f6:	2300      	movmi	r3, #0
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      ETH_InitStruct->ETH_Speed = ETH_Speed_100M;
 80058f8:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 80058fc:	6163      	str	r3, [r4, #20]
 80058fe:	e00e      	b.n	800591e <ETH_Init+0x126>
    }
  }
  else
  {
    if(!ETH_WritePHYRegister(PHYAddress, PHY_BCR, ((uint16_t)(ETH_InitStruct->ETH_Mode >> 3) |
 8005900:	6963      	ldr	r3, [r4, #20]
 8005902:	6a22      	ldr	r2, [r4, #32]
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 800590a:	b292      	uxth	r2, r2
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff ff49 	bl	80057a4 <ETH_WritePHYRegister>
 8005912:	b900      	cbnz	r0, 8005916 <ETH_Init+0x11e>
                                                   (uint16_t)(ETH_InitStruct->ETH_Speed >> 1))))
    {
      /* Return ERROR in case of write timeout */
      err = ETH_ERROR;
 8005914:	9003      	str	r0, [sp, #12]
    }  
    /* Delay to assure PHY configuration */
    _eth_delay_(PHY_CONFIG_DELAY);
 8005916:	f640 70ff 	movw	r0, #4095	; 0xfff
 800591a:	f000 fefb 	bl	8006714 <Delay>
  }
error:
  if (err == ETH_ERROR) /* Auto-negotiation failed */
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	b92b      	cbnz	r3, 800592e <ETH_Init+0x136>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    ETH_InitStruct->ETH_Mode = ETH_Mode_FullDuplex;
 8005922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005926:	6223      	str	r3, [r4, #32]

    /* Set Ethernet speed to 100M */
    ETH_InitStruct->ETH_Speed = ETH_Speed_100M;
 8005928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800592c:	6163      	str	r3, [r4, #20]
  }

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = ETH->MACCR;
 800592e:	4d56      	ldr	r5, [pc, #344]	; (8005a88 <ETH_Init+0x290>)
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= MACCR_CLEAR_MASK;
 8005930:	4b60      	ldr	r3, [pc, #384]	; (8005ab4 <ETH_Init+0x2bc>)
    ETH_InitStruct->ETH_Speed = ETH_Speed_100M;
  }

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = ETH->MACCR;
 8005932:	682a      	ldr	r2, [r5, #0]
  /* Set the IPCO bit according to ETH_ChecksumOffload value */
  /* Set the DR bit according to ETH_RetryTransmission value */
  /* Set the ACS bit according to ETH_AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH_BackOffLimit value */
  /* Set the DC bit according to ETH_DeferralCheck value */
      tmpreg |= (uint32_t)(ETH_InitStruct->ETH_Watchdog | 
 8005934:	6861      	ldr	r1, [r4, #4]

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = ETH->MACCR;
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= MACCR_CLEAR_MASK;
 8005936:	4013      	ands	r3, r2
  /* Set the IPCO bit according to ETH_ChecksumOffload value */
  /* Set the DR bit according to ETH_RetryTransmission value */
  /* Set the ACS bit according to ETH_AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH_BackOffLimit value */
  /* Set the DC bit according to ETH_DeferralCheck value */
      tmpreg |= (uint32_t)(ETH_InitStruct->ETH_Watchdog | 
 8005938:	68a2      	ldr	r2, [r4, #8]
 800593a:	4311      	orrs	r1, r2
 800593c:	68e2      	ldr	r2, [r4, #12]
 800593e:	4311      	orrs	r1, r2
 8005940:	6922      	ldr	r2, [r4, #16]
 8005942:	4311      	orrs	r1, r2
 8005944:	6962      	ldr	r2, [r4, #20]
 8005946:	4311      	orrs	r1, r2
 8005948:	69a2      	ldr	r2, [r4, #24]
 800594a:	4311      	orrs	r1, r2
 800594c:	69e2      	ldr	r2, [r4, #28]
 800594e:	4311      	orrs	r1, r2
 8005950:	6a22      	ldr	r2, [r4, #32]
 8005952:	4311      	orrs	r1, r2
 8005954:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005956:	4311      	orrs	r1, r2
 8005958:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800595a:	4311      	orrs	r1, r2
 800595c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800595e:	4311      	orrs	r1, r2
 8005960:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005962:	4311      	orrs	r1, r2
 8005964:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005966:	430a      	orrs	r2, r1
 8005968:	4313      	orrs	r3, r2
                           ETH_InitStruct->ETH_RetryTransmission | 
                           ETH_InitStruct->ETH_AutomaticPadCRCStrip | 
                           ETH_InitStruct->ETH_BackOffLimit | 
                           ETH_InitStruct->ETH_DeferralCheck);
    /* Write to ETHERNET MACCR */
    ETH->MACCR = (uint32_t)tmpreg;
 800596a:	602b      	str	r3, [r5, #0]
    
  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = ETH->MACCR;
 800596c:	682e      	ldr	r6, [r5, #0]
    _eth_delay_(ETH_REG_WRITE_DELAY);
 800596e:	2001      	movs	r0, #1
 8005970:	f000 fed0 	bl	8006714 <Delay>
    ETH->MACCR = tmpreg; 
 8005974:	602e      	str	r6, [r5, #0]
                           ETH_InitStruct->ETH_SourceAddrFilter |
                           ETH_InitStruct->ETH_PassControlFrames |
                           ETH_InitStruct->ETH_BroadcastFramesReception | 
                           ETH_InitStruct->ETH_DestinationAddrFilter |
                           ETH_InitStruct->ETH_PromiscuousMode |
                           ETH_InitStruct->ETH_MulticastFramesFilter |
 8005976:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005978:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800597a:	431a      	orrs	r2, r3
 800597c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800597e:	431a      	orrs	r2, r3
 8005980:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005982:	431a      	orrs	r2, r3
 8005984:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005986:	431a      	orrs	r2, r3
 8005988:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800598a:	431a      	orrs	r2, r3
 800598c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800598e:	431a      	orrs	r2, r3
 8005990:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005992:	4313      	orrs	r3, r2
  /* Set the DAIF bit according to ETH_DestinationAddrFilter value */
  /* Set the PR bit according to ETH_PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH_MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH_UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  ETH->MACFFR = (uint32_t)(ETH_InitStruct->ETH_ReceiveAll | 
 8005994:	606b      	str	r3, [r5, #4]
                           ETH_InitStruct->ETH_MulticastFramesFilter |
                           ETH_InitStruct->ETH_UnicastFramesFilter);

  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->MACFFR;
 8005996:	686e      	ldr	r6, [r5, #4]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 8005998:	2001      	movs	r0, #1
 800599a:	f000 febb 	bl	8006714 <Delay>
  ETH->MACFFR = tmpreg;
 800599e:	606e      	str	r6, [r5, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
  /* Write to ETHERNET MACHTHR */
  ETH->MACHTHR = (uint32_t)ETH_InitStruct->ETH_HashTableHigh;
 80059a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059a2:	60ab      	str	r3, [r5, #8]

  /* Write to ETHERNET MACHTLR */
  ETH->MACHTLR = (uint32_t)ETH_InitStruct->ETH_HashTableLow;
 80059a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059a6:	60eb      	str	r3, [r5, #12]
 80059a8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80059aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */  
  tmpreg = ETH->MACFCR;
 80059ac:	69a9      	ldr	r1, [r5, #24]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80059b2:	431a      	orrs	r2, r3
 80059b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80059b6:	431a      	orrs	r2, r3
 80059b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80059ba:	431a      	orrs	r2, r3
 80059bc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80059c0:	400b      	ands	r3, r1
 80059c2:	4313      	orrs	r3, r2
  /* Set the DZPQ bit according to ETH_ZeroQuantaPause value */
  /* Set the PLT bit according to ETH_PauseLowThreshold value */
  /* Set the UP bit according to ETH_UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH_ReceiveFlowControl value */
  /* Set the TFE bit according to ETH_TransmitFlowControl value */ 
  tmpreg |= (uint32_t)((ETH_InitStruct->ETH_PauseTime << 16) | 
 80059c4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80059c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                        ETH_InitStruct->ETH_PauseLowThreshold |
                        ETH_InitStruct->ETH_UnicastPauseFrameDetect | 
                        ETH_InitStruct->ETH_ReceiveFlowControl |
                        ETH_InitStruct->ETH_TransmitFlowControl); 
  /* Write to ETHERNET MACFCR */
  ETH->MACFCR = (uint32_t)tmpreg;
 80059ca:	61ab      	str	r3, [r5, #24]
  
  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->MACFCR;
 80059cc:	69ae      	ldr	r6, [r5, #24]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 80059ce:	2001      	movs	r0, #1
 80059d0:	f000 fea0 	bl	8006714 <Delay>
  ETH->MACFCR = tmpreg;
 80059d4:	61ae      	str	r6, [r5, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
  /* Set the ETV bit according to ETH_VLANTagComparison value */
  /* Set the VL bit according to ETH_VLANTagIdentifier value */  
  ETH->MACVLANTR = (uint32_t)(ETH_InitStruct->ETH_VLANTagComparison | 
 80059d6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80059d8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80059da:	4313      	orrs	r3, r2
 80059dc:	61eb      	str	r3, [r5, #28]
                              ETH_InitStruct->ETH_VLANTagIdentifier);

  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->MACVLANTR;
 80059de:	69ee      	ldr	r6, [r5, #28]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f000 fe97 	bl	8006714 <Delay>
  ETH->MACVLANTR = tmpreg;
 80059e6:	61ee      	str	r6, [r5, #28]

  /*-------------------------------- DMA Config ------------------------------*/
  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/

  /* Get the ETHERNET DMAOMR value */
  tmpreg = ETH->DMAOMR;
 80059e8:	f241 0618 	movw	r6, #4120	; 0x1018
  /* Clear xx bits */
  tmpreg &= DMAOMR_CLEAR_MASK;
 80059ec:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <ETH_Init+0x2c0>)

  /*-------------------------------- DMA Config ------------------------------*/
  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/

  /* Get the ETHERNET DMAOMR value */
  tmpreg = ETH->DMAOMR;
 80059ee:	59aa      	ldr	r2, [r5, r6]
  /* Set the TTC bit according to ETH_TransmitThresholdControl value */
  /* Set the FEF bit according to ETH_ForwardErrorFrames value */
  /* Set the FUF bit according to ETH_ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH_ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH_SecondFrameOperate value */
  tmpreg |= (uint32_t)(ETH_InitStruct->ETH_DropTCPIPChecksumErrorFrame | 
 80059f0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/

  /* Get the ETHERNET DMAOMR value */
  tmpreg = ETH->DMAOMR;
  /* Clear xx bits */
  tmpreg &= DMAOMR_CLEAR_MASK;
 80059f4:	4013      	ands	r3, r2
  /* Set the TTC bit according to ETH_TransmitThresholdControl value */
  /* Set the FEF bit according to ETH_ForwardErrorFrames value */
  /* Set the FUF bit according to ETH_ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH_ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH_SecondFrameOperate value */
  tmpreg |= (uint32_t)(ETH_InitStruct->ETH_DropTCPIPChecksumErrorFrame | 
 80059f6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80059fa:	4311      	orrs	r1, r2
 80059fc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8005a00:	4311      	orrs	r1, r2
 8005a02:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005a06:	4311      	orrs	r1, r2
 8005a08:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005a0c:	4311      	orrs	r1, r2
 8005a0e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8005a12:	4311      	orrs	r1, r2
 8005a14:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8005a24:	430a      	orrs	r2, r1
 8005a26:	4313      	orrs	r3, r2
                       ETH_InitStruct->ETH_ForwardErrorFrames |
                       ETH_InitStruct->ETH_ForwardUndersizedGoodFrames |
                       ETH_InitStruct->ETH_ReceiveThresholdControl |
                       ETH_InitStruct->ETH_SecondFrameOperate); 
  /* Write to ETHERNET DMAOMR */
  ETH->DMAOMR = (uint32_t)tmpreg;
 8005a28:	51ab      	str	r3, [r5, r6]

  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->DMAOMR;
  _eth_delay_(ETH_REG_WRITE_DELAY);
 8005a2a:	2001      	movs	r0, #1
  /* Write to ETHERNET DMAOMR */
  ETH->DMAOMR = (uint32_t)tmpreg;

  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->DMAOMR;
 8005a2c:	59af      	ldr	r7, [r5, r6]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 8005a2e:	f000 fe71 	bl	8006714 <Delay>
  ETH->DMAOMR = tmpreg;
 8005a32:	51af      	str	r7, [r5, r6]
  /* Set the FB bit according to ETH_FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH_RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH_TxDMABurstLength value */
  /* Set the DSL bit according to ETH_DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH_DMAArbitration value */
  ETH->DMABMR = (uint32_t)(ETH_InitStruct->ETH_AddressAlignedBeats | 
 8005a34:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8005a38:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8005a42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8005a58:	4c18      	ldr	r4, [pc, #96]	; (8005abc <ETH_Init+0x2c4>)
 8005a5a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8005a5e:	6023      	str	r3, [r4, #0]
                           ETH_InitStruct->ETH_DMAArbitration |
                           ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->DMABMR;
 8005a60:	6825      	ldr	r5, [r4, #0]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 8005a62:	2001      	movs	r0, #1
 8005a64:	f000 fe56 	bl	8006714 <Delay>
  ETH->DMABMR = tmpreg;
 8005a68:	6025      	str	r5, [r4, #0]

#ifdef USE_ENHANCED_DMA_DESCRIPTORS
  /* Enable the Enhanced DMA descriptors */
  ETH->DMABMR |= ETH_DMABMR_EDE;
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	6023      	str	r3, [r4, #0]

  /* Wait until the write operation will be taken into account :
   at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = ETH->DMABMR;
 8005a72:	6825      	ldr	r5, [r4, #0]
  _eth_delay_(ETH_REG_WRITE_DELAY);
 8005a74:	2001      	movs	r0, #1
 8005a76:	f000 fe4d 	bl	8006714 <Delay>
  ETH->DMABMR = tmpreg;
 8005a7a:	6025      	str	r5, [r4, #0]
#endif /* USE_ENHANCED_DMA_DESCRIPTORS */

  /* Return Ethernet configuration success */
  if(err == ETH_SUCCESS)
 8005a7c:	9803      	ldr	r0, [sp, #12]
  else /* Auto-negotiation failed */
  {
    /* Return Ethernet error */
    return ETH_ERROR;
  }
}
 8005a7e:	1e43      	subs	r3, r0, #1
 8005a80:	4258      	negs	r0, r3
 8005a82:	4158      	adcs	r0, r3
 8005a84:	b009      	add	sp, #36	; 0x24
 8005a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a88:	40028000 	.word	0x40028000
 8005a8c:	feced300 	.word	0xfeced300
 8005a90:	00e4e1bf 	.word	0x00e4e1bf
 8005a94:	fde9f140 	.word	0xfde9f140
 8005a98:	017d783f 	.word	0x017d783f
 8005a9c:	fc6c7900 	.word	0xfc6c7900
 8005aa0:	026259ff 	.word	0x026259ff
 8005aa4:	fa0a1f00 	.word	0xfa0a1f00
 8005aa8:	02faf07f 	.word	0x02faf07f
 8005aac:	0004fffe 	.word	0x0004fffe
 8005ab0:	0004ffff 	.word	0x0004ffff
 8005ab4:	ff20810f 	.word	0xff20810f
 8005ab8:	f8de3f23 	.word	0xf8de3f23
 8005abc:	40029000 	.word	0x40029000

08005ac0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005ac0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8005ac4:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <NVIC_PriorityGroupConfig+0x10>)
 8005ac6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8005aca:	60d8      	str	r0, [r3, #12]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005ad4:	78c2      	ldrb	r2, [r0, #3]
 8005ad6:	7803      	ldrb	r3, [r0, #0]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005ad8:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005ada:	b31a      	cbz	r2, 8005b24 <NVIC_Init+0x50>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005adc:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <NVIC_Init+0x68>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005ade:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005ae0:	68d1      	ldr	r1, [r2, #12]
 8005ae2:	43c9      	mvns	r1, r1
 8005ae4:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005ae8:	f1c1 0204 	rsb	r2, r1, #4
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	fa05 f202 	lsl.w	r2, r5, r2
 8005af2:	b2d4      	uxtb	r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005af4:	220f      	movs	r2, #15
 8005af6:	410a      	asrs	r2, r1
 8005af8:	7881      	ldrb	r1, [r0, #2]
 8005afa:	400a      	ands	r2, r1
 8005afc:	4322      	orrs	r2, r4
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005afe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005b02:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8005b06:	0112      	lsls	r2, r2, #4
 8005b08:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005b0a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b0e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b10:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b12:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b1c:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <NVIC_Init+0x6c>)
 8005b1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005b22:	bd30      	pop	{r4, r5, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b24:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005b26:	2101      	movs	r1, #1
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005b30:	3220      	adds	r2, #32
 8005b32:	4903      	ldr	r1, [pc, #12]	; (8005b40 <NVIC_Init+0x6c>)
 8005b34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005b38:	bd30      	pop	{r4, r5, pc}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed00 	.word	0xe000ed00
 8005b40:	e000e100 	.word	0xe000e100

08005b44 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8005b44:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005b46:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8005b48:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005b4a:	bf0c      	ite	eq
 8005b4c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005b50:	f022 0204 	bicne.w	r2, r2, #4
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	4770      	bx	lr
 8005b58:	e000e010 	.word	0xe000e010

08005b5c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8005b5c:	7982      	ldrb	r2, [r0, #6]
 8005b5e:	6801      	ldr	r1, [r0, #0]
 8005b60:	7903      	ldrb	r3, [r0, #4]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005b62:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8005b64:	b342      	cbz	r2, 8005bb8 <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8005b66:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <EXTI_Init+0x70>)
 8005b68:	6815      	ldr	r5, [r2, #0]
 8005b6a:	43ce      	mvns	r6, r1
 8005b6c:	4035      	ands	r5, r6
 8005b6e:	6015      	str	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8005b70:	6854      	ldr	r4, [r2, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005b72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b76:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8005b7a:	4034      	ands	r4, r6
 8005b7c:	6054      	str	r4, [r2, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005b7e:	681c      	ldr	r4, [r3, #0]
 8005b80:	4321      	orrs	r1, r4
 8005b82:	6019      	str	r1, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005b84:	6801      	ldr	r1, [r0, #0]
 8005b86:	6894      	ldr	r4, [r2, #8]
 8005b88:	43cd      	mvns	r5, r1
 8005b8a:	402c      	ands	r4, r5
 8005b8c:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005b8e:	68d3      	ldr	r3, [r2, #12]
 8005b90:	402b      	ands	r3, r5
 8005b92:	60d3      	str	r3, [r2, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005b94:	7943      	ldrb	r3, [r0, #5]
 8005b96:	2b10      	cmp	r3, #16
 8005b98:	d106      	bne.n	8005ba8 <EXTI_Init+0x4c>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8005b9a:	6893      	ldr	r3, [r2, #8]
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8005ba0:	68d3      	ldr	r3, [r2, #12]
 8005ba2:	4319      	orrs	r1, r3
 8005ba4:	60d1      	str	r1, [r2, #12]
 8005ba6:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bac:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4311      	orrs	r1, r2
 8005bb4:	6019      	str	r1, [r3, #0]
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8005bb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bbc:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	ea22 0201 	bic.w	r2, r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	bd70      	pop	{r4, r5, r6, pc}
 8005bca:	bf00      	nop
 8005bcc:	40013c00 	.word	0x40013c00

08005bd0 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <EXTI_GetITStatus+0x18>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4003      	ands	r3, r0
 8005bd8:	d004      	beq.n	8005be4 <EXTI_GetITStatus+0x14>
  {
    bitstatus = SET;
 8005bda:	4202      	tst	r2, r0
 8005bdc:	bf14      	ite	ne
 8005bde:	2001      	movne	r0, #1
 8005be0:	2000      	moveq	r0, #0
 8005be2:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8005be4:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8005be6:	4770      	bx	lr
 8005be8:	40013c00 	.word	0x40013c00

08005bec <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005bec:	4b01      	ldr	r3, [pc, #4]	; (8005bf4 <EXTI_ClearITPendingBit+0x8>)
 8005bee:	6158      	str	r0, [r3, #20]
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40013c00 	.word	0x40013c00

08005bf8 <FSMC_NORSRAMInit>:
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8005bf8:	6881      	ldr	r1, [r0, #8]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8005bfa:	6843      	ldr	r3, [r0, #4]
 8005bfc:	ea41 0203 	orr.w	r2, r1, r3
 8005c00:	68c3      	ldr	r3, [r0, #12]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	6903      	ldr	r3, [r0, #16]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	6943      	ldr	r3, [r0, #20]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	6983      	ldr	r3, [r0, #24]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	69c3      	ldr	r3, [r0, #28]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	6a03      	ldr	r3, [r0, #32]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8005c1e:	b530      	push	{r4, r5, lr}
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8005c20:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005c22:	4313      	orrs	r3, r2
 8005c24:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005c26:	4323      	orrs	r3, r4
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	6802      	ldr	r2, [r0, #0]
 8005c2c:	0092      	lsls	r2, r2, #2
 8005c2e:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8005c32:	2908      	cmp	r1, #8
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8005c34:	6013      	str	r3, [r2, #0]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005c36:	bf08      	it	eq
 8005c38:	6813      	ldreq	r3, [r2, #0]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8005c3a:	6b41      	ldr	r1, [r0, #52]	; 0x34
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005c3c:	bf08      	it	eq
 8005c3e:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8005c42:	680d      	ldr	r5, [r1, #0]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8005c44:	bf08      	it	eq
 8005c46:	6013      	streq	r3, [r2, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8005c48:	698b      	ldr	r3, [r1, #24]
 8005c4a:	432b      	orrs	r3, r5
 8005c4c:	684d      	ldr	r5, [r1, #4]
 8005c4e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8005c52:	688d      	ldr	r5, [r1, #8]
 8005c54:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005c58:	68cd      	ldr	r5, [r1, #12]
 8005c5a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005c5e:	690d      	ldr	r5, [r1, #16]
 8005c60:	6949      	ldr	r1, [r1, #20]
 8005c62:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8005c66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8005c6a:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8005c6e:	6053      	str	r3, [r2, #4]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8005c70:	d110      	bne.n	8005c94 <FSMC_NORSRAMInit+0x9c>
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8005c72:	6b81      	ldr	r1, [r0, #56]	; 0x38
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8005c74:	6808      	ldr	r0, [r1, #0]
 8005c76:	698b      	ldr	r3, [r1, #24]
 8005c78:	4303      	orrs	r3, r0
 8005c7a:	6848      	ldr	r0, [r1, #4]
 8005c7c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005c80:	6888      	ldr	r0, [r1, #8]
 8005c82:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005c86:	6908      	ldr	r0, [r1, #16]
 8005c88:	6949      	ldr	r1, [r1, #20]
 8005c8a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8005c8e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c92:	e001      	b.n	8005c98 <FSMC_NORSRAMInit+0xa0>
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8005c94:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005c98:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8005c9c:	bd30      	pop	{r4, r5, pc}
	...

08005ca0 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8005ca0:	0080      	lsls	r0, r0, #2
 8005ca2:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005ca6:	b119      	cbz	r1, 8005cb0 <FSMC_NORSRAMCmd+0x10>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 8005ca8:	6803      	ldr	r3, [r0, #0]
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	e002      	b.n	8005cb6 <FSMC_NORSRAMCmd+0x16>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8005cb0:	6802      	ldr	r2, [r0, #0]
 8005cb2:	4b02      	ldr	r3, [pc, #8]	; (8005cbc <FSMC_NORSRAMCmd+0x1c>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	6003      	str	r3, [r0, #0]
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	000ffffe 	.word	0x000ffffe

08005cc0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005cc4:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005cc6:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8005cc8:	f04f 0e01 	mov.w	lr, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8005ccc:	2603      	movs	r6, #3

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8005cce:	fa0e fc03 	lsl.w	ip, lr, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8005cd2:	ea3c 0207 	bics.w	r2, ip, r7
 8005cd6:	d130      	bne.n	8005d3a <GPIO_Init+0x7a>
 8005cd8:	005a      	lsls	r2, r3, #1
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8005cda:	6805      	ldr	r5, [r0, #0]
 8005cdc:	fa06 f402 	lsl.w	r4, r6, r2
 8005ce0:	43e4      	mvns	r4, r4
 8005ce2:	4025      	ands	r5, r4
 8005ce4:	6005      	str	r5, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8005ce6:	790d      	ldrb	r5, [r1, #4]
 8005ce8:	f8d0 8000 	ldr.w	r8, [r0]
 8005cec:	fa05 f902 	lsl.w	r9, r5, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8005cf0:	3d01      	subs	r5, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8005cf2:	ea49 0808 	orr.w	r8, r9, r8

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8005cf6:	2d01      	cmp	r5, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8005cf8:	f8c0 8000 	str.w	r8, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8005cfc:	d811      	bhi.n	8005d22 <GPIO_Init+0x62>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8005cfe:	6885      	ldr	r5, [r0, #8]
 8005d00:	402c      	ands	r4, r5
 8005d02:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8005d04:	794c      	ldrb	r4, [r1, #5]
 8005d06:	6885      	ldr	r5, [r0, #8]
 8005d08:	4094      	lsls	r4, r2
 8005d0a:	4325      	orrs	r5, r4
 8005d0c:	6085      	str	r5, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8005d0e:	6844      	ldr	r4, [r0, #4]
 8005d10:	ea24 040c 	bic.w	r4, r4, ip
 8005d14:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8005d16:	798c      	ldrb	r4, [r1, #6]
 8005d18:	6845      	ldr	r5, [r0, #4]
 8005d1a:	409c      	lsls	r4, r3
 8005d1c:	b2a4      	uxth	r4, r4
 8005d1e:	432c      	orrs	r4, r5
 8005d20:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8005d22:	68c4      	ldr	r4, [r0, #12]
 8005d24:	fa06 f502 	lsl.w	r5, r6, r2
 8005d28:	ea24 0405 	bic.w	r4, r4, r5
 8005d2c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8005d2e:	79cd      	ldrb	r5, [r1, #7]
 8005d30:	68c4      	ldr	r4, [r0, #12]
 8005d32:	fa05 f202 	lsl.w	r2, r5, r2
 8005d36:	4322      	orrs	r2, r4
 8005d38:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d1c6      	bne.n	8005cce <GPIO_Init+0xe>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8005d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005d44 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005d44:	f001 0307 	and.w	r3, r1, #7
 8005d48:	08c9      	lsrs	r1, r1, #3
 8005d4a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005d4e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005d50:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005d52:	6a04      	ldr	r4, [r0, #32]
 8005d54:	210f      	movs	r1, #15
 8005d56:	4099      	lsls	r1, r3
 8005d58:	ea24 0101 	bic.w	r1, r4, r1
 8005d5c:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8005d5e:	6a01      	ldr	r1, [r0, #32]
 8005d60:	409a      	lsls	r2, r3
 8005d62:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005d64:	6202      	str	r2, [r0, #32]
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <RCC_GetClocksFreq+0x78>)
 8005d6a:	6893      	ldr	r3, [r2, #8]

  switch (tmp)
 8005d6c:	f003 030c 	and.w	r3, r3, #12
 8005d70:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8005d72:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8005d74:	d003      	beq.n	8005d7e <RCC_GetClocksFreq+0x16>
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d003      	beq.n	8005d82 <RCC_GetClocksFreq+0x1a>
 8005d7a:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <RCC_GetClocksFreq+0x7c>)
 8005d7c:	e018      	b.n	8005db0 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <RCC_GetClocksFreq+0x80>)
 8005d80:	e016      	b.n	8005db0 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005d82:	6851      	ldr	r1, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d84:	6853      	ldr	r3, [r2, #4]
      
      if (pllsource != 0)
 8005d86:	f411 0f80 	tst.w	r1, #4194304	; 0x400000

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005d8e:	6851      	ldr	r1, [r2, #4]
 8005d90:	bf14      	ite	ne
 8005d92:	4a15      	ldrne	r2, [pc, #84]	; (8005de8 <RCC_GetClocksFreq+0x80>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005d94:	4a13      	ldreq	r2, [pc, #76]	; (8005de4 <RCC_GetClocksFreq+0x7c>)
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005d9a:	4a11      	ldr	r2, [pc, #68]	; (8005de0 <RCC_GetClocksFreq+0x78>)
 8005d9c:	6852      	ldr	r2, [r2, #4]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8005d9e:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005da2:	f3c1 1188 	ubfx	r1, r1, #6, #9
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8005da6:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005da8:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8005daa:	0052      	lsls	r2, r2, #1
 8005dac:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8005db0:	4a0b      	ldr	r2, [pc, #44]	; (8005de0 <RCC_GetClocksFreq+0x78>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8005db2:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8005db4:	6893      	ldr	r3, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8005db6:	490d      	ldr	r1, [pc, #52]	; (8005dec <RCC_GetClocksFreq+0x84>)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8005db8:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8005dbc:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8005dbe:	6803      	ldr	r3, [r0, #0]
 8005dc0:	40e3      	lsrs	r3, r4
 8005dc2:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8005dc4:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8005dc6:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8005dca:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005dcc:	fa23 f404 	lsr.w	r4, r3, r4
 8005dd0:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8005dd2:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
 8005dd4:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8005dd8:	5c8a      	ldrb	r2, [r1, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005dda:	40d3      	lsrs	r3, r2
 8005ddc:	60c3      	str	r3, [r0, #12]
 8005dde:	bd10      	pop	{r4, pc}
 8005de0:	40023800 	.word	0x40023800
 8005de4:	00f42400 	.word	0x00f42400
 8005de8:	017d7840 	.word	0x017d7840
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8005df0:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8005df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005df4:	b109      	cbz	r1, 8005dfa <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8005df6:	4310      	orrs	r0, r2
 8005df8:	e001      	b.n	8005dfe <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8005dfa:	ea22 0000 	bic.w	r0, r2, r0
 8005dfe:	6318      	str	r0, [r3, #48]	; 0x30
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40023800 	.word	0x40023800

08005e08 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8005e08:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8005e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e0c:	b109      	cbz	r1, 8005e12 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8005e0e:	4310      	orrs	r0, r2
 8005e10:	e001      	b.n	8005e16 <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8005e12:	ea22 0000 	bic.w	r0, r2, r0
 8005e16:	6398      	str	r0, [r3, #56]	; 0x38
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800

08005e20 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8005e22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e24:	b109      	cbz	r1, 8005e2a <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8005e26:	4310      	orrs	r0, r2
 8005e28:	e001      	b.n	8005e2e <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005e2a:	ea22 0000 	bic.w	r0, r2, r0
 8005e2e:	6458      	str	r0, [r3, #68]	; 0x44
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800

08005e38 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8005e3a:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e3c:	b109      	cbz	r1, 8005e42 <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8005e3e:	4310      	orrs	r0, r2
 8005e40:	e001      	b.n	8005e46 <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8005e42:	ea22 0000 	bic.w	r0, r2, r0
 8005e46:	6118      	str	r0, [r3, #16]
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40023800 	.word	0x40023800

08005e50 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8005e50:	f001 0303 	and.w	r3, r1, #3
 8005e54:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8005e58:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005e5c:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8005e60:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8005e62:	009b      	lsls	r3, r3, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8005e64:	688c      	ldr	r4, [r1, #8]
 8005e66:	220f      	movs	r2, #15
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	ea24 0202 	bic.w	r2, r4, r2
 8005e6e:	608a      	str	r2, [r1, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8005e70:	688a      	ldr	r2, [r1, #8]
 8005e72:	4098      	lsls	r0, r3
 8005e74:	4310      	orrs	r0, r2
 8005e76:	6088      	str	r0, [r1, #8]
 8005e78:	bd10      	pop	{r4, pc}
	...

08005e7c <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8005e7c:	4b01      	ldr	r3, [pc, #4]	; (8005e84 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 8005e7e:	6018      	str	r0, [r3, #0]
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	422700dc 	.word	0x422700dc

08005e88 <STM_EVAL_LEDInit>:
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <STM_EVAL_LEDInit+0x40>)
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8005e8a:	b513      	push	{r0, r1, r4, lr}
 8005e8c:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8005e8e:	2101      	movs	r1, #1
 8005e90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005e94:	f7ff ffac 	bl	8005df0 <RCC_AHB1PeriphClockCmd>


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <STM_EVAL_LEDInit+0x44>)
 8005e9a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8005e9e:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8005ea6:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <STM_EVAL_LEDInit+0x48>)


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005eb2:	2200      	movs	r2, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8005eb4:	4669      	mov	r1, sp
 8005eb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]


  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005eba:	f88d 2006 	strb.w	r2, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8005ebe:	f7ff feff 	bl	8005cc0 <GPIO_Init>
}
 8005ec2:	b002      	add	sp, #8
 8005ec4:	bd10      	pop	{r4, pc}
 8005ec6:	bf00      	nop
 8005ec8:	0800a92c 	.word	0x0800a92c
 8005ecc:	0800a93c 	.word	0x0800a93c
 8005ed0:	2000001c 	.word	0x2000001c

08005ed4 <STM_EVAL_LEDOn>:
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8005ed4:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <STM_EVAL_LEDOn+0x10>)
 8005ed6:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <STM_EVAL_LEDOn+0x14>)
 8005ed8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005edc:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8005ee0:	831a      	strh	r2, [r3, #24]
 8005ee2:	4770      	bx	lr
 8005ee4:	2000001c 	.word	0x2000001c
 8005ee8:	0800a93c 	.word	0x0800a93c

08005eec <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8005eec:	b084      	sub	sp, #16
  __IO uint32_t index = 0; 
 8005eee:	2300      	movs	r3, #0
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8005ef0:	9001      	str	r0, [sp, #4]
  __IO uint32_t index = 0; 
 8005ef2:	9303      	str	r3, [sp, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8005ef4:	9a01      	ldr	r2, [sp, #4]
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <delay+0x20>)
 8005ef8:	4353      	muls	r3, r2
 8005efa:	9303      	str	r3, [sp, #12]
 8005efc:	9b03      	ldr	r3, [sp, #12]
 8005efe:	b113      	cbz	r3, 8005f06 <delay+0x1a>
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	e7f9      	b.n	8005efa <delay+0xe>
  {
  }
}
 8005f06:	b004      	add	sp, #16
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	000186a0 	.word	0x000186a0

08005f10 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
 8005f10:	b082      	sub	sp, #8
  TextColor = Color;
 8005f12:	4a04      	ldr	r2, [pc, #16]	; (8005f24 <LCD_SetTextColor+0x14>)
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
 8005f14:	f8ad 0006 	strh.w	r0, [sp, #6]
  TextColor = Color;
 8005f18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	8013      	strh	r3, [r2, #0]
}
 8005f20:	b002      	add	sp, #8
 8005f22:	4770      	bx	lr
 8005f24:	20002ba0 	.word	0x20002ba0

08005f28 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(__IO uint16_t Color)
{
 8005f28:	b082      	sub	sp, #8
  BackColor = Color;
 8005f2a:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <LCD_SetBackColor+0x14>)
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(__IO uint16_t Color)
{
 8005f2c:	f8ad 0006 	strh.w	r0, [sp, #6]
  BackColor = Color;
 8005f30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8013      	strh	r3, [r2, #0]
}
 8005f38:	b002      	add	sp, #8
 8005f3a:	4770      	bx	lr
 8005f3c:	2000002c 	.word	0x2000002c

08005f40 <LCD_GetFont>:
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
  return LCD_Currentfonts;
}
 8005f40:	4b01      	ldr	r3, [pc, #4]	; (8005f48 <LCD_GetFont+0x8>)
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20002ba4 	.word	0x20002ba4

08005f4c <LCD_SetCursor>:
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8005f4c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8005f50:	2220      	movs	r2, #32
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	2221      	movs	r2, #33	; 0x21
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8005f56:	8058      	strh	r0, [r3, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8005f58:	801a      	strh	r2, [r3, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8005f5a:	8059      	strh	r1, [r3, #2]
 8005f5c:	4770      	bx	lr

08005f5e <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8005f5e:	b510      	push	{r4, lr}
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
 8005f60:	f240 113f 	movw	r1, #319	; 0x13f
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8005f64:	4604      	mov	r4, r0
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
 8005f66:	2000      	movs	r0, #0
 8005f68:	f7ff fff0 	bl	8005f4c <LCD_SetCursor>
  * @param  None
  * @retval None
  */
void LCD_WriteRAM_Prepare(void)
{
  LCD->LCD_REG = LCD_REG_34;
 8005f6c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8005f70:	2222      	movs	r2, #34	; 0x22
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
{
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 76800; index++)
 8005f78:	3a01      	subs	r2, #1
  {
    LCD->LCD_RAM = Color;
 8005f7a:	805c      	strh	r4, [r3, #2]
{
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 76800; index++)
 8005f7c:	d1fc      	bne.n	8005f78 <LCD_Clear+0x1a>
  {
    LCD->LCD_RAM = Color;
  }  
}
 8005f7e:	bd10      	pop	{r4, pc}

08005f80 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	4605      	mov	r5, r0
 8005f86:	460e      	mov	r6, r1
 8005f88:	4617      	mov	r7, r2
  uint32_t index = 0, i = 0;
  uint16_t  Xaddress = 0;
  Xaddress = Xpos;
  
  LCD_SetCursor(Xaddress, Ypos);
 8005f8a:	f7ff ffdf 	bl	8005f4c <LCD_SetCursor>
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8005f8e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8006008 <LCD_DrawChar+0x88>
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))

      {
        LCD_WriteRAM(BackColor);
 8005f92:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800600c <LCD_DrawChar+0x8c>
  uint16_t  Xaddress = 0;
  Xaddress = Xpos;
  
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8005f96:	2400      	movs	r4, #0
 8005f98:	f8d8 3000 	ldr.w	r3, [r8]
 8005f9c:	88da      	ldrh	r2, [r3, #6]
 8005f9e:	4294      	cmp	r4, r2
 8005fa0:	d230      	bcs.n	8006004 <LCD_DrawChar+0x84>
  * @param  None
  * @retval None
  */
void LCD_WriteRAM_Prepare(void)
{
  LCD->LCD_REG = LCD_REG_34;
 8005fa2:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8005fa6:	2122      	movs	r1, #34	; 0x22
 8005fa8:	8011      	strh	r1, [r2, #0]
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8005faa:	8899      	ldrh	r1, [r3, #4]
      {
        LCD_WriteRAM(BackColor);
      }
      else
      {
        LCD_WriteRAM(TextColor);
 8005fac:	f8df c060 	ldr.w	ip, [pc, #96]	; 8006010 <LCD_DrawChar+0x90>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8005fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	fa0e fe03 	lsl.w	lr, lr, r3
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	428b      	cmp	r3, r1
 8005fc4:	d216      	bcs.n	8005ff4 <LCD_DrawChar+0x74>
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8005fc6:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8005fca:	fa4e fa03 	asr.w	sl, lr, r3
 8005fce:	ea1a 0f00 	tst.w	sl, r0
 8005fd2:	d101      	bne.n	8005fd8 <LCD_DrawChar+0x58>
 8005fd4:	290c      	cmp	r1, #12
 8005fd6:	d904      	bls.n	8005fe2 <LCD_DrawChar+0x62>
 8005fd8:	4118      	asrs	r0, r3
 8005fda:	07c0      	lsls	r0, r0, #31
 8005fdc:	d404      	bmi.n	8005fe8 <LCD_DrawChar+0x68>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8005fde:	290c      	cmp	r1, #12
 8005fe0:	d902      	bls.n	8005fe8 <LCD_DrawChar+0x68>

      {
        LCD_WriteRAM(BackColor);
 8005fe2:	f8b9 0000 	ldrh.w	r0, [r9]
 8005fe6:	e001      	b.n	8005fec <LCD_DrawChar+0x6c>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 8005fe8:	f8bc 0000 	ldrh.w	r0, [ip]
 8005fec:	b280      	uxth	r0, r0
  * @retval None
  */
void LCD_WriteRAM(uint16_t RGB_Code)
{
  /* Write 16-bit GRAM Reg */
  LCD->LCD_RAM = RGB_Code;
 8005fee:	8050      	strh	r0, [r2, #2]
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	e7e6      	b.n	8005fc2 <LCD_DrawChar+0x42>
      {
        LCD_WriteRAM(TextColor);
      } 
    }
    Xaddress++;
    LCD_SetCursor(Xaddress, Ypos);
 8005ff4:	1c68      	adds	r0, r5, #1
 8005ff6:	4420      	add	r0, r4
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	b280      	uxth	r0, r0
 8005ffc:	f7ff ffa6 	bl	8005f4c <LCD_SetCursor>
  uint16_t  Xaddress = 0;
  Xaddress = Xpos;
  
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8006000:	3401      	adds	r4, #1
 8006002:	e7c9      	b.n	8005f98 <LCD_DrawChar+0x18>
      } 
    }
    Xaddress++;
    LCD_SetCursor(Xaddress, Ypos);
  }
}
 8006004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006008:	20002ba4 	.word	0x20002ba4
 800600c:	2000002c 	.word	0x2000002c
 8006010:	20002ba0 	.word	0x20002ba0

08006014 <LCD_DisplayChar>:
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
  Ascii -= 32;
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <LCD_DisplayChar+0x1c>)
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8006016:	b410      	push	{r4}
  Ascii -= 32;
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8006018:	681c      	ldr	r4, [r3, #0]
 800601a:	3a20      	subs	r2, #32
 800601c:	88e3      	ldrh	r3, [r4, #6]
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	435a      	muls	r2, r3
 8006022:	6823      	ldr	r3, [r4, #0]
}
 8006024:	f85d 4b04 	ldr.w	r4, [sp], #4
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
  Ascii -= 32;
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8006028:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800602c:	f7ff bfa8 	b.w	8005f80 <LCD_DrawChar>
 8006030:	20002ba4 	.word	0x20002ba4

08006034 <LCD_ClearLine>:
  *   This parameter can be one of the following values:
  *     @arg Linex: where x can be 0..n
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
  /* Send the string character by character on lCD */
  while (((refcolumn + 1)& 0xFFFF) >= LCD_Currentfonts->Width)
 8006036:	4e0a      	ldr	r6, [pc, #40]	; (8006060 <LCD_ClearLine+0x2c>)
  *   This parameter can be one of the following values:
  *     @arg Linex: where x can be 0..n
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8006038:	4607      	mov	r7, r0
  uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
 800603a:	f240 143f 	movw	r4, #319	; 0x13f
  /* Send the string character by character on lCD */
  while (((refcolumn + 1)& 0xFFFF) >= LCD_Currentfonts->Width)
 800603e:	6835      	ldr	r5, [r6, #0]
 8006040:	1c63      	adds	r3, r4, #1
 8006042:	88aa      	ldrh	r2, [r5, #4]
 8006044:	b29b      	uxth	r3, r3
 8006046:	4293      	cmp	r3, r2
 8006048:	db08      	blt.n	800605c <LCD_ClearLine+0x28>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 800604a:	4621      	mov	r1, r4
 800604c:	2220      	movs	r2, #32
 800604e:	4638      	mov	r0, r7
 8006050:	f7ff ffe0 	bl	8006014 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn -= LCD_Currentfonts->Width;
 8006054:	88ab      	ldrh	r3, [r5, #4]
 8006056:	1ae4      	subs	r4, r4, r3
 8006058:	b2a4      	uxth	r4, r4
 800605a:	e7f0      	b.n	800603e <LCD_ClearLine+0xa>
  }
}
 800605c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605e:	bf00      	nop
 8006060:	20002ba4 	.word	0x20002ba4

08006064 <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
 8006064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;

  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (((refcolumn + 1) & 0xFFFF) >= LCD_Currentfonts->Width))
 8006068:	4f0d      	ldr	r7, [pc, #52]	; (80060a0 <LCD_DisplayStringLine+0x3c>)
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
 800606a:	4606      	mov	r6, r0
 800606c:	1e4d      	subs	r5, r1, #1
  uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
 800606e:	f240 143f 	movw	r4, #319	; 0x13f

  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (((refcolumn + 1) & 0xFFFF) >= LCD_Currentfonts->Width))
 8006072:	f8d7 8000 	ldr.w	r8, [r7]
 8006076:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800607a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800607e:	1c63      	adds	r3, r4, #1
 8006080:	b29b      	uxth	r3, r3
 8006082:	428b      	cmp	r3, r1
 8006084:	db09      	blt.n	800609a <LCD_DisplayStringLine+0x36>
 8006086:	b142      	cbz	r2, 800609a <LCD_DisplayStringLine+0x36>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8006088:	4621      	mov	r1, r4
 800608a:	4630      	mov	r0, r6
 800608c:	f7ff ffc2 	bl	8006014 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn -= LCD_Currentfonts->Width;
 8006090:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006094:	1ae4      	subs	r4, r4, r3
 8006096:	b2a4      	uxth	r4, r4
 8006098:	e7eb      	b.n	8006072 <LCD_DisplayStringLine+0xe>
 800609a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800609e:	bf00      	nop
 80060a0:	20002ba4 	.word	0x20002ba4

080060a4 <LCD_CtrlLinesConfig>:
  * @brief  Configures LCD Control lines (FSMC Pins) in alternate function mode.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80060a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80060a6:	4c4a      	ldr	r4, [pc, #296]	; (80061d0 <LCD_CtrlLinesConfig+0x12c>)
void LCD_CtrlLinesConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOE |
 80060a8:	2101      	movs	r1, #1
 80060aa:	2078      	movs	r0, #120	; 0x78
 80060ac:	f7ff fea0 	bl	8005df0 <RCC_AHB1PeriphClockCmd>
                         RCC_AHB1Periph_GPIOF, ENABLE);

/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines,  NOE and NWE configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 80060b0:	f24c 7333 	movw	r3, #50995	; 0xc733
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
                                GPIO_Pin_4 |GPIO_Pin_5;;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80060b4:	2500      	movs	r5, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOE |
                         RCC_AHB1Periph_GPIOF, ENABLE);

/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines,  NOE and NWE configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 80060b6:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80060b8:	4669      	mov	r1, sp
/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines,  NOE and NWE configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
                                GPIO_Pin_4 |GPIO_Pin_5;;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80060ba:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80060bc:	4620      	mov	r0, r4
/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines,  NOE and NWE configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
                                GPIO_Pin_4 |GPIO_Pin_5;;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80060be:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80060c2:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80060c6:	f88d 5006 	strb.w	r5, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80060ca:	f88d 5007 	strb.w	r5, [sp, #7]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80060ce:	f7ff fdf7 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
 80060d2:	4629      	mov	r1, r5
 80060d4:	4620      	mov	r0, r4
 80060d6:	220c      	movs	r2, #12
 80060d8:	f7ff fe34 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
 80060dc:	4620      	mov	r0, r4
 80060de:	220c      	movs	r2, #12
 80060e0:	2101      	movs	r1, #1
 80060e2:	f7ff fe2f 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
 80060e6:	4620      	mov	r0, r4
 80060e8:	220c      	movs	r2, #12
 80060ea:	2104      	movs	r1, #4
 80060ec:	f7ff fe2a 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
 80060f0:	4620      	mov	r0, r4
 80060f2:	220c      	movs	r2, #12
 80060f4:	2105      	movs	r1, #5
 80060f6:	f7ff fe25 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
 80060fa:	4620      	mov	r0, r4
 80060fc:	220c      	movs	r2, #12
 80060fe:	2108      	movs	r1, #8
 8006100:	f7ff fe20 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
 8006104:	4620      	mov	r0, r4
 8006106:	220c      	movs	r2, #12
 8006108:	2109      	movs	r1, #9
 800610a:	f7ff fe1b 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 800610e:	4620      	mov	r0, r4
 8006110:	220c      	movs	r2, #12
 8006112:	210a      	movs	r1, #10
 8006114:	f7ff fe16 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
 8006118:	4620      	mov	r0, r4
 800611a:	220c      	movs	r2, #12
 800611c:	210e      	movs	r1, #14
 800611e:	f7ff fe11 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
 8006122:	220c      	movs	r2, #12
 8006124:	4620      	mov	r0, r4
 8006126:	210f      	movs	r1, #15

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8006128:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
 800612c:	f7ff fe0a 	bl	8005d44 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8006130:	f64f 7380 	movw	r3, #65408	; 0xff80
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8006134:	4669      	mov	r1, sp
 8006136:	4620      	mov	r0, r4
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8006138:	9300      	str	r3, [sp, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800613a:	f7ff fdc1 	bl	8005cc0 <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
 800613e:	4620      	mov	r0, r4
 8006140:	220c      	movs	r2, #12
 8006142:	2107      	movs	r1, #7
 8006144:	f7ff fdfe 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
 8006148:	4620      	mov	r0, r4
 800614a:	220c      	movs	r2, #12
 800614c:	2108      	movs	r1, #8
 800614e:	f7ff fdf9 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
 8006152:	4620      	mov	r0, r4
 8006154:	220c      	movs	r2, #12
 8006156:	2109      	movs	r1, #9
 8006158:	f7ff fdf4 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
 800615c:	4620      	mov	r0, r4
 800615e:	220c      	movs	r2, #12
 8006160:	210a      	movs	r1, #10
 8006162:	f7ff fdef 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
 8006166:	4620      	mov	r0, r4
 8006168:	220c      	movs	r2, #12
 800616a:	210b      	movs	r1, #11
 800616c:	f7ff fdea 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
 8006170:	220c      	movs	r2, #12
 8006172:	4611      	mov	r1, r2
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff fde5 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
 800617a:	4620      	mov	r0, r4
 800617c:	220c      	movs	r2, #12
 800617e:	210d      	movs	r1, #13
 8006180:	f7ff fde0 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
 8006184:	4620      	mov	r0, r4
 8006186:	220c      	movs	r2, #12
 8006188:	210e      	movs	r1, #14
 800618a:	f7ff fddb 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
 800618e:	220c      	movs	r2, #12
 8006190:	4620      	mov	r0, r4
 8006192:	210f      	movs	r1, #15

  /* SRAM Address lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 8006194:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
 8006198:	f7ff fdd4 	bl	8005d44 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800619c:	2301      	movs	r3, #1
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 800619e:	4669      	mov	r1, sp
 80061a0:	4620      	mov	r0, r4
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);

  /* SRAM Address lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 80061a2:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 80061a4:	f7ff fd8c 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_FSMC);	   
 80061a8:	220c      	movs	r2, #12
 80061aa:	4629      	mov	r1, r5
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7ff fdc9 	bl	8005d44 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 80061b2:	f44f 6380 	mov.w	r3, #1024	; 0x400

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 80061b6:	441c      	add	r4, r3
 80061b8:	4669      	mov	r1, sp
 80061ba:	4620      	mov	r0, r4
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_FSMC);	   

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 80061bc:	9300      	str	r3, [sp, #0]

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 80061be:	f7ff fd7f 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_FSMC);
 80061c2:	220c      	movs	r2, #12
 80061c4:	210a      	movs	r1, #10
 80061c6:	4620      	mov	r0, r4
 80061c8:	f7ff fdbc 	bl	8005d44 <GPIO_PinAFConfig>
}
 80061cc:	b003      	add	sp, #12
 80061ce:	bd30      	pop	{r4, r5, pc}
 80061d0:	40020c00 	.word	0x40020c00

080061d4 <LCD_FSMCConfig>:
  * @brief  Configures the Parallel interface (FSMC) for LCD(Parallel mode)
  * @param  None
  * @retval None
  */
void LCD_FSMCConfig(void)
{
 80061d4:	b510      	push	{r4, lr}
  FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
  FSMC_NORSRAMTimingInitTypeDef  p;
   
  /* Enable FSMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 80061d6:	2101      	movs	r1, #1
  * @brief  Configures the Parallel interface (FSMC) for LCD(Parallel mode)
  * @param  None
  * @retval None
  */
void LCD_FSMCConfig(void)
{
 80061d8:	b096      	sub	sp, #88	; 0x58
  FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
  FSMC_NORSRAMTimingInitTypeDef  p;
   
  /* Enable FSMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 80061da:	4608      	mov	r0, r1
 80061dc:	f7ff fe14 	bl	8005e08 <RCC_AHB3PeriphClockCmd>
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 3 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 5;
  p.FSMC_AddressHoldTime = 0;
  p.FSMC_DataSetupTime = 9;
 80061e0:	2209      	movs	r2, #9
 80061e2:	9202      	str	r2, [sp, #8]
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
  
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 3 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 5;
 80061e4:	2305      	movs	r3, #5
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
 80061e6:	2210      	movs	r2, #16
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
  
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 3 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 5;
 80061e8:	9300      	str	r3, [sp, #0]
        - Data Width = 16bit
        - Write Operation = Enable
        - Extended Mode = Enable
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
 80061ea:	2404      	movs	r4, #4
  
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 3 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 5;
  p.FSMC_AddressHoldTime = 0;
 80061ec:	2300      	movs	r3, #0
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
 80061ee:	920a      	str	r2, [sp, #40]	; 0x28
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;

  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   
 80061f0:	a807      	add	r0, sp, #28
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 80061f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 3 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 5;
  p.FSMC_AddressHoldTime = 0;
 80061f6:	9301      	str	r3, [sp, #4]
  p.FSMC_DataSetupTime = 9;
  p.FSMC_BusTurnAroundDuration = 0;
 80061f8:	9303      	str	r3, [sp, #12]
  p.FSMC_CLKDivision = 0;
 80061fa:	9304      	str	r3, [sp, #16]
  p.FSMC_DataLatency = 0;
 80061fc:	9305      	str	r3, [sp, #20]
  p.FSMC_AccessMode = FSMC_AccessMode_A;
 80061fe:	9306      	str	r3, [sp, #24]
        - Write Operation = Enable
        - Extended Mode = Enable
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
 8006200:	9308      	str	r3, [sp, #32]
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8006202:	9309      	str	r3, [sp, #36]	; 0x24
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8006204:	930b      	str	r3, [sp, #44]	; 0x2c
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8006206:	930c      	str	r3, [sp, #48]	; 0x30
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8006208:	930d      	str	r3, [sp, #52]	; 0x34
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
 800620a:	930e      	str	r3, [sp, #56]	; 0x38
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 800620c:	930f      	str	r3, [sp, #60]	; 0x3c
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 800620e:	9210      	str	r2, [sp, #64]	; 0x40
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
 8006210:	9311      	str	r3, [sp, #68]	; 0x44
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8006212:	9312      	str	r3, [sp, #72]	; 0x48
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8006214:	9313      	str	r3, [sp, #76]	; 0x4c
        - Data Width = 16bit
        - Write Operation = Enable
        - Extended Mode = Enable
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
 8006216:	9407      	str	r4, [sp, #28]
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
 8006218:	f8cd d050 	str.w	sp, [sp, #80]	; 0x50
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
 800621c:	f8cd d054 	str.w	sp, [sp, #84]	; 0x54

  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   
 8006220:	f7ff fcea 	bl	8005bf8 <FSMC_NORSRAMInit>

  /* Enable FSMC NOR/SRAM Bank3 */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
 8006224:	2101      	movs	r1, #1
 8006226:	4620      	mov	r0, r4
 8006228:	f7ff fd3a 	bl	8005ca0 <FSMC_NORSRAMCmd>
}
 800622c:	b016      	add	sp, #88	; 0x58
 800622e:	bd10      	pop	{r4, pc}

08006230 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 8006230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint32_t lcdid = 0;
 8006234:	2400      	movs	r4, #0
 8006236:	9401      	str	r4, [sp, #4]
  
/* Configure the LCD Control pins --------------------------------------------*/
  LCD_CtrlLinesConfig();
 8006238:	f7ff ff34 	bl	80060a4 <LCD_CtrlLinesConfig>

/* Configure the FSMC Parallel interface -------------------------------------*/
  LCD_FSMCConfig();
 800623c:	f7ff ffca 	bl	80061d4 <LCD_FSMCConfig>

  _delay_(5); /* delay 50 ms */
 8006240:	2005      	movs	r0, #5
 8006242:	f7ff fe53 	bl	8005eec <delay>
  * @retval LCD Register Value.
  */
uint16_t LCD_ReadReg(uint8_t LCD_Reg)
{
  /* Write 16-bit Index (then Read Reg) */
  LCD->LCD_REG = LCD_Reg;
 8006246:	f04f 41d0 	mov.w	r1, #1744830464	; 0x68000000
 800624a:	800c      	strh	r4, [r1, #0]
  /* Read 16-bit Reg */
  return (LCD->LCD_RAM);
 800624c:	884b      	ldrh	r3, [r1, #2]
 800624e:	b29b      	uxth	r3, r3
  LCD_FSMCConfig();

  _delay_(5); /* delay 50 ms */

  /* Read the LCD ID */
  lcdid = LCD_ReadReg(0x00);  
 8006250:	9301      	str	r3, [sp, #4]

  /* Check if the LCD is ILI9320 Controller */
  if(lcdid == 0x9320)
 8006252:	9a01      	ldr	r2, [sp, #4]
 8006254:	f249 3320 	movw	r3, #37664	; 0x9320
 8006258:	429a      	cmp	r2, r3
 800625a:	f040 80d5 	bne.w	8006408 <LCD_Init+0x1d8>
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800625e:	23e5      	movs	r3, #229	; 0xe5
 8006260:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006266:	804b      	strh	r3, [r1, #2]
 8006268:	f04f 0801 	mov.w	r8, #1
 800626c:	f44f 7380 	mov.w	r3, #256	; 0x100
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006270:	800c      	strh	r4, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006272:	f8a1 8002 	strh.w	r8, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006276:	f8a1 8000 	strh.w	r8, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800627a:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800627c:	2302      	movs	r3, #2
 800627e:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006280:	f44f 65e0 	mov.w	r5, #1792	; 0x700
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006284:	2603      	movs	r6, #3
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006286:	f241 0330 	movw	r3, #4144	; 0x1030
 800628a:	804d      	strh	r5, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800628c:	800e      	strh	r6, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800628e:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006290:	2304      	movs	r3, #4
 8006292:	800b      	strh	r3, [r1, #0]
 8006294:	2308      	movs	r3, #8
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006296:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006298:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800629a:	f240 2302 	movw	r3, #514	; 0x202
 800629e:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062a0:	2309      	movs	r3, #9
 80062a2:	800b      	strh	r3, [r1, #0]
 80062a4:	230a      	movs	r3, #10
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062a6:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062a8:	800b      	strh	r3, [r1, #0]
 80062aa:	230c      	movs	r3, #12
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062ac:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062ae:	800b      	strh	r3, [r1, #0]
 80062b0:	230d      	movs	r3, #13
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062b2:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062b4:	2710      	movs	r7, #16
 80062b6:	800b      	strh	r3, [r1, #0]
 80062b8:	f04f 0913 	mov.w	r9, #19
 80062bc:	230f      	movs	r3, #15
 80062be:	f04f 0b11 	mov.w	fp, #17
 80062c2:	f04f 0a12 	mov.w	sl, #18
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062c6:	804c      	strh	r4, [r1, #2]
    /* Power On sequence -----------------------------------------------------*/
    LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
 80062c8:	2014      	movs	r0, #20
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062ca:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062cc:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062ce:	800f      	strh	r7, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062d0:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062d2:	f8a1 b000 	strh.w	fp, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062d6:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062d8:	f8a1 a000 	strh.w	sl, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062dc:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062de:	f8a1 9000 	strh.w	r9, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062e2:	804c      	strh	r4, [r1, #2]
    /* Power On sequence -----------------------------------------------------*/
    LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
 80062e4:	f7ff fe02 	bl	8005eec <delay>
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062e8:	f241 73b0 	movw	r3, #6064	; 0x17b0
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062ec:	800f      	strh	r7, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062ee:	804b      	strh	r3, [r1, #2]
 80062f0:	f240 1337 	movw	r3, #311	; 0x137
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80062f4:	f8a1 b000 	strh.w	fp, [r1]
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    _delay_(5);                  /* Delay 50 ms */
 80062f8:	2005      	movs	r0, #5
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80062fa:	804b      	strh	r3, [r1, #2]
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    _delay_(5);                  /* Delay 50 ms */
 80062fc:	f7ff fdf6 	bl	8005eec <delay>
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006300:	f240 1339 	movw	r3, #313	; 0x139
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006304:	f8a1 a000 	strh.w	sl, [r1]
    _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    _delay_(5);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    _delay_(5);                  /* Delay 50 ms */
 8006308:	2005      	movs	r0, #5
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800630a:	804b      	strh	r3, [r1, #2]
    _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    _delay_(5);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    _delay_(5);                  /* Delay 50 ms */
 800630c:	f7ff fdee 	bl	8005eec <delay>
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006310:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006314:	f8a1 9000 	strh.w	r9, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006318:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800631a:	2329      	movs	r3, #41	; 0x29
 800631c:	800b      	strh	r3, [r1, #0]
    _delay_(5);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    _delay_(5);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
    LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
    _delay_(5);                  /* Delay 50 ms */
 800631e:	2005      	movs	r0, #5
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006320:	f8a1 9002 	strh.w	r9, [r1, #2]
    _delay_(5);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    _delay_(5);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
    LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
    _delay_(5);                  /* Delay 50 ms */
 8006324:	f7ff fde2 	bl	8005eec <delay>
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006328:	2320      	movs	r3, #32
 800632a:	800b      	strh	r3, [r1, #0]
 800632c:	2321      	movs	r3, #33	; 0x21
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800632e:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006330:	800b      	strh	r3, [r1, #0]
 8006332:	2330      	movs	r3, #48	; 0x30
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006334:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006336:	2231      	movs	r2, #49	; 0x31
 8006338:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800633a:	2307      	movs	r3, #7
 800633c:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800633e:	800a      	strh	r2, [r1, #0]
 8006340:	2232      	movs	r2, #50	; 0x32
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006342:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006344:	800a      	strh	r2, [r1, #0]
 8006346:	2235      	movs	r2, #53	; 0x35
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006348:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800634a:	800a      	strh	r2, [r1, #0]
 800634c:	2236      	movs	r2, #54	; 0x36
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800634e:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006350:	800a      	strh	r2, [r1, #0]
 8006352:	2237      	movs	r2, #55	; 0x37
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006354:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006356:	800a      	strh	r2, [r1, #0]
 8006358:	2238      	movs	r2, #56	; 0x38
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800635a:	804d      	strh	r5, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800635c:	800a      	strh	r2, [r1, #0]
 800635e:	2239      	movs	r2, #57	; 0x39
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006360:	804d      	strh	r5, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006362:	800a      	strh	r2, [r1, #0]
 8006364:	223c      	movs	r2, #60	; 0x3c
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006366:	804d      	strh	r5, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006368:	800a      	strh	r2, [r1, #0]
 800636a:	223d      	movs	r2, #61	; 0x3d
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800636c:	804d      	strh	r5, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800636e:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006370:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8006374:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006376:	2250      	movs	r2, #80	; 0x50
 8006378:	800a      	strh	r2, [r1, #0]
 800637a:	2251      	movs	r2, #81	; 0x51
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800637c:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800637e:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006380:	22ef      	movs	r2, #239	; 0xef
 8006382:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006384:	2252      	movs	r2, #82	; 0x52
 8006386:	800a      	strh	r2, [r1, #0]
 8006388:	2253      	movs	r2, #83	; 0x53
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800638a:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800638c:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800638e:	f240 123f 	movw	r2, #319	; 0x13f
 8006392:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006394:	2260      	movs	r2, #96	; 0x60
 8006396:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006398:	f44f 521c 	mov.w	r2, #9984	; 0x2700
 800639c:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800639e:	2261      	movs	r2, #97	; 0x61
 80063a0:	800a      	strh	r2, [r1, #0]
 80063a2:	226a      	movs	r2, #106	; 0x6a
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063a4:	f8a1 8002 	strh.w	r8, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063a8:	800a      	strh	r2, [r1, #0]
 80063aa:	2280      	movs	r2, #128	; 0x80
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063ac:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063ae:	800a      	strh	r2, [r1, #0]
 80063b0:	2281      	movs	r2, #129	; 0x81
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063b2:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063b4:	800a      	strh	r2, [r1, #0]
 80063b6:	2282      	movs	r2, #130	; 0x82
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063b8:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063ba:	800a      	strh	r2, [r1, #0]
 80063bc:	2283      	movs	r2, #131	; 0x83
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063be:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063c0:	800a      	strh	r2, [r1, #0]
 80063c2:	2284      	movs	r2, #132	; 0x84
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063c4:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063c6:	800a      	strh	r2, [r1, #0]
 80063c8:	2285      	movs	r2, #133	; 0x85
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063ca:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063cc:	800a      	strh	r2, [r1, #0]
 80063ce:	2290      	movs	r2, #144	; 0x90
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063d0:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063d2:	800a      	strh	r2, [r1, #0]
 80063d4:	2292      	movs	r2, #146	; 0x92
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063d6:	804f      	strh	r7, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063d8:	800a      	strh	r2, [r1, #0]
 80063da:	2293      	movs	r2, #147	; 0x93
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063dc:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063de:	800a      	strh	r2, [r1, #0]
 80063e0:	2295      	movs	r2, #149	; 0x95
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063e2:	804e      	strh	r6, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063e4:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063e6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80063ea:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063ec:	2297      	movs	r2, #151	; 0x97
 80063ee:	800a      	strh	r2, [r1, #0]
 80063f0:	2298      	movs	r2, #152	; 0x98
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063f2:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063f4:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063f6:	f241 0218 	movw	r2, #4120	; 0x1018
 80063fa:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80063fc:	800e      	strh	r6, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80063fe:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006400:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006402:	f240 1373 	movw	r3, #371	; 0x173
 8006406:	e0e3      	b.n	80065d0 <LCD_Init+0x3a0>
    /* AM=1 (address is updated in vertical writing direction) */
    LCD_WriteReg(LCD_REG_3, 0x1018);

    LCD_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */  
  }
  else if(lcdid == 0x9325) /* Check if the LCD is ILI9325 Controller */
 8006408:	9a01      	ldr	r2, [sp, #4]
 800640a:	f249 3325 	movw	r3, #37669	; 0x9325
 800640e:	429a      	cmp	r2, r3
 8006410:	f040 80df 	bne.w	80065d2 <LCD_Init+0x3a2>
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006414:	2701      	movs	r7, #1
 8006416:	f44f 7380 	mov.w	r3, #256	; 0x100
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800641a:	800c      	strh	r4, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800641c:	804f      	strh	r7, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800641e:	800f      	strh	r7, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006420:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006422:	2302      	movs	r3, #2
 8006424:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006426:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800642a:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800642c:	2503      	movs	r5, #3
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800642e:	f241 0918 	movw	r9, #4120	; 0x1018
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006432:	2304      	movs	r3, #4
 8006434:	800d      	strh	r5, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006436:	f8a1 9002 	strh.w	r9, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800643a:	800b      	strh	r3, [r1, #0]
 800643c:	2308      	movs	r3, #8
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800643e:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006440:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006442:	f240 2302 	movw	r3, #514	; 0x202
 8006446:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006448:	2309      	movs	r3, #9
 800644a:	800b      	strh	r3, [r1, #0]
 800644c:	230a      	movs	r3, #10
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800644e:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006450:	800b      	strh	r3, [r1, #0]
 8006452:	230c      	movs	r3, #12
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006454:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006456:	800b      	strh	r3, [r1, #0]
 8006458:	230d      	movs	r3, #13
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800645a:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800645c:	2610      	movs	r6, #16
 800645e:	800b      	strh	r3, [r1, #0]
 8006460:	f04f 0813 	mov.w	r8, #19
 8006464:	230f      	movs	r3, #15
 8006466:	f04f 0b11 	mov.w	fp, #17
 800646a:	f04f 0a12 	mov.w	sl, #18
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800646e:	804c      	strh	r4, [r1, #2]
    /* Power On sequence -----------------------------------------------------*/
    LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
 8006470:	2014      	movs	r0, #20
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006472:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006474:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006476:	800e      	strh	r6, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006478:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800647a:	f8a1 b000 	strh.w	fp, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800647e:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006480:	f8a1 a000 	strh.w	sl, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006484:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006486:	f8a1 8000 	strh.w	r8, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800648a:	804c      	strh	r4, [r1, #2]
    /* Power On sequence -----------------------------------------------------*/
    LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
 800648c:	f7ff fd2e 	bl	8005eec <delay>
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006490:	f241 73b0 	movw	r3, #6064	; 0x17b0
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006494:	800e      	strh	r6, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006496:	804b      	strh	r3, [r1, #2]
 8006498:	f240 1337 	movw	r3, #311	; 0x137
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800649c:	f8a1 b000 	strh.w	fp, [r1]
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    _delay_(5);                       /* Delay 50 ms */
 80064a0:	2005      	movs	r0, #5
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064a2:	804b      	strh	r3, [r1, #2]
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    _delay_(5);                       /* Delay 50 ms */
 80064a4:	f7ff fd22 	bl	8005eec <delay>
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064a8:	f240 1339 	movw	r3, #313	; 0x139
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064ac:	f8a1 a000 	strh.w	sl, [r1]
    _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    _delay_(5);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    _delay_(5);                       /* Delay 50 ms */
 80064b0:	2005      	movs	r0, #5
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064b2:	804b      	strh	r3, [r1, #2]
    _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    _delay_(5);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    _delay_(5);                       /* Delay 50 ms */
 80064b4:	f7ff fd1a 	bl	8005eec <delay>
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064b8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064bc:	f8a1 8000 	strh.w	r8, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064c0:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064c2:	2329      	movs	r3, #41	; 0x29
 80064c4:	800b      	strh	r3, [r1, #0]
    _delay_(5);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    _delay_(5);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
    LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
    _delay_(5);                       /* Delay 50 ms */
 80064c6:	2005      	movs	r0, #5
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064c8:	f8a1 8002 	strh.w	r8, [r1, #2]
    _delay_(5);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    _delay_(5);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
    LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
    _delay_(5);                       /* Delay 50 ms */
 80064cc:	f7ff fd0e 	bl	8005eec <delay>
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064d0:	2320      	movs	r3, #32
 80064d2:	800b      	strh	r3, [r1, #0]
 80064d4:	2321      	movs	r3, #33	; 0x21
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064d6:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064d8:	800b      	strh	r3, [r1, #0]
 80064da:	2330      	movs	r3, #48	; 0x30
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064dc:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064de:	2231      	movs	r2, #49	; 0x31
 80064e0:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064e2:	2307      	movs	r3, #7
 80064e4:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064e6:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064e8:	f240 3202 	movw	r2, #770	; 0x302
 80064ec:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064ee:	2232      	movs	r2, #50	; 0x32
 80064f0:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064f2:	f240 1005 	movw	r0, #261	; 0x105
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064f6:	2235      	movs	r2, #53	; 0x35
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80064f8:	8048      	strh	r0, [r1, #2]
 80064fa:	f240 2e06 	movw	lr, #518	; 0x206
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80064fe:	800a      	strh	r2, [r1, #0]
 8006500:	2236      	movs	r2, #54	; 0x36
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006502:	f8a1 e002 	strh.w	lr, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006506:	f04f 0c37 	mov.w	ip, #55	; 0x37
 800650a:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800650c:	f640 0208 	movw	r2, #2056	; 0x808
 8006510:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006512:	f8a1 c000 	strh.w	ip, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006516:	f8a1 e002 	strh.w	lr, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800651a:	f04f 0e38 	mov.w	lr, #56	; 0x38
 800651e:	f8a1 e000 	strh.w	lr, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006522:	f240 5e04 	movw	lr, #1284	; 0x504
 8006526:	f8a1 e002 	strh.w	lr, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800652a:	f04f 0e39 	mov.w	lr, #57	; 0x39
 800652e:	f8a1 e000 	strh.w	lr, [r1]
 8006532:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006536:	804b      	strh	r3, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006538:	f8a1 e000 	strh.w	lr, [r1]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800653c:	8048      	strh	r0, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800653e:	203d      	movs	r0, #61	; 0x3d
 8006540:	8008      	strh	r0, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006542:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006544:	2250      	movs	r2, #80	; 0x50
 8006546:	800a      	strh	r2, [r1, #0]
 8006548:	2251      	movs	r2, #81	; 0x51
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800654a:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800654c:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800654e:	22ef      	movs	r2, #239	; 0xef
 8006550:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006552:	2252      	movs	r2, #82	; 0x52
 8006554:	800a      	strh	r2, [r1, #0]
 8006556:	2253      	movs	r2, #83	; 0x53
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006558:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800655a:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800655c:	f240 123f 	movw	r2, #319	; 0x13f
 8006560:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006562:	2260      	movs	r2, #96	; 0x60
 8006564:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006566:	f44f 4227 	mov.w	r2, #42752	; 0xa700
 800656a:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800656c:	2261      	movs	r2, #97	; 0x61
 800656e:	800a      	strh	r2, [r1, #0]
 8006570:	226a      	movs	r2, #106	; 0x6a
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006572:	804f      	strh	r7, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006574:	800a      	strh	r2, [r1, #0]
 8006576:	2280      	movs	r2, #128	; 0x80
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006578:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800657a:	800a      	strh	r2, [r1, #0]
 800657c:	2281      	movs	r2, #129	; 0x81
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800657e:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006580:	800a      	strh	r2, [r1, #0]
 8006582:	2282      	movs	r2, #130	; 0x82
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006584:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006586:	800a      	strh	r2, [r1, #0]
 8006588:	2283      	movs	r2, #131	; 0x83
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800658a:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800658c:	800a      	strh	r2, [r1, #0]
 800658e:	2284      	movs	r2, #132	; 0x84
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006590:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006592:	800a      	strh	r2, [r1, #0]
 8006594:	2285      	movs	r2, #133	; 0x85
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 8006596:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 8006598:	800a      	strh	r2, [r1, #0]
 800659a:	2290      	movs	r2, #144	; 0x90
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 800659c:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 800659e:	800a      	strh	r2, [r1, #0]
 80065a0:	2292      	movs	r2, #146	; 0x92
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80065a2:	804e      	strh	r6, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80065a4:	800a      	strh	r2, [r1, #0]
 80065a6:	2293      	movs	r2, #147	; 0x93
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80065a8:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80065aa:	800a      	strh	r2, [r1, #0]
 80065ac:	2295      	movs	r2, #149	; 0x95
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80065ae:	804d      	strh	r5, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80065b0:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80065b2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80065b6:	804a      	strh	r2, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80065b8:	2297      	movs	r2, #151	; 0x97
 80065ba:	800a      	strh	r2, [r1, #0]
 80065bc:	2298      	movs	r2, #152	; 0x98
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80065be:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80065c0:	800a      	strh	r2, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80065c2:	804c      	strh	r4, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80065c4:	800d      	strh	r5, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80065c6:	f8a1 9002 	strh.w	r9, [r1, #2]
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
 80065ca:	800b      	strh	r3, [r1, #0]
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
 80065cc:	f240 1333 	movw	r3, #307	; 0x133
 80065d0:	804b      	strh	r3, [r1, #2]
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
  LCD_Currentfonts = fonts;
 80065d2:	4a03      	ldr	r2, [pc, #12]	; (80065e0 <LCD_Init+0x3b0>)
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <LCD_Init+0x3b4>)
 80065d6:	601a      	str	r2, [r3, #0]
    LCD_WriteReg(LCD_REG_3, 0x1018);

    LCD_WriteReg(LCD_REG_7, 0x0133); /* 262K color and display ON */ 
  }
  LCD_SetFont(&LCD_DEFAULT_FONT);
}
 80065d8:	b003      	add	sp, #12
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065de:	bf00      	nop
 80065e0:	20000030 	.word	0x20000030
 80065e4:	20002ba4 	.word	0x20002ba4

080065e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80065e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006620 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80065ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065ee:	e003      	b.n	80065f8 <LoopCopyDataInit>

080065f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80065f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065f6:	3104      	adds	r1, #4

080065f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80065f8:	480b      	ldr	r0, [pc, #44]	; (8006628 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80065fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006600:	d3f6      	bcc.n	80065f0 <CopyDataInit>
  ldr  r2, =_sbss
 8006602:	4a0b      	ldr	r2, [pc, #44]	; (8006630 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006604:	e002      	b.n	800660c <LoopFillZerobss>

08006606 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006606:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006608:	f842 3b04 	str.w	r3, [r2], #4

0800660c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800660e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006610:	d3f9      	bcc.n	8006606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006612:	f7fa fc59 	bl	8000ec8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006616:	f000 fd69 	bl	80070ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800661a:	f000 f8dd 	bl	80067d8 <main>
  bx  lr    
 800661e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006620:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8006624:	0800bdec 	.word	0x0800bdec
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006628:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800662c:	20000574 	.word	0x20000574
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8006630:	20000574 	.word	0x20000574
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006634:	200085fc 	.word	0x200085fc

08006638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006638:	e7fe      	b.n	8006638 <ADC_IRQHandler>

0800663a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 800663a:	b570      	push	{r4, r5, r6, lr}
 800663c:	460e      	mov	r6, r1
 800663e:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006640:	460c      	mov	r4, r1
 8006642:	1ba3      	subs	r3, r4, r6
 8006644:	429d      	cmp	r5, r3
 8006646:	dd04      	ble.n	8006652 <_read+0x18>
	{
	  *ptr++ = __io_getchar();
 8006648:	f3af 8000 	nop.w
 800664c:	f804 0b01 	strb.w	r0, [r4], #1
 8006650:	e7f7      	b.n	8006642 <_read+0x8>
	}

return len;
}
 8006652:	4628      	mov	r0, r5
 8006654:	bd70      	pop	{r4, r5, r6, pc}

08006656 <_write>:

int _write(int file, char *ptr, int len)
{
 8006656:	b570      	push	{r4, r5, r6, lr}
 8006658:	460e      	mov	r6, r1
 800665a:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800665c:	460c      	mov	r4, r1
 800665e:	1ba3      	subs	r3, r4, r6
 8006660:	429d      	cmp	r5, r3
 8006662:	dd04      	ble.n	800666e <_write+0x18>
	{
	   __io_putchar( *ptr++ );
 8006664:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006668:	f3af 8000 	nop.w
 800666c:	e7f7      	b.n	800665e <_write+0x8>
	}
	return len;
}
 800666e:	4628      	mov	r0, r5
 8006670:	bd70      	pop	{r4, r5, r6, pc}
	...

08006674 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006674:	4b09      	ldr	r3, [pc, #36]	; (800669c <_sbrk+0x28>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	b90a      	cbnz	r2, 800667e <_sbrk+0xa>
		heap_end = &end;
 800667a:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <_sbrk+0x2c>)
 800667c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800667e:	681b      	ldr	r3, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006680:	466a      	mov	r2, sp
 8006682:	4418      	add	r0, r3
 8006684:	4290      	cmp	r0, r2
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006686:	bf89      	itett	hi
 8006688:	4b06      	ldrhi	r3, [pc, #24]	; (80066a4 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800668a:	4a04      	ldrls	r2, [pc, #16]	; (800669c <_sbrk+0x28>)
	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800668c:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800668e:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 8006692:	bf96      	itet	ls
 8006694:	6010      	strls	r0, [r2, #0]
	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006696:	601a      	strhi	r2, [r3, #0]
		return (caddr_t) -1;
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
 8006698:	4618      	movls	r0, r3
}
 800669a:	4770      	bx	lr
 800669c:	20002ba8 	.word	0x20002ba8
 80066a0:	200085fc 	.word	0x200085fc
 80066a4:	200085f8 	.word	0x200085f8

080066a8 <_close>:

int _close(int file)
{
	return -1;
}
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	4770      	bx	lr

080066ae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80066ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066b2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80066b4:	2000      	movs	r0, #0
 80066b6:	4770      	bx	lr

080066b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80066b8:	2001      	movs	r0, #1
 80066ba:	4770      	bx	lr

080066bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80066bc:	2000      	movs	r0, #0
 80066be:	4770      	bx	lr

080066c0 <led_init>:
/* Private functions ---------------------------------------------------------*/

void led_init()
{
  //Enables the clock going to the GPIO D peripheral
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80066c0:	4a12      	ldr	r2, [pc, #72]	; (800670c <led_init+0x4c>)
 80066c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80066c4:	f043 0308 	orr.w	r3, r3, #8
 80066c8:	6313      	str	r3, [r2, #48]	; 0x30
  //Sets GPIOD ports 12-15 to output
  GPIOD->MODER &= ~(GPIO_MODER_MODER12) & ~(GPIO_MODER_MODER13);
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <led_init+0x50>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066d2:	601a      	str	r2, [r3, #0]
  GPIOD->MODER &= ~(GPIO_MODER_MODER14) & ~(GPIO_MODER_MODER15);
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80066da:	601a      	str	r2, [r3, #0]
  GPIOD->MODER |= GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0;
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	f042 62a0 	orr.w	r2, r2, #83886080	; 0x5000000
 80066e2:	601a      	str	r2, [r3, #0]
  GPIOD->MODER |= GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0;
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
 80066ea:	601a      	str	r2, [r3, #0]

  //Sets the speed of the GPIO to very high because why the fuck not
  GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12 | GPIO_OSPEEDER_OSPEEDR13;
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 80066f2:	609a      	str	r2, [r3, #8]
  GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14 | GPIO_OSPEEDER_OSPEEDR15;
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80066fa:	609a      	str	r2, [r3, #8]

  //Resetting all LEDs to ON
  GPIOD->BSRRL = GPIO_BSRR_BS_12 | GPIO_BSRR_BS_13;
 80066fc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006700:	831a      	strh	r2, [r3, #24]
  GPIOD->BSRRL = GPIO_BSRR_BS_14 | GPIO_BSRR_BS_15;
 8006702:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006706:	831a      	strh	r2, [r3, #24]
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40023800 	.word	0x40023800
 8006710:	40020c00 	.word	0x40020c00

08006714 <Delay>:
  * @retval None
  */
void Delay(uint32_t nCount)
{
  /* Capture the current local time */
  timingdelay = LocalTime + nCount;  
 8006714:	4a04      	ldr	r2, [pc, #16]	; (8006728 <Delay+0x14>)
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	4418      	add	r0, r3
 800671a:	4b04      	ldr	r3, [pc, #16]	; (800672c <Delay+0x18>)
 800671c:	6018      	str	r0, [r3, #0]

  /* wait until the desired delay finish */  
  while(timingdelay > LocalTime)
 800671e:	6813      	ldr	r3, [r2, #0]
 8006720:	4298      	cmp	r0, r3
 8006722:	d8fc      	bhi.n	800671e <Delay+0xa>
  {     
  }
}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20002bac 	.word	0x20002bac
 800672c:	20008500 	.word	0x20008500

08006730 <Time_Update>:
  * @param  None
  * @retval None
  */
void Time_Update(void)
{
  LocalTime += SYSTEMTICK_PERIOD_MS;
 8006730:	4a02      	ldr	r2, [pc, #8]	; (800673c <Time_Update+0xc>)
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	330a      	adds	r3, #10
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20002bac 	.word	0x20002bac

08006740 <LCD_LED_Init>:
  * @brief  Initializes the STM324xG-EVAL's LCD and LEDs resources.
  * @param  None
  * @retval None
  */
void LCD_LED_Init(void)
{
 8006740:	b508      	push	{r3, lr}
#ifdef USE_LCD
  /* Initialize the STM324xG-EVAL's LCD */
  STM324xG_LCD_Init();
 8006742:	f7ff fd75 	bl	8006230 <LCD_Init>
#endif

  /* Initialize STM324xG-EVAL's LEDs */
  STM_EVAL_LEDInit(LED1);
 8006746:	2000      	movs	r0, #0
 8006748:	f7ff fb9e 	bl	8005e88 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED2);
 800674c:	2001      	movs	r0, #1
 800674e:	f7ff fb9b 	bl	8005e88 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED3);
 8006752:	2002      	movs	r0, #2
 8006754:	f7ff fb98 	bl	8005e88 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8006758:	2003      	movs	r0, #3
 800675a:	f7ff fb95 	bl	8005e88 <STM_EVAL_LEDInit>

  /* Leds on */
  STM_EVAL_LEDOn(LED1);
 800675e:	2000      	movs	r0, #0
 8006760:	f7ff fbb8 	bl	8005ed4 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED2);
 8006764:	2001      	movs	r0, #1
 8006766:	f7ff fbb5 	bl	8005ed4 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED3);
 800676a:	2002      	movs	r0, #2
 800676c:	f7ff fbb2 	bl	8005ed4 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED4);
 8006770:	2003      	movs	r0, #3
 8006772:	f7ff fbaf 	bl	8005ed4 <STM_EVAL_LEDOn>

#ifdef USE_LCD
  /* Clear the LCD */
  LCD_Clear(Black);
 8006776:	2000      	movs	r0, #0
 8006778:	f7ff fbf1 	bl	8005f5e <LCD_Clear>

  /* Set the LCD Back Color */
  LCD_SetBackColor(Black);
 800677c:	2000      	movs	r0, #0
 800677e:	f7ff fbd3 	bl	8005f28 <LCD_SetBackColor>

  /* Set the LCD Text Color */
  LCD_SetTextColor(White);
 8006782:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006786:	f7ff fbc3 	bl	8005f10 <LCD_SetTextColor>

  /* Display message on the LCD*/
  LCD_DisplayStringLine(Line0, (uint8_t*)MESSAGE1);
 800678a:	f7ff fbd9 	bl	8005f40 <LCD_GetFont>
 800678e:	490e      	ldr	r1, [pc, #56]	; (80067c8 <LCD_LED_Init+0x88>)
 8006790:	2000      	movs	r0, #0
 8006792:	f7ff fc67 	bl	8006064 <LCD_DisplayStringLine>
  LCD_DisplayStringLine(Line1, (uint8_t*)MESSAGE2);
 8006796:	f7ff fbd3 	bl	8005f40 <LCD_GetFont>
 800679a:	490c      	ldr	r1, [pc, #48]	; (80067cc <LCD_LED_Init+0x8c>)
 800679c:	88c0      	ldrh	r0, [r0, #6]
 800679e:	f7ff fc61 	bl	8006064 <LCD_DisplayStringLine>
  LCD_DisplayStringLine(Line2, (uint8_t*)MESSAGE3);
 80067a2:	f7ff fbcd 	bl	8005f40 <LCD_GetFont>
 80067a6:	88c0      	ldrh	r0, [r0, #6]
 80067a8:	4909      	ldr	r1, [pc, #36]	; (80067d0 <LCD_LED_Init+0x90>)
 80067aa:	0040      	lsls	r0, r0, #1
 80067ac:	b280      	uxth	r0, r0
 80067ae:	f7ff fc59 	bl	8006064 <LCD_DisplayStringLine>
  LCD_DisplayStringLine(Line3, (uint8_t*)MESSAGE4);
 80067b2:	f7ff fbc5 	bl	8005f40 <LCD_GetFont>
 80067b6:	88c0      	ldrh	r0, [r0, #6]
 80067b8:	4906      	ldr	r1, [pc, #24]	; (80067d4 <LCD_LED_Init+0x94>)
 80067ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80067be:	b280      	uxth	r0, r0
#endif
}
 80067c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  /* Display message on the LCD*/
  LCD_DisplayStringLine(Line0, (uint8_t*)MESSAGE1);
  LCD_DisplayStringLine(Line1, (uint8_t*)MESSAGE2);
  LCD_DisplayStringLine(Line2, (uint8_t*)MESSAGE3);
  LCD_DisplayStringLine(Line3, (uint8_t*)MESSAGE4);
 80067c4:	f7ff bc4e 	b.w	8006064 <LCD_DisplayStringLine>
 80067c8:	0800bb14 	.word	0x0800bb14
 80067cc:	0800bb2a 	.word	0x0800bb2a
 80067d0:	0800bb3f 	.word	0x0800bb3f
 80067d4:	0800bb54 	.word	0x0800bb54

080067d8 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 80067d8:	b508      	push	{r3, lr}
       startup file (startup_stm32f4xx.s) before to branch to application main.
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f4xx.c file
     */

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80067da:	f44f 7040 	mov.w	r0, #768	; 0x300
 80067de:	f7ff f96f 	bl	8005ac0 <NVIC_PriorityGroupConfig>
  led_init();
 80067e2:	f7ff ff6d 	bl	80066c0 <led_init>
#ifdef SERIAL_DEBUG
  DebugComPort_Init();  
#endif

  /*Initialize LCD and Leds */ 
  LCD_LED_Init();
 80067e6:	f7ff ffab 	bl	8006740 <LCD_LED_Init>
  
  /* configure ethernet (GPIOs, clocks, MAC, DMA) */
  ETH_BSP_Config();
 80067ea:	f000 f90b 	bl	8006a04 <ETH_BSP_Config>

  /* Initilaize the LwIP stack */
  LwIP_Init();
 80067ee:	f000 f80f 	bl	8006810 <LwIP_Init>
  
  /* tcp echo server Init */
  tcp_echoserver_init();
 80067f2:	f000 fc51 	bl	8007098 <tcp_echoserver_init>
    { 
      /* process received ethernet packet*/
      LwIP_Pkt_Handle();
    }
    /* handle periodic timers for LwIP*/
    LwIP_Periodic_Handle(LocalTime);
 80067f6:	4c05      	ldr	r4, [pc, #20]	; (800680c <main+0x34>)
   
  /* Infinite loop */
  while (1)
  {  
    /* check if any packet received */
    if (ETH_CheckFrameReceived())
 80067f8:	f7fe fed4 	bl	80055a4 <ETH_CheckFrameReceived>
 80067fc:	b108      	cbz	r0, 8006802 <main+0x2a>
    { 
      /* process received ethernet packet*/
      LwIP_Pkt_Handle();
 80067fe:	f000 f887 	bl	8006910 <LwIP_Pkt_Handle>
    }
    /* handle periodic timers for LwIP*/
    LwIP_Periodic_Handle(LocalTime);
 8006802:	6820      	ldr	r0, [r4, #0]
 8006804:	f000 f88a 	bl	800691c <LwIP_Periodic_Handle>
  } 
 8006808:	e7f6      	b.n	80067f8 <main+0x20>
 800680a:	bf00      	nop
 800680c:	20002bac 	.word	0x20002bac

08006810 <LwIP_Init>:
* @brief  Initializes the lwIP stack
* @param  None
* @retval None
*/
void LwIP_Init(void)
{
 8006810:	b530      	push	{r4, r5, lr}
 8006812:	b08d      	sub	sp, #52	; 0x34
  uint8_t iptab[4] = {0};
  uint8_t iptxt[20];
#endif

  /* Initializes the dynamic memory heap defined by MEM_SIZE.*/
  mem_init();
 8006814:	f7fb fb4c 	bl	8001eb0 <mem_init>
  
  /* Initializes the memory pools defined by MEMP_NUM_x.*/
  memp_init();
 8006818:	f7fb fc60 	bl	80020dc <memp_init>
#ifdef USE_DHCP
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;
#else
  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800681c:	4b31      	ldr	r3, [pc, #196]	; (80068e4 <LwIP_Init+0xd4>)
 800681e:	9304      	str	r3, [sp, #16]
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8006820:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006824:	9305      	str	r3, [sp, #20]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8006826:	ab0c      	add	r3, sp, #48	; 0x30
 8006828:	4a2f      	ldr	r2, [pc, #188]	; (80068e8 <LwIP_Init+0xd8>)
 800682a:	f843 2d18 	str.w	r2, [r3, #-24]!
  Give pointers to cleared ip_addr structures when using DHCP,
  or fill them with sane numbers otherwise. The state pointer may be NULL.

  The init function pointer must point to a initialization function for
  your ethernet netif interface. The following code illustrates it's use.*/
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800682e:	4c2f      	ldr	r4, [pc, #188]	; (80068ec <LwIP_Init+0xdc>)
 8006830:	4a2f      	ldr	r2, [pc, #188]	; (80068f0 <LwIP_Init+0xe0>)
 8006832:	9202      	str	r2, [sp, #8]
 8006834:	2500      	movs	r5, #0
 8006836:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <LwIP_Init+0xe4>)
 8006838:	9201      	str	r2, [sp, #4]
 800683a:	a904      	add	r1, sp, #16
 800683c:	aa05      	add	r2, sp, #20
 800683e:	9500      	str	r5, [sp, #0]
 8006840:	4620      	mov	r0, r4
 8006842:	f7fb fcc3 	bl	80021cc <netif_add>

  /*  Registers the default network interface.*/
  netif_set_default(&gnetif);
 8006846:	4620      	mov	r0, r4
 8006848:	f7fb fce8 	bl	800221c <netif_set_default>

  if (EthStatus == (ETH_INIT_FLAG | ETH_LINK_FLAG))
 800684c:	4b2a      	ldr	r3, [pc, #168]	; (80068f8 <LwIP_Init+0xe8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b11      	cmp	r3, #17
 8006852:	d123      	bne.n	800689c <LwIP_Init+0x8c>
  { 
    /* Set Ethernet link flag */
    gnetif.flags |= NETIF_FLAG_LINK_UP;
 8006854:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31

    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 8006858:	4620      	mov	r0, r4
  netif_set_default(&gnetif);

  if (EthStatus == (ETH_INIT_FLAG | ETH_LINK_FLAG))
  { 
    /* Set Ethernet link flag */
    gnetif.flags |= NETIF_FLAG_LINK_UP;
 800685a:	f043 0310 	orr.w	r3, r3, #16
 800685e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31

    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 8006862:	f7fb fce1 	bl	8002228 <netif_set_up>
    iptab[0] = IP_ADDR3;
    iptab[1] = IP_ADDR2;
    iptab[2] = IP_ADDR1;
    iptab[3] = IP_ADDR0;

    sprintf((char*)iptxt, "  %d.%d.%d.%d", iptab[3], iptab[2], iptab[1], iptab[0]); 
 8006866:	230a      	movs	r3, #10
 8006868:	22c0      	movs	r2, #192	; 0xc0
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	4923      	ldr	r1, [pc, #140]	; (80068fc <LwIP_Init+0xec>)
 800686e:	9500      	str	r5, [sp, #0]
 8006870:	23a8      	movs	r3, #168	; 0xa8
 8006872:	a807      	add	r0, sp, #28
 8006874:	f000 fcd6 	bl	8007224 <sprintf>

    LCD_DisplayStringLine(Line8, (uint8_t*)"  Static IP address   ");
 8006878:	f7ff fb62 	bl	8005f40 <LCD_GetFont>
 800687c:	88c0      	ldrh	r0, [r0, #6]
 800687e:	4920      	ldr	r1, [pc, #128]	; (8006900 <LwIP_Init+0xf0>)
 8006880:	00c0      	lsls	r0, r0, #3
 8006882:	b280      	uxth	r0, r0
 8006884:	f7ff fbee 	bl	8006064 <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line9, iptxt);
 8006888:	f7ff fb5a 	bl	8005f40 <LCD_GetFont>
 800688c:	88c0      	ldrh	r0, [r0, #6]
 800688e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006892:	a907      	add	r1, sp, #28
 8006894:	b280      	uxth	r0, r0
 8006896:	f7ff fbe5 	bl	8006064 <LCD_DisplayStringLine>
 800689a:	e01d      	b.n	80068d8 <LwIP_Init+0xc8>
#endif /* USE_DHCP */
  }
  else
  {
    /*  When the netif link is down this function must be called.*/
    netif_set_down(&gnetif);
 800689c:	4620      	mov	r0, r4
 800689e:	f7fb fcd4 	bl	800224a <netif_set_down>
#ifdef USE_DHCP
    DHCP_state = DHCP_LINK_DOWN;
#endif /* USE_DHCP */
    /* Set the LCD Text Color */
    LCD_SetTextColor(Red);
 80068a2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80068a6:	f7ff fb33 	bl	8005f10 <LCD_SetTextColor>

    /* Display message on the LCD */
    LCD_DisplayStringLine(Line5, (uint8_t*)"  Network Cable is  ");
 80068aa:	f7ff fb49 	bl	8005f40 <LCD_GetFont>
 80068ae:	88c0      	ldrh	r0, [r0, #6]
 80068b0:	4914      	ldr	r1, [pc, #80]	; (8006904 <LwIP_Init+0xf4>)
 80068b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068b6:	b280      	uxth	r0, r0
 80068b8:	f7ff fbd4 	bl	8006064 <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line6, (uint8_t*)"    not connected   ");
 80068bc:	f7ff fb40 	bl	8005f40 <LCD_GetFont>
 80068c0:	88c0      	ldrh	r0, [r0, #6]
 80068c2:	4911      	ldr	r1, [pc, #68]	; (8006908 <LwIP_Init+0xf8>)
 80068c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80068c8:	0040      	lsls	r0, r0, #1
 80068ca:	b280      	uxth	r0, r0
 80068cc:	f7ff fbca 	bl	8006064 <LCD_DisplayStringLine>

    /* Set the LCD Text Color */
    LCD_SetTextColor(White);
 80068d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80068d4:	f7ff fb1c 	bl	8005f10 <LCD_SetTextColor>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ETH_link_callback);
 80068d8:	490c      	ldr	r1, [pc, #48]	; (800690c <LwIP_Init+0xfc>)
 80068da:	4804      	ldr	r0, [pc, #16]	; (80068ec <LwIP_Init+0xdc>)
 80068dc:	f7fb fced 	bl	80022ba <netif_set_link_callback>
}
 80068e0:	b00d      	add	sp, #52	; 0x34
 80068e2:	bd30      	pop	{r4, r5, pc}
 80068e4:	0a00a8c0 	.word	0x0a00a8c0
 80068e8:	0100a8c0 	.word	0x0100a8c0
 80068ec:	20008504 	.word	0x20008504
 80068f0:	08004f29 	.word	0x08004f29
 80068f4:	08005281 	.word	0x08005281
 80068f8:	20002bb8 	.word	0x20002bb8
 80068fc:	0800bb69 	.word	0x0800bb69
 8006900:	0800bb77 	.word	0x0800bb77
 8006904:	0800bb8e 	.word	0x0800bb8e
 8006908:	0800bba3 	.word	0x0800bba3
 800690c:	08006c95 	.word	0x08006c95

08006910 <LwIP_Pkt_Handle>:
* @retval None
*/
void LwIP_Pkt_Handle(void)
{
  /* Read a received packet from the Ethernet buffers and send it to the lwIP for handling */
  ethernetif_input(&gnetif);
 8006910:	4801      	ldr	r0, [pc, #4]	; (8006918 <LwIP_Pkt_Handle+0x8>)
 8006912:	f7fe bc47 	b.w	80051a4 <ethernetif_input>
 8006916:	bf00      	nop
 8006918:	20008504 	.word	0x20008504

0800691c <LwIP_Periodic_Handle>:
* @brief  LwIP periodic tasks
* @param  localtime the current LocalTime value
* @retval None
*/
void LwIP_Periodic_Handle(__IO uint32_t localtime)
{
 800691c:	b507      	push	{r0, r1, r2, lr}
#if LWIP_TCP
  /* TCP periodic process every 250 ms */
  if (localtime - TCPTimer >= TCP_TMR_INTERVAL)
 800691e:	4a0e      	ldr	r2, [pc, #56]	; (8006958 <LwIP_Periodic_Handle+0x3c>)
* @brief  LwIP periodic tasks
* @param  localtime the current LocalTime value
* @retval None
*/
void LwIP_Periodic_Handle(__IO uint32_t localtime)
{
 8006920:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* TCP periodic process every 250 ms */
  if (localtime - TCPTimer >= TCP_TMR_INTERVAL)
 8006922:	9b01      	ldr	r3, [sp, #4]
 8006924:	6811      	ldr	r1, [r2, #0]
 8006926:	1a5b      	subs	r3, r3, r1
 8006928:	2bf9      	cmp	r3, #249	; 0xf9
 800692a:	d903      	bls.n	8006934 <LwIP_Periodic_Handle+0x18>
  {
    TCPTimer =  localtime;
 800692c:	9b01      	ldr	r3, [sp, #4]
 800692e:	6013      	str	r3, [r2, #0]
    tcp_tmr();
 8006930:	f7fc faa2 	bl	8002e78 <tcp_tmr>
  }
#endif
  
  /* ARP periodic process every 5s */
  if ((localtime - ARPTimer) >= ARP_TMR_INTERVAL)
 8006934:	4a09      	ldr	r2, [pc, #36]	; (800695c <LwIP_Periodic_Handle+0x40>)
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	6811      	ldr	r1, [r2, #0]
 800693a:	1a5b      	subs	r3, r3, r1
 800693c:	f241 3187 	movw	r1, #4999	; 0x1387
 8006940:	428b      	cmp	r3, r1
 8006942:	d906      	bls.n	8006952 <LwIP_Periodic_Handle+0x36>
  {
    ARPTimer =  localtime;
 8006944:	9b01      	ldr	r3, [sp, #4]
 8006946:	6013      	str	r3, [r2, #0]
    DHCPcoarseTimer =  localtime;
    dhcp_coarse_tmr();
  }

#endif
}
 8006948:	b003      	add	sp, #12
 800694a:	f85d eb04 	ldr.w	lr, [sp], #4
  
  /* ARP periodic process every 5s */
  if ((localtime - ARPTimer) >= ARP_TMR_INTERVAL)
  {
    ARPTimer =  localtime;
    etharp_tmr();
 800694e:	f7fe b94d 	b.w	8004bec <etharp_tmr>
    DHCPcoarseTimer =  localtime;
    dhcp_coarse_tmr();
  }

#endif
}
 8006952:	b003      	add	sp, #12
 8006954:	f85d fb04 	ldr.w	pc, [sp], #4
 8006958:	20002bb0 	.word	0x20002bb0
 800695c:	20002bb4 	.word	0x20002bb4

08006960 <Eth_Link_PHYITConfig>:
  * @brief  Configure the PHY to generate an interrupt on change of link status.
  * @param PHYAddress: external PHY address  
  * @retval None
  */
uint32_t Eth_Link_PHYITConfig(uint16_t PHYAddress)
{
 8006960:	b510      	push	{r4, lr}
  uint16_t tmpreg = 0;

  /* Read MICR register */
  tmpreg = ETH_ReadPHYRegister(PHYAddress, PHY_MICR);
 8006962:	2111      	movs	r1, #17
  * @brief  Configure the PHY to generate an interrupt on change of link status.
  * @param PHYAddress: external PHY address  
  * @retval None
  */
uint32_t Eth_Link_PHYITConfig(uint16_t PHYAddress)
{
 8006964:	4604      	mov	r4, r0
  uint16_t tmpreg = 0;

  /* Read MICR register */
  tmpreg = ETH_ReadPHYRegister(PHYAddress, PHY_MICR);
 8006966:	f7fe fef1 	bl	800574c <ETH_ReadPHYRegister>

  /* Enable output interrupt events to signal via the INT pin */
  tmpreg |= (uint16_t)(PHY_MICR_INT_EN | PHY_MICR_INT_OE);
  if(!(ETH_WritePHYRegister(PHYAddress, PHY_MICR, tmpreg)))
 800696a:	f040 0203 	orr.w	r2, r0, #3
 800696e:	b292      	uxth	r2, r2
 8006970:	2111      	movs	r1, #17
 8006972:	4620      	mov	r0, r4
 8006974:	f7fe ff16 	bl	80057a4 <ETH_WritePHYRegister>
 8006978:	b168      	cbz	r0, 8006996 <Eth_Link_PHYITConfig+0x36>
    /* Return ERROR in case of write timeout */
    return ETH_ERROR;
  }

  /* Read MISR register */
  tmpreg = ETH_ReadPHYRegister(PHYAddress, PHY_MISR);
 800697a:	2112      	movs	r1, #18
 800697c:	4620      	mov	r0, r4
 800697e:	f7fe fee5 	bl	800574c <ETH_ReadPHYRegister>

  /* Enable Interrupt on change of link status */
  tmpreg |= (uint16_t)PHY_MISR_LINK_INT_EN;
  if(!(ETH_WritePHYRegister(PHYAddress, PHY_MISR, tmpreg)))
 8006982:	f040 0220 	orr.w	r2, r0, #32
 8006986:	b292      	uxth	r2, r2
 8006988:	2112      	movs	r1, #18
 800698a:	4620      	mov	r0, r4
 800698c:	f7fe ff0a 	bl	80057a4 <ETH_WritePHYRegister>
  /* Enable output interrupt events to signal via the INT pin */
  tmpreg |= (uint16_t)(PHY_MICR_INT_EN | PHY_MICR_INT_OE);
  if(!(ETH_WritePHYRegister(PHYAddress, PHY_MICR, tmpreg)))
  {
    /* Return ERROR in case of write timeout */
    return ETH_ERROR;
 8006990:	3000      	adds	r0, #0
 8006992:	bf18      	it	ne
 8006994:	2001      	movne	r0, #1
    /* Return ERROR in case of write timeout */
    return ETH_ERROR;
  }
  /* Return SUCCESS */
  return ETH_SUCCESS;   
}
 8006996:	bd10      	pop	{r4, pc}

08006998 <Eth_Link_EXTIConfig>:
  * @brief  EXTI configuration for Ethernet link status.
  * @param PHYAddress: external PHY address  
  * @retval None
  */
void Eth_Link_EXTIConfig(void)
{
 8006998:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the INT (PB14) Clock */
  RCC_AHB1PeriphClockCmd(ETH_LINK_GPIO_CLK, ENABLE);
 800699a:	2101      	movs	r1, #1
  * @brief  EXTI configuration for Ethernet link status.
  * @param PHYAddress: external PHY address  
  * @retval None
  */
void Eth_Link_EXTIConfig(void)
{
 800699c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the INT (PB14) Clock */
  RCC_AHB1PeriphClockCmd(ETH_LINK_GPIO_CLK, ENABLE);
 800699e:	2002      	movs	r0, #2
 80069a0:	f7ff fa26 	bl	8005df0 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80069a4:	2101      	movs	r1, #1
 80069a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80069aa:	f7ff fa39 	bl	8005e20 <RCC_APB2PeriphClockCmd>

  /* Configure INT pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = ETH_LINK_PIN;
 80069ae:	a906      	add	r1, sp, #24
 80069b0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  /* Enable the INT (PB14) Clock */
  RCC_AHB1PeriphClockCmd(ETH_LINK_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure INT pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80069b4:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Pin = ETH_LINK_PIN;
 80069b6:	f841 5d10 	str.w	r5, [r1, #-16]!
  GPIO_Init(ETH_LINK_GPIO_PORT, &GPIO_InitStructure);
 80069ba:	4811      	ldr	r0, [pc, #68]	; (8006a00 <Eth_Link_EXTIConfig+0x68>)
  /* Enable the INT (PB14) Clock */
  RCC_AHB1PeriphClockCmd(ETH_LINK_GPIO_CLK, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure INT pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80069bc:	f88d 400c 	strb.w	r4, [sp, #12]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80069c0:	f88d 400f 	strb.w	r4, [sp, #15]
  GPIO_InitStructure.GPIO_Pin = ETH_LINK_PIN;
  GPIO_Init(ETH_LINK_GPIO_PORT, &GPIO_InitStructure);
 80069c4:	f7ff f97c 	bl	8005cc0 <GPIO_Init>

  /* Connect EXTI Line to INT Pin */
  SYSCFG_EXTILineConfig(ETH_LINK_EXTI_PORT_SOURCE, ETH_LINK_EXTI_PIN_SOURCE);
 80069c8:	210e      	movs	r1, #14
 80069ca:	2001      	movs	r0, #1
 80069cc:	f7ff fa40 	bl	8005e50 <SYSCFG_EXTILineConfig>

  /* Configure EXTI line */
  EXTI_InitStructure.EXTI_Line = ETH_LINK_EXTI_LINE;
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80069d0:	f88d 4014 	strb.w	r4, [sp, #20]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 80069d4:	230c      	movs	r3, #12
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80069d6:	2401      	movs	r4, #1
  EXTI_Init(&EXTI_InitStructure);
 80069d8:	a804      	add	r0, sp, #16
  SYSCFG_EXTILineConfig(ETH_LINK_EXTI_PORT_SOURCE, ETH_LINK_EXTI_PIN_SOURCE);

  /* Configure EXTI line */
  EXTI_InitStructure.EXTI_Line = ETH_LINK_EXTI_LINE;
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 80069da:	f88d 3015 	strb.w	r3, [sp, #21]

  /* Connect EXTI Line to INT Pin */
  SYSCFG_EXTILineConfig(ETH_LINK_EXTI_PORT_SOURCE, ETH_LINK_EXTI_PIN_SOURCE);

  /* Configure EXTI line */
  EXTI_InitStructure.EXTI_Line = ETH_LINK_EXTI_LINE;
 80069de:	9504      	str	r5, [sp, #16]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80069e0:	f88d 4016 	strb.w	r4, [sp, #22]
  EXTI_Init(&EXTI_InitStructure);
 80069e4:	f7ff f8ba 	bl	8005b5c <EXTI_Init>

  /* Enable and set the EXTI interrupt to priority 1*/
  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 80069e8:	2328      	movs	r3, #40	; 0x28
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 80069ea:	a801      	add	r0, sp, #4
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);

  /* Enable and set the EXTI interrupt to priority 1*/
  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 80069ec:	f88d 3004 	strb.w	r3, [sp, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80069f0:	f88d 4005 	strb.w	r4, [sp, #5]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80069f4:	f88d 4007 	strb.w	r4, [sp, #7]
  NVIC_Init(&NVIC_InitStructure);
 80069f8:	f7ff f86c 	bl	8005ad4 <NVIC_Init>
}
 80069fc:	b007      	add	sp, #28
 80069fe:	bd30      	pop	{r4, r5, pc}
 8006a00:	40020400 	.word	0x40020400

08006a04 <ETH_BSP_Config>:
  * @brief  ETH_BSP_Config
  * @param  None
  * @retval None
  */
void ETH_BSP_Config(void)
{
 8006a04:	b570      	push	{r4, r5, r6, lr}
         must be configured before Ethernet initialization and, the interrupt 
         priority should be the highest one.
  *****************************************************************************/
  
  /* Configure Systick clock source as HCLK */
  SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8006a06:	2004      	movs	r0, #4
  * @brief  ETH_BSP_Config
  * @param  None
  * @retval None
  */
void ETH_BSP_Config(void)
{
 8006a08:	b086      	sub	sp, #24
         must be configured before Ethernet initialization and, the interrupt 
         priority should be the highest one.
  *****************************************************************************/
  
  /* Configure Systick clock source as HCLK */
  SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8006a0a:	f7ff f89b 	bl	8005b44 <SysTick_CLKSourceConfig>

  /* SystTick configuration: an interrupt every 10ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 8006a0e:	a802      	add	r0, sp, #8
 8006a10:	f7ff f9aa 	bl	8005d68 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
 8006a14:	2264      	movs	r2, #100	; 0x64
 8006a16:	9b03      	ldr	r3, [sp, #12]
 8006a18:	fbb3 f3f2 	udiv	r3, r3, r2
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8006a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a20:	d20a      	bcs.n	8006a38 <ETH_BSP_Config+0x34>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8006a22:	4a85      	ldr	r2, [pc, #532]	; (8006c38 <ETH_BSP_Config+0x234>)
 8006a24:	3b01      	subs	r3, #1
 8006a26:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006a28:	4b84      	ldr	r3, [pc, #528]	; (8006c3c <ETH_BSP_Config+0x238>)
 8006a2a:	21f0      	movs	r1, #240	; 0xf0
 8006a2c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8006a30:	2300      	movs	r3, #0
 8006a32:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a34:	2307      	movs	r3, #7
 8006a36:	6013      	str	r3, [r2, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006a38:	4b80      	ldr	r3, [pc, #512]	; (8006c3c <ETH_BSP_Config+0x238>)
 8006a3a:	2600      	movs	r6, #0
 8006a3c:	f883 6023 	strb.w	r6, [r3, #35]	; 0x23
void ETH_GPIO_Config(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB |
 8006a40:	2101      	movs	r1, #1
 8006a42:	f240 10e7 	movw	r0, #487	; 0x1e7
 8006a46:	f7ff f9d3 	bl	8005df0 <RCC_AHB1PeriphClockCmd>
                         RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOI |
                         RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOH |
                         RCC_AHB1Periph_GPIOF, ENABLE);

  /* Enable SYSCFG clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006a50:	f7ff f9e6 	bl	8005e20 <RCC_APB2PeriphClockCmd>

  /* Configure MCO (PA8) */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006a54:	2402      	movs	r4, #2

  /* Enable SYSCFG clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure MCO (PA8) */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8006a56:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8006a5a:	2503      	movs	r5, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006a5c:	4669      	mov	r1, sp
 8006a5e:	4878      	ldr	r0, [pc, #480]	; (8006c40 <ETH_BSP_Config+0x23c>)

  /* Enable SYSCFG clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure MCO (PA8) */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8006a60:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8006a62:	f88d 5005 	strb.w	r5, [sp, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8006a66:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006a6a:	f88d 6006 	strb.w	r6, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8006a6e:	f88d 6007 	strb.w	r6, [sp, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006a72:	f7ff f925 	bl	8005cc0 <GPIO_Init>
 #endif /* PHY_CLOCK_MCO */

  SYSCFG_ETH_MediaInterfaceConfig(SYSCFG_ETH_MediaInterface_MII);
#elif defined RMII_MODE  /* Mode RMII with STM324xx-EVAL */

  SYSCFG_ETH_MediaInterfaceConfig(SYSCFG_ETH_MediaInterface_RMII);
 8006a76:	2001      	movs	r0, #1
 8006a78:	f7ff fa00 	bl	8005e7c <SYSCFG_ETH_MediaInterfaceConfig>
        ETH_MII_TXD0/ETH_RMII_TXD0 -------> PG13
        ETH_MII_TXD1/ETH_RMII_TXD1 -------> PG14
                                                  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_7;
 8006a7c:	2386      	movs	r3, #134	; 0x86
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006a7e:	4669      	mov	r1, sp
 8006a80:	486f      	ldr	r0, [pc, #444]	; (8006c40 <ETH_BSP_Config+0x23c>)
        ETH_MII_TXD0/ETH_RMII_TXD0 -------> PG13
        ETH_MII_TXD1/ETH_RMII_TXD1 -------> PG14
                                                  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_7;
 8006a82:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8006a84:	f7ff f91c 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_ETH);
 8006a88:	220b      	movs	r2, #11
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	486c      	ldr	r0, [pc, #432]	; (8006c40 <ETH_BSP_Config+0x23c>)
 8006a8e:	f7ff f959 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_ETH);
 8006a92:	220b      	movs	r2, #11
 8006a94:	4621      	mov	r1, r4
 8006a96:	486a      	ldr	r0, [pc, #424]	; (8006c40 <ETH_BSP_Config+0x23c>)
 8006a98:	f7ff f954 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_ETH);
 8006a9c:	220b      	movs	r2, #11
 8006a9e:	2107      	movs	r1, #7
 8006aa0:	4867      	ldr	r0, [pc, #412]	; (8006c40 <ETH_BSP_Config+0x23c>)
 8006aa2:	f7ff f94f 	bl	8005d44 <GPIO_PinAFConfig>

  /* Configure PB5 and PB8 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_8;
 8006aa6:	f44f 7390 	mov.w	r3, #288	; 0x120
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8006aaa:	4669      	mov	r1, sp
 8006aac:	4865      	ldr	r0, [pc, #404]	; (8006c44 <ETH_BSP_Config+0x240>)
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_ETH);

  /* Configure PB5 and PB8 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_8;
 8006aae:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8006ab0:	f7ff f906 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_ETH);
 8006ab4:	220b      	movs	r2, #11
 8006ab6:	2105      	movs	r1, #5
 8006ab8:	4862      	ldr	r0, [pc, #392]	; (8006c44 <ETH_BSP_Config+0x240>)
 8006aba:	f7ff f943 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_ETH);
 8006abe:	220b      	movs	r2, #11
 8006ac0:	2108      	movs	r1, #8
 8006ac2:	4860      	ldr	r0, [pc, #384]	; (8006c44 <ETH_BSP_Config+0x240>)
 8006ac4:	f7ff f93e 	bl	8005d44 <GPIO_PinAFConfig>

  /* Configure PC1, PC2, PC3, PC4 and PC5 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8006ac8:	233e      	movs	r3, #62	; 0x3e
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8006aca:	4669      	mov	r1, sp
 8006acc:	485e      	ldr	r0, [pc, #376]	; (8006c48 <ETH_BSP_Config+0x244>)
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_ETH);

  /* Configure PC1, PC2, PC3, PC4 and PC5 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 8006ace:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8006ad0:	f7ff f8f6 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource1, GPIO_AF_ETH);
 8006ad4:	220b      	movs	r2, #11
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	485b      	ldr	r0, [pc, #364]	; (8006c48 <ETH_BSP_Config+0x244>)
 8006ada:	f7ff f933 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource2, GPIO_AF_ETH);
 8006ade:	220b      	movs	r2, #11
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	4859      	ldr	r0, [pc, #356]	; (8006c48 <ETH_BSP_Config+0x244>)
 8006ae4:	f7ff f92e 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource3, GPIO_AF_ETH);
 8006ae8:	220b      	movs	r2, #11
 8006aea:	4629      	mov	r1, r5
 8006aec:	4856      	ldr	r0, [pc, #344]	; (8006c48 <ETH_BSP_Config+0x244>)
 8006aee:	f7ff f929 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource4, GPIO_AF_ETH);
 8006af2:	220b      	movs	r2, #11
 8006af4:	2104      	movs	r1, #4
 8006af6:	4854      	ldr	r0, [pc, #336]	; (8006c48 <ETH_BSP_Config+0x244>)
 8006af8:	f7ff f924 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource5, GPIO_AF_ETH);
 8006afc:	220b      	movs	r2, #11
 8006afe:	2105      	movs	r1, #5
 8006b00:	4851      	ldr	r0, [pc, #324]	; (8006c48 <ETH_BSP_Config+0x244>)
 8006b02:	f7ff f91f 	bl	8005d44 <GPIO_PinAFConfig>

  /* Configure PG11, PG14 and PG13 */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_12;
 8006b06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8006b0a:	4669      	mov	r1, sp
 8006b0c:	484f      	ldr	r0, [pc, #316]	; (8006c4c <ETH_BSP_Config+0x248>)
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource3, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource4, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource5, GPIO_AF_ETH);

  /* Configure PG11, PG14 and PG13 */
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_12;
 8006b0e:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8006b10:	f7ff f8d6 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_ETH);
 8006b14:	220b      	movs	r2, #11
 8006b16:	4611      	mov	r1, r2
 8006b18:	484a      	ldr	r0, [pc, #296]	; (8006c44 <ETH_BSP_Config+0x240>)
 8006b1a:	f7ff f913 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_ETH);
 8006b1e:	220b      	movs	r2, #11
 8006b20:	210d      	movs	r1, #13
 8006b22:	4848      	ldr	r0, [pc, #288]	; (8006c44 <ETH_BSP_Config+0x240>)
 8006b24:	f7ff f90e 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource12, GPIO_AF_ETH);
 8006b28:	220b      	movs	r2, #11
 8006b2a:	210c      	movs	r1, #12
 8006b2c:	4845      	ldr	r0, [pc, #276]	; (8006c44 <ETH_BSP_Config+0x240>)
 8006b2e:	f7ff f909 	bl	8005d44 <GPIO_PinAFConfig>

  /* Configure PH2, PH3, PH6, PH7 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 | GPIO_Pin_7;
 8006b32:	23cc      	movs	r3, #204	; 0xcc
  GPIO_Init(GPIOH, &GPIO_InitStructure);
 8006b34:	4669      	mov	r1, sp
 8006b36:	4846      	ldr	r0, [pc, #280]	; (8006c50 <ETH_BSP_Config+0x24c>)
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource12, GPIO_AF_ETH);

  /* Configure PH2, PH3, PH6, PH7 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 | GPIO_Pin_7;
 8006b38:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOH, &GPIO_InitStructure);
 8006b3a:	f7ff f8c1 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOH, GPIO_PinSource2, GPIO_AF_ETH);
 8006b3e:	220b      	movs	r2, #11
 8006b40:	4621      	mov	r1, r4
 8006b42:	4843      	ldr	r0, [pc, #268]	; (8006c50 <ETH_BSP_Config+0x24c>)
 8006b44:	f7ff f8fe 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOH, GPIO_PinSource3, GPIO_AF_ETH);
 8006b48:	220b      	movs	r2, #11
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4840      	ldr	r0, [pc, #256]	; (8006c50 <ETH_BSP_Config+0x24c>)
 8006b4e:	f7ff f8f9 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOH, GPIO_PinSource6, GPIO_AF_ETH);
 8006b52:	220b      	movs	r2, #11
 8006b54:	2106      	movs	r1, #6
 8006b56:	483e      	ldr	r0, [pc, #248]	; (8006c50 <ETH_BSP_Config+0x24c>)
 8006b58:	f7ff f8f4 	bl	8005d44 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOH, GPIO_PinSource7, GPIO_AF_ETH);
 8006b5c:	220b      	movs	r2, #11
 8006b5e:	2107      	movs	r1, #7
 8006b60:	483b      	ldr	r0, [pc, #236]	; (8006c50 <ETH_BSP_Config+0x24c>)
 8006b62:	f7ff f8ef 	bl	8005d44 <GPIO_PinAFConfig>

  /* Configure PI10 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8006b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_Init(GPIOI, &GPIO_InitStructure);
 8006b6a:	4669      	mov	r1, sp
 8006b6c:	4839      	ldr	r0, [pc, #228]	; (8006c54 <ETH_BSP_Config+0x250>)
  GPIO_PinAFConfig(GPIOH, GPIO_PinSource3, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOH, GPIO_PinSource6, GPIO_AF_ETH);
  GPIO_PinAFConfig(GPIOH, GPIO_PinSource7, GPIO_AF_ETH);

  /* Configure PI10 */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8006b6e:	9300      	str	r3, [sp, #0]
  GPIO_Init(GPIOI, &GPIO_InitStructure);
 8006b70:	f7ff f8a6 	bl	8005cc0 <GPIO_Init>
  GPIO_PinAFConfig(GPIOI, GPIO_PinSource10, GPIO_AF_ETH);
 8006b74:	220b      	movs	r2, #11
 8006b76:	210a      	movs	r1, #10
 8006b78:	4836      	ldr	r0, [pc, #216]	; (8006c54 <ETH_BSP_Config+0x250>)
 8006b7a:	f7ff f8e3 	bl	8005d44 <GPIO_PinAFConfig>
  * @retval None
  */
static void ETH_MACDMA_Config(void)
{  
  /* Enable ETHERNET clock  */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_ETH_MAC | RCC_AHB1Periph_ETH_MAC_Tx |
 8006b7e:	2101      	movs	r1, #1
 8006b80:	f04f 6060 	mov.w	r0, #234881024	; 0xe000000
 8006b84:	f7ff f934 	bl	8005df0 <RCC_AHB1PeriphClockCmd>
                        RCC_AHB1Periph_ETH_MAC_Rx, ENABLE);

  /* Reset ETHERNET on AHB Bus */
  ETH_DeInit();
 8006b88:	f7fe fbc6 	bl	8005318 <ETH_DeInit>

  /* Software reset */
  ETH_SoftwareReset();
 8006b8c:	f7fe fd72 	bl	8005674 <ETH_SoftwareReset>

  /* Wait for software reset */
  while (ETH_GetSoftwareResetStatus() == SET);
 8006b90:	f7fe fd78 	bl	8005684 <ETH_GetSoftwareResetStatus>
 8006b94:	2801      	cmp	r0, #1
 8006b96:	d0fb      	beq.n	8006b90 <ETH_BSP_Config+0x18c>

  /* ETHERNET Configuration --------------------------------------------------*/
  /* Call ETH_StructInit if you don't like to configure all ETH_InitStructure parameter */
  ETH_StructInit(&ETH_InitStructure);
 8006b98:	4c2f      	ldr	r4, [pc, #188]	; (8006c58 <ETH_BSP_Config+0x254>)
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7fe fbc9 	bl	8005332 <ETH_StructInit>
  ETH_InitStructure.ETH_AutoNegotiation = ETH_AutoNegotiation_Enable;
//  ETH_InitStructure.ETH_AutoNegotiation = ETH_AutoNegotiation_Disable;
//  ETH_InitStructure.ETH_Speed = ETH_Speed_10M;
//  ETH_InitStructure.ETH_Mode = ETH_Mode_FullDuplex;

  ETH_InitStructure.ETH_LoopbackMode = ETH_LoopbackMode_Disable;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61e3      	str	r3, [r4, #28]
  ETH_InitStructure.ETH_RetryTransmission = ETH_RetryTransmission_Disable;
  ETH_InitStructure.ETH_AutomaticPadCRCStrip = ETH_AutomaticPadCRCStrip_Disable;
 8006ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
  ETH_InitStructure.ETH_ReceiveAll = ETH_ReceiveAll_Disable;
 8006ba6:	63a3      	str	r3, [r4, #56]	; 0x38
  ETH_InitStructure.ETH_BroadcastFramesReception = ETH_BroadcastFramesReception_Enable;
 8006ba8:	6463      	str	r3, [r4, #68]	; 0x44
  ETH_InitStructure.ETH_PromiscuousMode = ETH_PromiscuousMode_Disable;
 8006baa:	64e3      	str	r3, [r4, #76]	; 0x4c
  ETH_InitStructure.ETH_MulticastFramesFilter = ETH_MulticastFramesFilter_Perfect;
 8006bac:	6523      	str	r3, [r4, #80]	; 0x50
  ETH_InitStructure.ETH_UnicastFramesFilter = ETH_UnicastFramesFilter_Perfect;
 8006bae:	6563      	str	r3, [r4, #84]	; 0x54
  /*------------------------   DMA   -----------------------------------*/  
  
  /* When we use the Checksum offload feature, we need to enable the Store and Forward mode: 
  the store and forward guarantee that a whole frame is stored in the FIFO, so the MAC can insert/verify the checksum, 
  if the checksum is OK the DMA can handle the frame otherwise the frame is dropped */
  ETH_InitStructure.ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Enable;
 8006bb0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  ETH_InitStructure.ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
  ETH_InitStructure.ETH_TransmitStoreForward = ETH_TransmitStoreForward_Enable;

  ETH_InitStructure.ETH_ForwardErrorFrames = ETH_ForwardErrorFrames_Disable;
 8006bb4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  ETH_InitStructure.ETH_ForwardUndersizedGoodFrames = ETH_ForwardUndersizedGoodFrames_Disable;
 8006bb8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  ETH_InitStructure.ETH_FixedBurst = ETH_FixedBurst_Enable;
 8006bc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bc6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
//  ETH_InitStructure.ETH_AutoNegotiation = ETH_AutoNegotiation_Disable;
//  ETH_InitStructure.ETH_Speed = ETH_Speed_10M;
//  ETH_InitStructure.ETH_Mode = ETH_Mode_FullDuplex;

  ETH_InitStructure.ETH_LoopbackMode = ETH_LoopbackMode_Disable;
  ETH_InitStructure.ETH_RetryTransmission = ETH_RetryTransmission_Disable;
 8006bca:	f44f 7200 	mov.w	r2, #512	; 0x200
  ETH_InitStructure.ETH_ForwardErrorFrames = ETH_ForwardErrorFrames_Disable;
  ETH_InitStructure.ETH_ForwardUndersizedGoodFrames = ETH_ForwardUndersizedGoodFrames_Disable;
  ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
  ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  ETH_InitStructure.ETH_FixedBurst = ETH_FixedBurst_Enable;
  ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
 8006bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  /* Call ETH_StructInit if you don't like to configure all ETH_InitStructure parameter */
  ETH_StructInit(&ETH_InitStructure);

  /* Fill ETH_InitStructure parametrs */
  /*------------------------   MAC   -----------------------------------*/
  ETH_InitStructure.ETH_AutoNegotiation = ETH_AutoNegotiation_Enable;
 8006bd2:	2501      	movs	r5, #1
//  ETH_InitStructure.ETH_AutoNegotiation = ETH_AutoNegotiation_Disable;
//  ETH_InitStructure.ETH_Speed = ETH_Speed_10M;
//  ETH_InitStructure.ETH_Mode = ETH_Mode_FullDuplex;

  ETH_InitStructure.ETH_LoopbackMode = ETH_LoopbackMode_Disable;
  ETH_InitStructure.ETH_RetryTransmission = ETH_RetryTransmission_Disable;
 8006bd4:	62a2      	str	r2, [r4, #40]	; 0x28
  ETH_InitStructure.ETH_ForwardErrorFrames = ETH_ForwardErrorFrames_Disable;
  ETH_InitStructure.ETH_ForwardUndersizedGoodFrames = ETH_ForwardUndersizedGoodFrames_Disable;
  ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
  ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  ETH_InitStructure.ETH_FixedBurst = ETH_FixedBurst_Enable;
  ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
 8006bd6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
  ETH_InitStructure.ETH_BroadcastFramesReception = ETH_BroadcastFramesReception_Enable;
  ETH_InitStructure.ETH_PromiscuousMode = ETH_PromiscuousMode_Disable;
  ETH_InitStructure.ETH_MulticastFramesFilter = ETH_MulticastFramesFilter_Perfect;
  ETH_InitStructure.ETH_UnicastFramesFilter = ETH_UnicastFramesFilter_Perfect;
#ifdef CHECKSUM_BY_HARDWARE
  ETH_InitStructure.ETH_ChecksumOffload = ETH_ChecksumOffload_Enable;
 8006bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
  /* When we use the Checksum offload feature, we need to enable the Store and Forward mode: 
  the store and forward guarantee that a whole frame is stored in the FIFO, so the MAC can insert/verify the checksum, 
  if the checksum is OK the DMA can handle the frame otherwise the frame is dropped */
  ETH_InitStructure.ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Enable;
  ETH_InitStructure.ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
  ETH_InitStructure.ETH_TransmitStoreForward = ETH_TransmitStoreForward_Enable;
 8006bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  ETH_InitStructure.ETH_ForwardUndersizedGoodFrames = ETH_ForwardUndersizedGoodFrames_Disable;
  ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
  ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  ETH_InitStructure.ETH_FixedBurst = ETH_FixedBurst_Enable;
  ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
 8006be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  ETH_InitStructure.ETH_BroadcastFramesReception = ETH_BroadcastFramesReception_Enable;
  ETH_InitStructure.ETH_PromiscuousMode = ETH_PromiscuousMode_Disable;
  ETH_InitStructure.ETH_MulticastFramesFilter = ETH_MulticastFramesFilter_Perfect;
  ETH_InitStructure.ETH_UnicastFramesFilter = ETH_UnicastFramesFilter_Perfect;
#ifdef CHECKSUM_BY_HARDWARE
  ETH_InitStructure.ETH_ChecksumOffload = ETH_ChecksumOffload_Enable;
 8006be6:	6262      	str	r2, [r4, #36]	; 0x24
  /* When we use the Checksum offload feature, we need to enable the Store and Forward mode: 
  the store and forward guarantee that a whole frame is stored in the FIFO, so the MAC can insert/verify the checksum, 
  if the checksum is OK the DMA can handle the frame otherwise the frame is dropped */
  ETH_InitStructure.ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Enable;
  ETH_InitStructure.ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
  ETH_InitStructure.ETH_TransmitStoreForward = ETH_TransmitStoreForward_Enable;
 8006be8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  
  /* When we use the Checksum offload feature, we need to enable the Store and Forward mode: 
  the store and forward guarantee that a whole frame is stored in the FIFO, so the MAC can insert/verify the checksum, 
  if the checksum is OK the DMA can handle the frame otherwise the frame is dropped */
  ETH_InitStructure.ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Enable;
  ETH_InitStructure.ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
 8006bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  ETH_InitStructure.ETH_ForwardUndersizedGoodFrames = ETH_ForwardUndersizedGoodFrames_Disable;
  ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
  ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  ETH_InitStructure.ETH_FixedBurst = ETH_FixedBurst_Enable;
  ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
 8006bf0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  ETH_InitStructure.ETH_DMAArbitration = ETH_DMAArbitration_RoundRobin_RxTx_2_1;

  /* Configure Ethernet */
  EthStatus = ETH_Init(&ETH_InitStructure, DP83848_PHY_ADDRESS);
 8006bf4:	4629      	mov	r1, r5
  ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
  ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  ETH_InitStructure.ETH_FixedBurst = ETH_FixedBurst_Enable;
  ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_DMAArbitration = ETH_DMAArbitration_RoundRobin_RxTx_2_1;
 8006bf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000

  /* Configure Ethernet */
  EthStatus = ETH_Init(&ETH_InitStructure, DP83848_PHY_ADDRESS);
 8006bfa:	4620      	mov	r0, r4
  ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
  ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
  ETH_InitStructure.ETH_FixedBurst = ETH_FixedBurst_Enable;
  ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_DMAArbitration = ETH_DMAArbitration_RoundRobin_RxTx_2_1;
 8006bfc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  
  /* When we use the Checksum offload feature, we need to enable the Store and Forward mode: 
  the store and forward guarantee that a whole frame is stored in the FIFO, so the MAC can insert/verify the checksum, 
  if the checksum is OK the DMA can handle the frame otherwise the frame is dropped */
  ETH_InitStructure.ETH_DropTCPIPChecksumErrorFrame = ETH_DropTCPIPChecksumErrorFrame_Enable;
  ETH_InitStructure.ETH_ReceiveStoreForward = ETH_ReceiveStoreForward_Enable;
 8006c00:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  ETH_InitStructure.ETH_TransmitStoreForward = ETH_TransmitStoreForward_Enable;

  ETH_InitStructure.ETH_ForwardErrorFrames = ETH_ForwardErrorFrames_Disable;
  ETH_InitStructure.ETH_ForwardUndersizedGoodFrames = ETH_ForwardUndersizedGoodFrames_Disable;
  ETH_InitStructure.ETH_SecondFrameOperate = ETH_SecondFrameOperate_Enable;
  ETH_InitStructure.ETH_AddressAlignedBeats = ETH_AddressAlignedBeats_Enable;
 8006c04:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
  /* Call ETH_StructInit if you don't like to configure all ETH_InitStructure parameter */
  ETH_StructInit(&ETH_InitStructure);

  /* Fill ETH_InitStructure parametrs */
  /*------------------------   MAC   -----------------------------------*/
  ETH_InitStructure.ETH_AutoNegotiation = ETH_AutoNegotiation_Enable;
 8006c08:	6025      	str	r5, [r4, #0]
  ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_DMAArbitration = ETH_DMAArbitration_RoundRobin_RxTx_2_1;

  /* Configure Ethernet */
  EthStatus = ETH_Init(&ETH_InitStructure, DP83848_PHY_ADDRESS);
 8006c0a:	f7fe fdf5 	bl	80057f8 <ETH_Init>
 8006c0e:	4c13      	ldr	r4, [pc, #76]	; (8006c5c <ETH_BSP_Config+0x258>)
  
  /* Configure the Ethernet MAC/DMA */
  ETH_MACDMA_Config();

  /* Get Ethernet link status*/
  if(ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_SR) & 1)
 8006c10:	2110      	movs	r1, #16
  ETH_InitStructure.ETH_RxDMABurstLength = ETH_RxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_TxDMABurstLength = ETH_TxDMABurstLength_32Beat;
  ETH_InitStructure.ETH_DMAArbitration = ETH_DMAArbitration_RoundRobin_RxTx_2_1;

  /* Configure Ethernet */
  EthStatus = ETH_Init(&ETH_InitStructure, DP83848_PHY_ADDRESS);
 8006c12:	6020      	str	r0, [r4, #0]
  
  /* Configure the Ethernet MAC/DMA */
  ETH_MACDMA_Config();

  /* Get Ethernet link status*/
  if(ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_SR) & 1)
 8006c14:	4628      	mov	r0, r5
 8006c16:	f7fe fd99 	bl	800574c <ETH_ReadPHYRegister>
 8006c1a:	07c3      	lsls	r3, r0, #31
  {
    EthStatus |= ETH_LINK_FLAG;
 8006c1c:	bf48      	it	mi
 8006c1e:	6823      	ldrmi	r3, [r4, #0]
  }

  /* Configure the PHY to generate an interrupt on change of link status */
  Eth_Link_PHYITConfig(DP83848_PHY_ADDRESS);
 8006c20:	f04f 0001 	mov.w	r0, #1
  ETH_MACDMA_Config();

  /* Get Ethernet link status*/
  if(ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_SR) & 1)
  {
    EthStatus |= ETH_LINK_FLAG;
 8006c24:	bf44      	itt	mi
 8006c26:	f043 0310 	orrmi.w	r3, r3, #16
 8006c2a:	6023      	strmi	r3, [r4, #0]
  }

  /* Configure the PHY to generate an interrupt on change of link status */
  Eth_Link_PHYITConfig(DP83848_PHY_ADDRESS);
 8006c2c:	f7ff fe98 	bl	8006960 <Eth_Link_PHYITConfig>

  /* Configure the EXTI for Ethernet link status. */
  Eth_Link_EXTIConfig(); 
 8006c30:	f7ff feb2 	bl	8006998 <Eth_Link_EXTIConfig>
}
 8006c34:	b006      	add	sp, #24
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	e000e010 	.word	0xe000e010
 8006c3c:	e000ed00 	.word	0xe000ed00
 8006c40:	40020000 	.word	0x40020000
 8006c44:	40020400 	.word	0x40020400
 8006c48:	40020800 	.word	0x40020800
 8006c4c:	40021800 	.word	0x40021800
 8006c50:	40021c00 	.word	0x40021c00
 8006c54:	40022000 	.word	0x40022000
 8006c58:	2000853c 	.word	0x2000853c
 8006c5c:	20002bb8 	.word	0x20002bb8

08006c60 <Eth_Link_ITHandler>:
  * @brief  This function handles Ethernet link status.
  * @param  None
  * @retval None
  */
void Eth_Link_ITHandler(uint16_t PHYAddress)
{
 8006c60:	b510      	push	{r4, lr}
  /* Check whether the link interrupt has occurred or not */
  if(((ETH_ReadPHYRegister(PHYAddress, PHY_MISR)) & PHY_LINK_STATUS) != 0)
 8006c62:	2112      	movs	r1, #18
  * @brief  This function handles Ethernet link status.
  * @param  None
  * @retval None
  */
void Eth_Link_ITHandler(uint16_t PHYAddress)
{
 8006c64:	4604      	mov	r4, r0
  /* Check whether the link interrupt has occurred or not */
  if(((ETH_ReadPHYRegister(PHYAddress, PHY_MISR)) & PHY_LINK_STATUS) != 0)
 8006c66:	f7fe fd71 	bl	800574c <ETH_ReadPHYRegister>
 8006c6a:	0483      	lsls	r3, r0, #18
 8006c6c:	d50f      	bpl.n	8006c8e <Eth_Link_ITHandler+0x2e>
  {
    if((ETH_ReadPHYRegister(PHYAddress, PHY_SR) & 1))
 8006c6e:	2110      	movs	r1, #16
 8006c70:	4620      	mov	r0, r4
 8006c72:	f7fe fd6b 	bl	800574c <ETH_ReadPHYRegister>
 8006c76:	f010 0f01 	tst.w	r0, #1
    {
      netif_set_link_up(&gnetif);
 8006c7a:	4805      	ldr	r0, [pc, #20]	; (8006c90 <Eth_Link_ITHandler+0x30>)
void Eth_Link_ITHandler(uint16_t PHYAddress)
{
  /* Check whether the link interrupt has occurred or not */
  if(((ETH_ReadPHYRegister(PHYAddress, PHY_MISR)) & PHY_LINK_STATUS) != 0)
  {
    if((ETH_ReadPHYRegister(PHYAddress, PHY_SR) & 1))
 8006c7c:	d003      	beq.n	8006c86 <Eth_Link_ITHandler+0x26>
    else
    {
      netif_set_link_down(&gnetif);
    }
  }
}
 8006c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Check whether the link interrupt has occurred or not */
  if(((ETH_ReadPHYRegister(PHYAddress, PHY_MISR)) & PHY_LINK_STATUS) != 0)
  {
    if((ETH_ReadPHYRegister(PHYAddress, PHY_SR) & 1))
    {
      netif_set_link_up(&gnetif);
 8006c82:	f7fb baef 	b.w	8002264 <netif_set_link_up>
    else
    {
      netif_set_link_down(&gnetif);
    }
  }
}
 8006c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      netif_set_link_up(&gnetif);
    }
    else
    {
      netif_set_link_down(&gnetif);
 8006c8a:	f7fb bb0a 	b.w	80022a2 <netif_set_link_down>
 8006c8e:	bd10      	pop	{r4, pc}
 8006c90:	20008504 	.word	0x20008504

08006c94 <ETH_link_callback>:
  * @brief  Link callback function, this function is called on change of link status.
  * @param  The network interface
  * @retval None
  */
void ETH_link_callback(struct netif *netif)
{
 8006c94:	b530      	push	{r4, r5, lr}
 8006c96:	b08d      	sub	sp, #52	; 0x34
  __IO uint32_t timeout = 0;
 8006c98:	2500      	movs	r5, #0
  * @brief  Link callback function, this function is called on change of link status.
  * @param  The network interface
  * @retval None
  */
void ETH_link_callback(struct netif *netif)
{
 8006c9a:	4604      	mov	r4, r0
  __IO uint32_t timeout = 0;
 8006c9c:	9503      	str	r5, [sp, #12]
  uint8_t iptab[4] = {0};
  uint8_t iptxt[20];
#endif /* USE_DHCP */

  /* Clear LCD */
  LCD_ClearLine(Line4);
 8006c9e:	f7ff f94f 	bl	8005f40 <LCD_GetFont>
 8006ca2:	88c0      	ldrh	r0, [r0, #6]
 8006ca4:	0080      	lsls	r0, r0, #2
 8006ca6:	b280      	uxth	r0, r0
 8006ca8:	f7ff f9c4 	bl	8006034 <LCD_ClearLine>
  LCD_ClearLine(Line5);
 8006cac:	f7ff f948 	bl	8005f40 <LCD_GetFont>
 8006cb0:	88c0      	ldrh	r0, [r0, #6]
 8006cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cb6:	b280      	uxth	r0, r0
 8006cb8:	f7ff f9bc 	bl	8006034 <LCD_ClearLine>
  LCD_ClearLine(Line6);
 8006cbc:	f7ff f940 	bl	8005f40 <LCD_GetFont>
 8006cc0:	88c0      	ldrh	r0, [r0, #6]
 8006cc2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006cc6:	0040      	lsls	r0, r0, #1
 8006cc8:	b280      	uxth	r0, r0
 8006cca:	f7ff f9b3 	bl	8006034 <LCD_ClearLine>
  LCD_ClearLine(Line7);
 8006cce:	f7ff f937 	bl	8005f40 <LCD_GetFont>
 8006cd2:	88c0      	ldrh	r0, [r0, #6]
 8006cd4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8006cd8:	b280      	uxth	r0, r0
 8006cda:	f7ff f9ab 	bl	8006034 <LCD_ClearLine>
  LCD_ClearLine(Line8);
 8006cde:	f7ff f92f 	bl	8005f40 <LCD_GetFont>
 8006ce2:	88c0      	ldrh	r0, [r0, #6]
 8006ce4:	00c0      	lsls	r0, r0, #3
 8006ce6:	b280      	uxth	r0, r0
 8006ce8:	f7ff f9a4 	bl	8006034 <LCD_ClearLine>
  LCD_ClearLine(Line9);
 8006cec:	f7ff f928 	bl	8005f40 <LCD_GetFont>
 8006cf0:	88c0      	ldrh	r0, [r0, #6]
 8006cf2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006cf6:	b280      	uxth	r0, r0
 8006cf8:	f7ff f99c 	bl	8006034 <LCD_ClearLine>

  if(netif_is_link_up(netif))
 8006cfc:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006d00:	06dc      	lsls	r4, r3, #27
 8006d02:	f140 8092 	bpl.w	8006e2a <ETH_link_callback+0x196>
  {
    /* Restart the autonegotiation */
    if(ETH_InitStructure.ETH_AutoNegotiation != ETH_AutoNegotiation_Disable)
 8006d06:	4c5a      	ldr	r4, [pc, #360]	; (8006e70 <ETH_link_callback+0x1dc>)
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d032      	beq.n	8006d74 <ETH_link_callback+0xe0>
    {
      /* Reset Timeout counter */
      timeout = 0;

      /* Enable Auto-Negotiation */
      ETH_WritePHYRegister(DP83848_PHY_ADDRESS, PHY_BCR, PHY_AutoNegotiation);
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d14:	2001      	movs	r0, #1
  {
    /* Restart the autonegotiation */
    if(ETH_InitStructure.ETH_AutoNegotiation != ETH_AutoNegotiation_Disable)
    {
      /* Reset Timeout counter */
      timeout = 0;
 8006d16:	9503      	str	r5, [sp, #12]

      /* Enable Auto-Negotiation */
      ETH_WritePHYRegister(DP83848_PHY_ADDRESS, PHY_BCR, PHY_AutoNegotiation);
 8006d18:	f7fe fd44 	bl	80057a4 <ETH_WritePHYRegister>

      /* Wait until the auto-negotiation will be completed */
      do
      {
        timeout++;
      } while (!(ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
 8006d1c:	4d55      	ldr	r5, [pc, #340]	; (8006e74 <ETH_link_callback+0x1e0>)
      ETH_WritePHYRegister(DP83848_PHY_ADDRESS, PHY_BCR, PHY_AutoNegotiation);

      /* Wait until the auto-negotiation will be completed */
      do
      {
        timeout++;
 8006d1e:	9b03      	ldr	r3, [sp, #12]
      } while (!(ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
 8006d20:	2101      	movs	r1, #1
      ETH_WritePHYRegister(DP83848_PHY_ADDRESS, PHY_BCR, PHY_AutoNegotiation);

      /* Wait until the auto-negotiation will be completed */
      do
      {
        timeout++;
 8006d22:	3301      	adds	r3, #1
      } while (!(ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
 8006d24:	4608      	mov	r0, r1
      ETH_WritePHYRegister(DP83848_PHY_ADDRESS, PHY_BCR, PHY_AutoNegotiation);

      /* Wait until the auto-negotiation will be completed */
      do
      {
        timeout++;
 8006d26:	9303      	str	r3, [sp, #12]
      } while (!(ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));
 8006d28:	f7fe fd10 	bl	800574c <ETH_ReadPHYRegister>
 8006d2c:	0680      	lsls	r0, r0, #26
 8006d2e:	d402      	bmi.n	8006d36 <ETH_link_callback+0xa2>
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	42ab      	cmp	r3, r5
 8006d34:	d9f3      	bls.n	8006d1e <ETH_link_callback+0x8a>

      /* Reset Timeout counter */
      timeout = 0;
 8006d36:	2300      	movs	r3, #0

      /* Read the result of the auto-negotiation */
      RegValue = ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_SR);
 8006d38:	2110      	movs	r1, #16
 8006d3a:	2001      	movs	r0, #1
      {
        timeout++;
      } while (!(ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_BSR) & PHY_AutoNego_Complete) && (timeout < (uint32_t)PHY_READ_TO));

      /* Reset Timeout counter */
      timeout = 0;
 8006d3c:	9303      	str	r3, [sp, #12]

      /* Read the result of the auto-negotiation */
      RegValue = ETH_ReadPHYRegister(DP83848_PHY_ADDRESS, PHY_SR);
 8006d3e:	f7fe fd05 	bl	800574c <ETH_ReadPHYRegister>
    
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((RegValue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006d42:	f000 0304 	and.w	r3, r0, #4
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	b10b      	cbz	r3, 8006d4e <ETH_link_callback+0xba>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        ETH_InitStructure.ETH_Mode = ETH_Mode_FullDuplex;  
 8006d4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        ETH_InitStructure.ETH_Mode = ETH_Mode_HalfDuplex;
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(RegValue & PHY_SPEED_STATUS)
 8006d4e:	0781      	lsls	r1, r0, #30
        ETH_InitStructure.ETH_Mode = ETH_Mode_FullDuplex;  
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        ETH_InitStructure.ETH_Mode = ETH_Mode_HalfDuplex;
 8006d50:	6223      	str	r3, [r4, #32]
        ETH_InitStructure.ETH_Speed = ETH_Speed_100M;      
      }

      /*------------------------ ETHERNET MACCR Re-Configuration --------------------*/
      /* Get the ETHERNET MACCR value */  
      tmpreg = ETH->MACCR;
 8006d52:	4d49      	ldr	r5, [pc, #292]	; (8006e78 <ETH_link_callback+0x1e4>)
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(RegValue & PHY_SPEED_STATUS)
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        ETH_InitStructure.ETH_Speed = ETH_Speed_10M; 
 8006d54:	bf4c      	ite	mi
 8006d56:	2300      	movmi	r3, #0
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        ETH_InitStructure.ETH_Speed = ETH_Speed_100M;      
 8006d58:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8006d5c:	6163      	str	r3, [r4, #20]
 8006d5e:	6963      	ldr	r3, [r4, #20]
      }

      /*------------------------ ETHERNET MACCR Re-Configuration --------------------*/
      /* Get the ETHERNET MACCR value */  
      tmpreg = ETH->MACCR;
 8006d60:	682a      	ldr	r2, [r5, #0]
 8006d62:	431a      	orrs	r2, r3

      /* Set the FES bit according to ETH_Speed value */ 
      /* Set the DM bit according to ETH_Mode value */ 
      tmpreg |= (uint32_t)(ETH_InitStructure.ETH_Speed | ETH_InitStructure.ETH_Mode);
 8006d64:	6a23      	ldr	r3, [r4, #32]
 8006d66:	4313      	orrs	r3, r2

      /* Write to ETHERNET MACCR */
      ETH->MACCR = (uint32_t)tmpreg;
 8006d68:	602b      	str	r3, [r5, #0]

      _eth_delay_(ETH_REG_WRITE_DELAY);
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	f7ff fcd2 	bl	8006714 <Delay>
      tmpreg = ETH->MACCR;
 8006d70:	682b      	ldr	r3, [r5, #0]
      ETH->MACCR = tmpreg;
 8006d72:	602b      	str	r3, [r5, #0]
    }

    /* Restart MAC interface */
    ETH_Start();
 8006d74:	f7fe fca4 	bl	80056c0 <ETH_Start>
    ipaddr.addr = 0;
    netmask.addr = 0;
    gw.addr = 0;
    DHCP_state = DHCP_START;
#else
    IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8006d78:	4b40      	ldr	r3, [pc, #256]	; (8006e7c <ETH_link_callback+0x1e8>)
 8006d7a:	9304      	str	r3, [sp, #16]
    IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8006d7c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006d80:	9305      	str	r3, [sp, #20]
    IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8006d82:	ab0c      	add	r3, sp, #48	; 0x30
 8006d84:	4a3e      	ldr	r2, [pc, #248]	; (8006e80 <ETH_link_callback+0x1ec>)
 8006d86:	f843 2d18 	str.w	r2, [r3, #-24]!
#endif /* USE_DHCP */

    netif_set_addr(&gnetif, &ipaddr , &netmask, &gw);
 8006d8a:	a904      	add	r1, sp, #16
 8006d8c:	aa05      	add	r2, sp, #20
 8006d8e:	483d      	ldr	r0, [pc, #244]	; (8006e84 <ETH_link_callback+0x1f0>)
 8006d90:	f7fb fa0e 	bl	80021b0 <netif_set_addr>
    
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);    
 8006d94:	483b      	ldr	r0, [pc, #236]	; (8006e84 <ETH_link_callback+0x1f0>)
 8006d96:	f7fb fa47 	bl	8002228 <netif_set_up>

#ifdef USE_LCD
    /* Set the LCD Text Color */
    LCD_SetTextColor(Green);
 8006d9a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006d9e:	f7ff f8b7 	bl	8005f10 <LCD_SetTextColor>

    /* Display message on the LCD */
    LCD_DisplayStringLine(Line5, (uint8_t*)"  Network Cable is  ");
 8006da2:	f7ff f8cd 	bl	8005f40 <LCD_GetFont>
 8006da6:	88c0      	ldrh	r0, [r0, #6]
 8006da8:	4937      	ldr	r1, [pc, #220]	; (8006e88 <ETH_link_callback+0x1f4>)
 8006daa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006dae:	b280      	uxth	r0, r0
 8006db0:	f7ff f958 	bl	8006064 <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line6, (uint8_t*)"    now connected   ");
 8006db4:	f7ff f8c4 	bl	8005f40 <LCD_GetFont>
 8006db8:	88c0      	ldrh	r0, [r0, #6]
 8006dba:	4934      	ldr	r1, [pc, #208]	; (8006e8c <ETH_link_callback+0x1f8>)
 8006dbc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006dc0:	0040      	lsls	r0, r0, #1
 8006dc2:	b280      	uxth	r0, r0
 8006dc4:	f7ff f94e 	bl	8006064 <LCD_DisplayStringLine>

    /* Set the LCD Text Color */
    LCD_SetTextColor(White);
 8006dc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006dcc:	f7ff f8a0 	bl	8005f10 <LCD_SetTextColor>
    /* Display static IP address */
    iptab[0] = IP_ADDR3;
    iptab[1] = IP_ADDR2;
    iptab[2] = IP_ADDR1;
    iptab[3] = IP_ADDR0;
    sprintf((char*)iptxt, "  %d.%d.%d.%d", iptab[3], iptab[2], iptab[1], iptab[0]);
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006dd8:	492d      	ldr	r1, [pc, #180]	; (8006e90 <ETH_link_callback+0x1fc>)
 8006dda:	23a8      	movs	r3, #168	; 0xa8
 8006ddc:	22c0      	movs	r2, #192	; 0xc0
 8006dde:	a807      	add	r0, sp, #28
 8006de0:	f000 fa20 	bl	8007224 <sprintf>
    LCD_DisplayStringLine(Line8, (uint8_t*)"  Static IP address   ");
 8006de4:	f7ff f8ac 	bl	8005f40 <LCD_GetFont>
 8006de8:	88c0      	ldrh	r0, [r0, #6]
 8006dea:	492a      	ldr	r1, [pc, #168]	; (8006e94 <ETH_link_callback+0x200>)
 8006dec:	00c0      	lsls	r0, r0, #3
 8006dee:	b280      	uxth	r0, r0
 8006df0:	f7ff f938 	bl	8006064 <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line9, iptxt);
 8006df4:	f7ff f8a4 	bl	8005f40 <LCD_GetFont>
 8006df8:	88c0      	ldrh	r0, [r0, #6]
 8006dfa:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006dfe:	a907      	add	r1, sp, #28
 8006e00:	b280      	uxth	r0, r0
 8006e02:	f7ff f92f 	bl	8006064 <LCD_DisplayStringLine>

    /* Clear LCD */
    LCD_ClearLine(Line5);
 8006e06:	f7ff f89b 	bl	8005f40 <LCD_GetFont>
 8006e0a:	88c0      	ldrh	r0, [r0, #6]
 8006e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e10:	b280      	uxth	r0, r0
 8006e12:	f7ff f90f 	bl	8006034 <LCD_ClearLine>
    LCD_ClearLine(Line6);
 8006e16:	f7ff f893 	bl	8005f40 <LCD_GetFont>
 8006e1a:	88c0      	ldrh	r0, [r0, #6]
 8006e1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006e20:	0040      	lsls	r0, r0, #1
 8006e22:	b280      	uxth	r0, r0
 8006e24:	f7ff f906 	bl	8006034 <LCD_ClearLine>
 8006e28:	e01f      	b.n	8006e6a <ETH_link_callback+0x1d6>
  #endif /* USE_DHCP */
#endif /* USE_LCD */
  }
  else
  {
    ETH_Stop();
 8006e2a:	f7fe fc7d 	bl	8005728 <ETH_Stop>
    DHCP_state = DHCP_LINK_DOWN;
    dhcp_stop(netif);
#endif /* USE_DHCP */

    /*  When the netif link is down this function must be called.*/
    netif_set_down(&gnetif);
 8006e2e:	4815      	ldr	r0, [pc, #84]	; (8006e84 <ETH_link_callback+0x1f0>)
 8006e30:	f7fb fa0b 	bl	800224a <netif_set_down>
#ifdef USE_LCD
    /* Set the LCD Text Color */
    LCD_SetTextColor(Red);
 8006e34:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006e38:	f7ff f86a 	bl	8005f10 <LCD_SetTextColor>

    /* Display message on the LCD */
    LCD_DisplayStringLine(Line5, (uint8_t*)"  Network Cable is  ");
 8006e3c:	f7ff f880 	bl	8005f40 <LCD_GetFont>
 8006e40:	88c0      	ldrh	r0, [r0, #6]
 8006e42:	4911      	ldr	r1, [pc, #68]	; (8006e88 <ETH_link_callback+0x1f4>)
 8006e44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e48:	b280      	uxth	r0, r0
 8006e4a:	f7ff f90b 	bl	8006064 <LCD_DisplayStringLine>
    LCD_DisplayStringLine(Line6, (uint8_t*)"     unplugged   ");
 8006e4e:	f7ff f877 	bl	8005f40 <LCD_GetFont>
 8006e52:	88c0      	ldrh	r0, [r0, #6]
 8006e54:	4910      	ldr	r1, [pc, #64]	; (8006e98 <ETH_link_callback+0x204>)
 8006e56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006e5a:	0040      	lsls	r0, r0, #1
 8006e5c:	b280      	uxth	r0, r0
 8006e5e:	f7ff f901 	bl	8006064 <LCD_DisplayStringLine>

    /* Set the LCD Text Color */
    LCD_SetTextColor(White);
 8006e62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006e66:	f7ff f853 	bl	8005f10 <LCD_SetTextColor>
#endif /* USE_LCD */
  }
}
 8006e6a:	b00d      	add	sp, #52	; 0x34
 8006e6c:	bd30      	pop	{r4, r5, pc}
 8006e6e:	bf00      	nop
 8006e70:	2000853c 	.word	0x2000853c
 8006e74:	0004fffe 	.word	0x0004fffe
 8006e78:	40028000 	.word	0x40028000
 8006e7c:	0a00a8c0 	.word	0x0a00a8c0
 8006e80:	0100a8c0 	.word	0x0100a8c0
 8006e84:	20008504 	.word	0x20008504
 8006e88:	0800bb8e 	.word	0x0800bb8e
 8006e8c:	0800bbb8 	.word	0x0800bbb8
 8006e90:	0800bb69 	.word	0x0800bb69
 8006e94:	0800bb77 	.word	0x0800bb77
 8006e98:	0800bbcd 	.word	0x0800bbcd

08006e9c <NMI_Handler>:
 8006e9c:	4770      	bx	lr

08006e9e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006e9e:	e7fe      	b.n	8006e9e <HardFault_Handler>

08006ea0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006ea0:	e7fe      	b.n	8006ea0 <MemManage_Handler>

08006ea2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006ea2:	e7fe      	b.n	8006ea2 <BusFault_Handler>

08006ea4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006ea4:	e7fe      	b.n	8006ea4 <UsageFault_Handler>

08006ea6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006ea6:	4770      	bx	lr

08006ea8 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
  /* Update the LocalTime by adding SYSTEMTICK_PERIOD_MS each SysTick interrupt */
  Time_Update();
 8006ea8:	f7ff bc42 	b.w	8006730 <Time_Update>

08006eac <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8006eac:	b508      	push	{r3, lr}
  if(EXTI_GetITStatus(ETH_LINK_EXTI_LINE) != RESET)
 8006eae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006eb2:	f7fe fe8d 	bl	8005bd0 <EXTI_GetITStatus>
 8006eb6:	b140      	cbz	r0, 8006eca <EXTI15_10_IRQHandler+0x1e>
  {
    Eth_Link_ITHandler(DP83848_PHY_ADDRESS);
 8006eb8:	2001      	movs	r0, #1
 8006eba:	f7ff fed1 	bl	8006c60 <Eth_Link_ITHandler>
    /* Clear interrupt pending bit */
    EXTI_ClearITPendingBit(ETH_LINK_EXTI_LINE);
 8006ebe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  }
}
 8006ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  if(EXTI_GetITStatus(ETH_LINK_EXTI_LINE) != RESET)
  {
    Eth_Link_ITHandler(DP83848_PHY_ADDRESS);
    /* Clear interrupt pending bit */
    EXTI_ClearITPendingBit(ETH_LINK_EXTI_LINE);
 8006ec6:	f7fe be91 	b.w	8005bec <EXTI_ClearITPendingBit>
 8006eca:	bd08      	pop	{r3, pc}

08006ecc <tcp_echoserver_error>:
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
  if (es != NULL)
 8006ecc:	b108      	cbz	r0, 8006ed2 <tcp_echoserver_error+0x6>
  {
    /*  free es structure */
    mem_free(es);
 8006ece:	f7fb b80d 	b.w	8001eec <mem_free>
 8006ed2:	4770      	bx	lr

08006ed4 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	460d      	mov	r5, r1
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8006eda:	2100      	movs	r1, #0
 8006edc:	f7fb fcfe 	bl	80028dc <tcp_arg>
  tcp_sent(tpcb, NULL);
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7fb fcfe 	bl	80028e4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4620      	mov	r0, r4
 8006eec:	f7fb fcf8 	bl	80028e0 <tcp_recv>
  tcp_err(tpcb, NULL);
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7fb fcf8 	bl	80028e8 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4611      	mov	r1, r2
 8006efc:	4620      	mov	r0, r4
 8006efe:	f7fb fcf8 	bl	80028f2 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8006f02:	b115      	cbz	r5, 8006f0a <tcp_echoserver_connection_close+0x36>
  {
    mem_free(es);
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7fa fff1 	bl	8001eec <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8006f0a:	4620      	mov	r0, r4
}
 8006f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  {
    mem_free(es);
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8006f10:	f7fb bf30 	b.w	8002d74 <tcp_close>

08006f14 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	460c      	mov	r4, r1

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8006f18:	4620      	mov	r0, r4
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	f7fb fcdc 	bl	80028d8 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8006f20:	200c      	movs	r0, #12
 8006f22:	f7fb f881 	bl	8002028 <mem_malloc>
  if (es != NULL)
 8006f26:	4601      	mov	r1, r0
 8006f28:	b1b0      	cbz	r0, 8006f58 <tcp_echoserver_accept+0x44>
  {
    es->state = ES_ACCEPTED;
 8006f2a:	2601      	movs	r6, #1
    es->pcb = newpcb;
    es->p = NULL;
 8006f2c:	2500      	movs	r5, #0

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
  if (es != NULL)
  {
    es->state = ES_ACCEPTED;
 8006f2e:	7006      	strb	r6, [r0, #0]
    es->pcb = newpcb;
 8006f30:	6044      	str	r4, [r0, #4]
    es->p = NULL;
 8006f32:	6085      	str	r5, [r0, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8006f34:	4620      	mov	r0, r4
 8006f36:	f7fb fcd1 	bl	80028dc <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	4909      	ldr	r1, [pc, #36]	; (8006f64 <tcp_echoserver_accept+0x50>)
 8006f3e:	f7fb fccf 	bl	80028e0 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8006f42:	4620      	mov	r0, r4
 8006f44:	4908      	ldr	r1, [pc, #32]	; (8006f68 <tcp_echoserver_accept+0x54>)
 8006f46:	f7fb fccf 	bl	80028e8 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 1);
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	4907      	ldr	r1, [pc, #28]	; (8006f6c <tcp_echoserver_accept+0x58>)
 8006f50:	f7fb fccf 	bl	80028f2 <tcp_poll>
    
    ret_err = ERR_OK;
 8006f54:	4628      	mov	r0, r5
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff ffbb 	bl	8006ed4 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret_err;  
}
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
 8006f64:	08006fe9 	.word	0x08006fe9
 8006f68:	08006ecd 	.word	0x08006ecd
 8006f6c:	08006fb7 	.word	0x08006fb7

08006f70 <tcp_echoserver_send.isra.0>:
  * @brief  This function is used to send data for tcp connection
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	4605      	mov	r5, r0
 8006f74:	460e      	mov	r6, r1
{
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 
  while ((wr_err == ERR_OK) &&
         (es->p != NULL) && 
 8006f76:	6834      	ldr	r4, [r6, #0]
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 
  while ((wr_err == ERR_OK) &&
 8006f78:	b1e4      	cbz	r4, 8006fb4 <tcp_echoserver_send.isra.0+0x44>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
 8006f7a:	8962      	ldrh	r2, [r4, #10]
{
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 
  while ((wr_err == ERR_OK) &&
         (es->p != NULL) && 
 8006f7c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d317      	bcc.n	8006fb4 <tcp_echoserver_send.isra.0+0x44>
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8006f84:	2301      	movs	r3, #1
 8006f86:	6861      	ldr	r1, [r4, #4]
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f7fc ffc0 	bl	8003f0e <tcp_write>
    
    if (wr_err == ERR_OK)
 8006f8e:	b968      	cbnz	r0, 8006fac <tcp_echoserver_send.isra.0+0x3c>
      u16_t plen;

      plen = ptr->len;
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8006f90:	6820      	ldr	r0, [r4, #0]
    
    if (wr_err == ERR_OK)
    {
      u16_t plen;

      plen = ptr->len;
 8006f92:	8967      	ldrh	r7, [r4, #10]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8006f94:	6030      	str	r0, [r6, #0]
      
      if(es->p != NULL)
 8006f96:	b108      	cbz	r0, 8006f9c <tcp_echoserver_send.isra.0+0x2c>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8006f98:	f7fb fac1 	bl	800251e <pbuf_ref>
      }
      
      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f7fb f9e5 	bl	800236c <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f7fb fc66 	bl	8002876 <tcp_recved>
 8006faa:	e7e4      	b.n	8006f76 <tcp_echoserver_send.isra.0+0x6>
   }
   else if(wr_err == ERR_MEM)
 8006fac:	3001      	adds	r0, #1
 8006fae:	d101      	bne.n	8006fb4 <tcp_echoserver_send.isra.0+0x44>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8006fb0:	6034      	str	r4, [r6, #0]
 8006fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fb6 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	b510      	push	{r4, lr}
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
  if (es != NULL)
 8006fba:	4601      	mov	r1, r0
 8006fbc:	b170      	cbz	r0, 8006fdc <tcp_echoserver_poll+0x26>
  {
    if (es->p != NULL)
 8006fbe:	6884      	ldr	r4, [r0, #8]
 8006fc0:	b12c      	cbz	r4, 8006fce <tcp_echoserver_poll+0x18>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8006fc2:	3108      	adds	r1, #8
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff ffd3 	bl	8006f70 <tcp_echoserver_send.isra.0>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
      }
    }
    ret_err = ERR_OK;
 8006fca:	2000      	movs	r0, #0
 8006fcc:	bd10      	pop	{r4, pc}
      tcp_echoserver_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8006fce:	7802      	ldrb	r2, [r0, #0]
 8006fd0:	2a03      	cmp	r2, #3
 8006fd2:	d1fa      	bne.n	8006fca <tcp_echoserver_poll+0x14>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff ff7d 	bl	8006ed4 <tcp_echoserver_connection_close>
 8006fda:	e7f6      	b.n	8006fca <tcp_echoserver_poll+0x14>
    ret_err = ERR_OK;
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fb ffa7 	bl	8002f30 <tcp_abort>
    ret_err = ERR_ABRT;
 8006fe2:	f06f 0009 	mvn.w	r0, #9
 8006fe6:	bd10      	pop	{r4, pc}

08006fe8 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	4604      	mov	r4, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	461e      	mov	r6, r3
  LWIP_ASSERT("arg != NULL",arg != NULL);
  
  es = (struct tcp_echoserver_struct *)arg;
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8006ff0:	4615      	mov	r5, r2
 8006ff2:	b99a      	cbnz	r2, 800701c <tcp_echoserver_recv+0x34>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
    if(es->p == NULL)
 8006ff4:	6886      	ldr	r6, [r0, #8]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	7003      	strb	r3, [r0, #0]
    if(es->p == NULL)
 8006ffa:	b926      	cbnz	r6, 8007006 <tcp_echoserver_recv+0x1e>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8006ffc:	4601      	mov	r1, r0
 8006ffe:	4638      	mov	r0, r7
 8007000:	f7ff ff68 	bl	8006ed4 <tcp_echoserver_connection_close>
 8007004:	e032      	b.n	800706c <tcp_echoserver_recv+0x84>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8007006:	491a      	ldr	r1, [pc, #104]	; (8007070 <tcp_echoserver_recv+0x88>)
 8007008:	4638      	mov	r0, r7
 800700a:	f7fb fc6b 	bl	80028e4 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 800700e:	f104 0108 	add.w	r1, r4, #8
 8007012:	4638      	mov	r0, r7
 8007014:	f7ff ffac 	bl	8006f70 <tcp_echoserver_send.isra.0>
    }
    ret_err = ERR_OK;
 8007018:	462e      	mov	r6, r5
 800701a:	e027      	b.n	800706c <tcp_echoserver_recv+0x84>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 800701c:	b113      	cbz	r3, 8007024 <tcp_echoserver_recv+0x3c>
  {
    /* free received pbuf*/
    es->p = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	6083      	str	r3, [r0, #8]
 8007022:	e020      	b.n	8007066 <tcp_echoserver_recv+0x7e>
    pbuf_free(p);
    ret_err = err;
  }
  else if(es->state == ES_ACCEPTED)
 8007024:	7803      	ldrb	r3, [r0, #0]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d109      	bne.n	800703e <tcp_echoserver_recv+0x56>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 800702a:	2302      	movs	r3, #2
 800702c:	7003      	strb	r3, [r0, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800702e:	f844 2f08 	str.w	r2, [r4, #8]!
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8007032:	490f      	ldr	r1, [pc, #60]	; (8007070 <tcp_echoserver_recv+0x88>)
 8007034:	4638      	mov	r0, r7
 8007036:	f7fb fc55 	bl	80028e4 <tcp_sent>
    
    /* send back the received data (echo) */
    tcp_echoserver_send(tpcb, es);
 800703a:	4621      	mov	r1, r4
 800703c:	e006      	b.n	800704c <tcp_echoserver_recv+0x64>
    
    ret_err = ERR_OK;
  }
  else if (es->state == ES_RECEIVED)
 800703e:	2b02      	cmp	r3, #2
 8007040:	d10c      	bne.n	800705c <tcp_echoserver_recv+0x74>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8007042:	6880      	ldr	r0, [r0, #8]
 8007044:	b930      	cbnz	r0, 8007054 <tcp_echoserver_recv+0x6c>
    {
      es->p = p;
 8007046:	4621      	mov	r1, r4
 8007048:	f841 2f08 	str.w	r2, [r1, #8]!
  
      /* send back received data */
      tcp_echoserver_send(tpcb, es);
 800704c:	4638      	mov	r0, r7
 800704e:	f7ff ff8f 	bl	8006f70 <tcp_echoserver_send.isra.0>
 8007052:	e00b      	b.n	800706c <tcp_echoserver_recv+0x84>
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
      pbuf_chain(ptr,p);
 8007054:	4611      	mov	r1, r2
 8007056:	f7fb fa75 	bl	8002544 <pbuf_chain>
 800705a:	e007      	b.n	800706c <tcp_echoserver_recv+0x84>
  
  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 800705c:	8911      	ldrh	r1, [r2, #8]
 800705e:	4638      	mov	r0, r7
 8007060:	f7fb fc09 	bl	8002876 <tcp_recved>
    
    /* free pbuf and do nothing */
    es->p = NULL;
 8007064:	60a6      	str	r6, [r4, #8]
    pbuf_free(p);
 8007066:	4628      	mov	r0, r5
 8007068:	f7fb f980 	bl	800236c <pbuf_free>
    ret_err = ERR_OK;
  }
  return ret_err;
}
 800706c:	4630      	mov	r0, r6
 800706e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007070:	08007075 	.word	0x08007075

08007074 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8007074:	b508      	push	{r3, lr}
 8007076:	4603      	mov	r3, r0
 8007078:	4608      	mov	r0, r1

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
  
  if(es->p != NULL)
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	b122      	cbz	r2, 8007088 <tcp_echoserver_sent+0x14>
  {
    /* still got pbufs to send */
    tcp_echoserver_send(tpcb, es);
 800707e:	f103 0108 	add.w	r1, r3, #8
 8007082:	f7ff ff75 	bl	8006f70 <tcp_echoserver_send.isra.0>
 8007086:	e005      	b.n	8007094 <tcp_echoserver_sent+0x20>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	2a03      	cmp	r2, #3
 800708c:	d102      	bne.n	8007094 <tcp_echoserver_sent+0x20>
      tcp_echoserver_connection_close(tpcb, es);
 800708e:	4619      	mov	r1, r3
 8007090:	f7ff ff20 	bl	8006ed4 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
}
 8007094:	2000      	movs	r0, #0
 8007096:	bd08      	pop	{r3, pc}

08007098 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8007098:	b510      	push	{r4, lr}
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 800709a:	f7fb ffdb 	bl	8003054 <tcp_new>
 800709e:	4c0e      	ldr	r4, [pc, #56]	; (80070d8 <tcp_echoserver_init+0x40>)
 80070a0:	6020      	str	r0, [r4, #0]

  if (tcp_echoserver_pcb != NULL)
 80070a2:	b1a0      	cbz	r0, 80070ce <tcp_echoserver_init+0x36>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 80070a4:	2207      	movs	r2, #7
 80070a6:	490d      	ldr	r1, [pc, #52]	; (80070dc <tcp_echoserver_init+0x44>)
 80070a8:	f7fb fb40 	bl	800272c <tcp_bind>
    
    if (err == ERR_OK)
 80070ac:	b948      	cbnz	r0, 80070c2 <tcp_echoserver_init+0x2a>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 80070ae:	21ff      	movs	r1, #255	; 0xff
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	f7fb fb75 	bl	80027a0 <tcp_listen_with_backlog>
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 80070b6:	490a      	ldr	r1, [pc, #40]	; (80070e0 <tcp_echoserver_init+0x48>)
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
    
    if (err == ERR_OK)
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 80070b8:	6020      	str	r0, [r4, #0]
  }
  else
  {
    printf("Can not create new pcb\n");
  }
}
 80070ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 80070be:	f7fb bc16 	b.w	80028ee <tcp_accept>
    }
    else 
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80070c2:	2002      	movs	r0, #2
 80070c4:	6821      	ldr	r1, [r4, #0]
 80070c6:	f7fb f841 	bl	800214c <memp_free>
      printf("Can not bind pcb\n");
 80070ca:	4806      	ldr	r0, [pc, #24]	; (80070e4 <tcp_echoserver_init+0x4c>)
 80070cc:	e000      	b.n	80070d0 <tcp_echoserver_init+0x38>
    }
  }
  else
  {
    printf("Can not create new pcb\n");
 80070ce:	4806      	ldr	r0, [pc, #24]	; (80070e8 <tcp_echoserver_init+0x50>)
  }
}
 80070d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      printf("Can not bind pcb\n");
    }
  }
  else
  {
    printf("Can not create new pcb\n");
 80070d4:	f000 b89e 	b.w	8007214 <puts>
 80070d8:	20002bbc 	.word	0x20002bbc
 80070dc:	0800a8d4 	.word	0x0800a8d4
 80070e0:	08006f15 	.word	0x08006f15
 80070e4:	0800bbdf 	.word	0x0800bbdf
 80070e8:	0800bbf0 	.word	0x0800bbf0

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4b0e      	ldr	r3, [pc, #56]	; (8007128 <__libc_init_array+0x3c>)
 80070f0:	4c0e      	ldr	r4, [pc, #56]	; (800712c <__libc_init_array+0x40>)
 80070f2:	1ae4      	subs	r4, r4, r3
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2500      	movs	r5, #0
 80070f8:	461e      	mov	r6, r3
 80070fa:	42a5      	cmp	r5, r4
 80070fc:	d004      	beq.n	8007108 <__libc_init_array+0x1c>
 80070fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007102:	4798      	blx	r3
 8007104:	3501      	adds	r5, #1
 8007106:	e7f8      	b.n	80070fa <__libc_init_array+0xe>
 8007108:	f003 fbd6 	bl	800a8b8 <_init>
 800710c:	4c08      	ldr	r4, [pc, #32]	; (8007130 <__libc_init_array+0x44>)
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <__libc_init_array+0x48>)
 8007110:	1ae4      	subs	r4, r4, r3
 8007112:	10a4      	asrs	r4, r4, #2
 8007114:	2500      	movs	r5, #0
 8007116:	461e      	mov	r6, r3
 8007118:	42a5      	cmp	r5, r4
 800711a:	d004      	beq.n	8007126 <__libc_init_array+0x3a>
 800711c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007120:	4798      	blx	r3
 8007122:	3501      	adds	r5, #1
 8007124:	e7f8      	b.n	8007118 <__libc_init_array+0x2c>
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	0800bde4 	.word	0x0800bde4
 800712c:	0800bde4 	.word	0x0800bde4
 8007130:	0800bde8 	.word	0x0800bde8
 8007134:	0800bde4 	.word	0x0800bde4

08007138 <memcmp>:
 8007138:	b510      	push	{r4, lr}
 800713a:	3901      	subs	r1, #1
 800713c:	4402      	add	r2, r0
 800713e:	4290      	cmp	r0, r2
 8007140:	d007      	beq.n	8007152 <memcmp+0x1a>
 8007142:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007146:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800714a:	42a3      	cmp	r3, r4
 800714c:	d0f7      	beq.n	800713e <memcmp+0x6>
 800714e:	1b18      	subs	r0, r3, r4
 8007150:	bd10      	pop	{r4, pc}
 8007152:	2000      	movs	r0, #0
 8007154:	bd10      	pop	{r4, pc}

08007156 <memcpy>:
 8007156:	b510      	push	{r4, lr}
 8007158:	1e43      	subs	r3, r0, #1
 800715a:	440a      	add	r2, r1
 800715c:	4291      	cmp	r1, r2
 800715e:	d004      	beq.n	800716a <memcpy+0x14>
 8007160:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007164:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007168:	e7f8      	b.n	800715c <memcpy+0x6>
 800716a:	bd10      	pop	{r4, pc}

0800716c <memset>:
 800716c:	4402      	add	r2, r0
 800716e:	4603      	mov	r3, r0
 8007170:	4293      	cmp	r3, r2
 8007172:	d002      	beq.n	800717a <memset+0xe>
 8007174:	f803 1b01 	strb.w	r1, [r3], #1
 8007178:	e7fa      	b.n	8007170 <memset+0x4>
 800717a:	4770      	bx	lr

0800717c <_puts_r>:
 800717c:	b530      	push	{r4, r5, lr}
 800717e:	4605      	mov	r5, r0
 8007180:	b089      	sub	sp, #36	; 0x24
 8007182:	4608      	mov	r0, r1
 8007184:	460c      	mov	r4, r1
 8007186:	f7f9 f82b 	bl	80001e0 <strlen>
 800718a:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <_puts_r+0x88>)
 800718c:	9306      	str	r3, [sp, #24]
 800718e:	2301      	movs	r3, #1
 8007190:	9005      	str	r0, [sp, #20]
 8007192:	9307      	str	r3, [sp, #28]
 8007194:	4418      	add	r0, r3
 8007196:	ab04      	add	r3, sp, #16
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	2302      	movs	r3, #2
 800719c:	9404      	str	r4, [sp, #16]
 800719e:	9003      	str	r0, [sp, #12]
 80071a0:	9302      	str	r3, [sp, #8]
 80071a2:	b125      	cbz	r5, 80071ae <_puts_r+0x32>
 80071a4:	69ab      	ldr	r3, [r5, #24]
 80071a6:	b913      	cbnz	r3, 80071ae <_puts_r+0x32>
 80071a8:	4628      	mov	r0, r5
 80071aa:	f001 fe85 	bl	8008eb8 <__sinit>
 80071ae:	69ab      	ldr	r3, [r5, #24]
 80071b0:	68ac      	ldr	r4, [r5, #8]
 80071b2:	b913      	cbnz	r3, 80071ba <_puts_r+0x3e>
 80071b4:	4628      	mov	r0, r5
 80071b6:	f001 fe7f 	bl	8008eb8 <__sinit>
 80071ba:	4b13      	ldr	r3, [pc, #76]	; (8007208 <_puts_r+0x8c>)
 80071bc:	429c      	cmp	r4, r3
 80071be:	d101      	bne.n	80071c4 <_puts_r+0x48>
 80071c0:	686c      	ldr	r4, [r5, #4]
 80071c2:	e008      	b.n	80071d6 <_puts_r+0x5a>
 80071c4:	4b11      	ldr	r3, [pc, #68]	; (800720c <_puts_r+0x90>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d101      	bne.n	80071ce <_puts_r+0x52>
 80071ca:	68ac      	ldr	r4, [r5, #8]
 80071cc:	e003      	b.n	80071d6 <_puts_r+0x5a>
 80071ce:	4b10      	ldr	r3, [pc, #64]	; (8007210 <_puts_r+0x94>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	bf08      	it	eq
 80071d4:	68ec      	ldreq	r4, [r5, #12]
 80071d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071da:	049a      	lsls	r2, r3, #18
 80071dc:	d406      	bmi.n	80071ec <_puts_r+0x70>
 80071de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	6662      	str	r2, [r4, #100]	; 0x64
 80071ec:	aa01      	add	r2, sp, #4
 80071ee:	4621      	mov	r1, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f001 ffe7 	bl	80091c4 <__sfvwrite_r>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	bf14      	ite	ne
 80071fa:	f04f 30ff 	movne.w	r0, #4294967295
 80071fe:	200a      	moveq	r0, #10
 8007200:	b009      	add	sp, #36	; 0x24
 8007202:	bd30      	pop	{r4, r5, pc}
 8007204:	0800bc07 	.word	0x0800bc07
 8007208:	0800bc6c 	.word	0x0800bc6c
 800720c:	0800bc8c 	.word	0x0800bc8c
 8007210:	0800bcac 	.word	0x0800bcac

08007214 <puts>:
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <puts+0xc>)
 8007216:	4601      	mov	r1, r0
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	f7ff bfaf 	b.w	800717c <_puts_r>
 800721e:	bf00      	nop
 8007220:	20000128 	.word	0x20000128

08007224 <sprintf>:
 8007224:	b40e      	push	{r1, r2, r3}
 8007226:	b500      	push	{lr}
 8007228:	b09c      	sub	sp, #112	; 0x70
 800722a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800722e:	ab1d      	add	r3, sp, #116	; 0x74
 8007230:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007234:	9002      	str	r0, [sp, #8]
 8007236:	9006      	str	r0, [sp, #24]
 8007238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800723c:	480a      	ldr	r0, [pc, #40]	; (8007268 <sprintf+0x44>)
 800723e:	9104      	str	r1, [sp, #16]
 8007240:	9107      	str	r1, [sp, #28]
 8007242:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007246:	f853 2b04 	ldr.w	r2, [r3], #4
 800724a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	a902      	add	r1, sp, #8
 8007254:	f000 f80a 	bl	800726c <_svfprintf_r>
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	b01c      	add	sp, #112	; 0x70
 8007260:	f85d eb04 	ldr.w	lr, [sp], #4
 8007264:	b003      	add	sp, #12
 8007266:	4770      	bx	lr
 8007268:	20000128 	.word	0x20000128

0800726c <_svfprintf_r>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	b0bd      	sub	sp, #244	; 0xf4
 8007272:	468b      	mov	fp, r1
 8007274:	9209      	str	r2, [sp, #36]	; 0x24
 8007276:	461f      	mov	r7, r3
 8007278:	4681      	mov	r9, r0
 800727a:	f002 f90b 	bl	8009494 <_localeconv_r>
 800727e:	6803      	ldr	r3, [r0, #0]
 8007280:	9311      	str	r3, [sp, #68]	; 0x44
 8007282:	4618      	mov	r0, r3
 8007284:	f7f8 ffac 	bl	80001e0 <strlen>
 8007288:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800728c:	900a      	str	r0, [sp, #40]	; 0x28
 800728e:	0619      	lsls	r1, r3, #24
 8007290:	d515      	bpl.n	80072be <_svfprintf_r+0x52>
 8007292:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007296:	b993      	cbnz	r3, 80072be <_svfprintf_r+0x52>
 8007298:	2140      	movs	r1, #64	; 0x40
 800729a:	4648      	mov	r0, r9
 800729c:	f002 f906 	bl	80094ac <_malloc_r>
 80072a0:	f8cb 0000 	str.w	r0, [fp]
 80072a4:	f8cb 0010 	str.w	r0, [fp, #16]
 80072a8:	b930      	cbnz	r0, 80072b8 <_svfprintf_r+0x4c>
 80072aa:	230c      	movs	r3, #12
 80072ac:	f8c9 3000 	str.w	r3, [r9]
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	f000 bf8b 	b.w	80081ce <_svfprintf_r+0xf62>
 80072b8:	2340      	movs	r3, #64	; 0x40
 80072ba:	f8cb 3014 	str.w	r3, [fp, #20]
 80072be:	2300      	movs	r3, #0
 80072c0:	ac2c      	add	r4, sp, #176	; 0xb0
 80072c2:	941f      	str	r4, [sp, #124]	; 0x7c
 80072c4:	9321      	str	r3, [sp, #132]	; 0x84
 80072c6:	9320      	str	r3, [sp, #128]	; 0x80
 80072c8:	9308      	str	r3, [sp, #32]
 80072ca:	930c      	str	r3, [sp, #48]	; 0x30
 80072cc:	930d      	str	r3, [sp, #52]	; 0x34
 80072ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80072d0:	9312      	str	r3, [sp, #72]	; 0x48
 80072d2:	930e      	str	r3, [sp, #56]	; 0x38
 80072d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072d6:	462b      	mov	r3, r5
 80072d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072dc:	b11a      	cbz	r2, 80072e6 <_svfprintf_r+0x7a>
 80072de:	2a25      	cmp	r2, #37	; 0x25
 80072e0:	d001      	beq.n	80072e6 <_svfprintf_r+0x7a>
 80072e2:	461d      	mov	r5, r3
 80072e4:	e7f7      	b.n	80072d6 <_svfprintf_r+0x6a>
 80072e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e8:	1aee      	subs	r6, r5, r3
 80072ea:	d017      	beq.n	800731c <_svfprintf_r+0xb0>
 80072ec:	e884 0048 	stmia.w	r4, {r3, r6}
 80072f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072f2:	4433      	add	r3, r6
 80072f4:	9321      	str	r3, [sp, #132]	; 0x84
 80072f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072f8:	3301      	adds	r3, #1
 80072fa:	2b07      	cmp	r3, #7
 80072fc:	9320      	str	r3, [sp, #128]	; 0x80
 80072fe:	dc01      	bgt.n	8007304 <_svfprintf_r+0x98>
 8007300:	3408      	adds	r4, #8
 8007302:	e008      	b.n	8007316 <_svfprintf_r+0xaa>
 8007304:	aa1f      	add	r2, sp, #124	; 0x7c
 8007306:	4659      	mov	r1, fp
 8007308:	4648      	mov	r0, r9
 800730a:	f002 ffde 	bl	800a2ca <__ssprint_r>
 800730e:	2800      	cmp	r0, #0
 8007310:	f040 8624 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007314:	ac2c      	add	r4, sp, #176	; 0xb0
 8007316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007318:	4433      	add	r3, r6
 800731a:	930e      	str	r3, [sp, #56]	; 0x38
 800731c:	782b      	ldrb	r3, [r5, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 8615 	beq.w	8007f4e <_svfprintf_r+0xce2>
 8007324:	2200      	movs	r2, #0
 8007326:	1c6b      	adds	r3, r5, #1
 8007328:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800732c:	4611      	mov	r1, r2
 800732e:	f04f 3aff 	mov.w	sl, #4294967295
 8007332:	920b      	str	r2, [sp, #44]	; 0x2c
 8007334:	4615      	mov	r5, r2
 8007336:	200a      	movs	r0, #10
 8007338:	1c5e      	adds	r6, r3, #1
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	9609      	str	r6, [sp, #36]	; 0x24
 800733e:	9306      	str	r3, [sp, #24]
 8007340:	9b06      	ldr	r3, [sp, #24]
 8007342:	3b20      	subs	r3, #32
 8007344:	2b58      	cmp	r3, #88	; 0x58
 8007346:	f200 825b 	bhi.w	8007800 <_svfprintf_r+0x594>
 800734a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800734e:	005c      	.short	0x005c
 8007350:	02590259 	.word	0x02590259
 8007354:	0259006b 	.word	0x0259006b
 8007358:	02590259 	.word	0x02590259
 800735c:	02590259 	.word	0x02590259
 8007360:	006e0259 	.word	0x006e0259
 8007364:	02590059 	.word	0x02590059
 8007368:	007c0079 	.word	0x007c0079
 800736c:	00a00259 	.word	0x00a00259
 8007370:	00a300a3 	.word	0x00a300a3
 8007374:	00a300a3 	.word	0x00a300a3
 8007378:	00a300a3 	.word	0x00a300a3
 800737c:	00a300a3 	.word	0x00a300a3
 8007380:	025900a3 	.word	0x025900a3
 8007384:	02590259 	.word	0x02590259
 8007388:	02590259 	.word	0x02590259
 800738c:	02590259 	.word	0x02590259
 8007390:	02590259 	.word	0x02590259
 8007394:	00d30259 	.word	0x00d30259
 8007398:	025900ff 	.word	0x025900ff
 800739c:	025900ff 	.word	0x025900ff
 80073a0:	02590259 	.word	0x02590259
 80073a4:	00b60259 	.word	0x00b60259
 80073a8:	02590259 	.word	0x02590259
 80073ac:	02590144 	.word	0x02590144
 80073b0:	02590259 	.word	0x02590259
 80073b4:	02590259 	.word	0x02590259
 80073b8:	0259018b 	.word	0x0259018b
 80073bc:	00660259 	.word	0x00660259
 80073c0:	02590259 	.word	0x02590259
 80073c4:	02590259 	.word	0x02590259
 80073c8:	02590259 	.word	0x02590259
 80073cc:	02590259 	.word	0x02590259
 80073d0:	02590259 	.word	0x02590259
 80073d4:	006100ca 	.word	0x006100ca
 80073d8:	00ff00ff 	.word	0x00ff00ff
 80073dc:	00b900ff 	.word	0x00b900ff
 80073e0:	02590061 	.word	0x02590061
 80073e4:	00bc0259 	.word	0x00bc0259
 80073e8:	01260259 	.word	0x01260259
 80073ec:	01610146 	.word	0x01610146
 80073f0:	025900c7 	.word	0x025900c7
 80073f4:	02590172 	.word	0x02590172
 80073f8:	0259018d 	.word	0x0259018d
 80073fc:	01a50259 	.word	0x01a50259
 8007400:	2201      	movs	r2, #1
 8007402:	212b      	movs	r1, #43	; 0x2b
 8007404:	e002      	b.n	800740c <_svfprintf_r+0x1a0>
 8007406:	b909      	cbnz	r1, 800740c <_svfprintf_r+0x1a0>
 8007408:	2201      	movs	r2, #1
 800740a:	2120      	movs	r1, #32
 800740c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740e:	e793      	b.n	8007338 <_svfprintf_r+0xcc>
 8007410:	2a00      	cmp	r2, #0
 8007412:	d074      	beq.n	80074fe <_svfprintf_r+0x292>
 8007414:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007418:	e071      	b.n	80074fe <_svfprintf_r+0x292>
 800741a:	b10a      	cbz	r2, 8007420 <_svfprintf_r+0x1b4>
 800741c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007420:	4baa      	ldr	r3, [pc, #680]	; (80076cc <_svfprintf_r+0x460>)
 8007422:	e13d      	b.n	80076a0 <_svfprintf_r+0x434>
 8007424:	f045 0501 	orr.w	r5, r5, #1
 8007428:	e7f0      	b.n	800740c <_svfprintf_r+0x1a0>
 800742a:	683e      	ldr	r6, [r7, #0]
 800742c:	960b      	str	r6, [sp, #44]	; 0x2c
 800742e:	2e00      	cmp	r6, #0
 8007430:	f107 0304 	add.w	r3, r7, #4
 8007434:	db01      	blt.n	800743a <_svfprintf_r+0x1ce>
 8007436:	461f      	mov	r7, r3
 8007438:	e7e8      	b.n	800740c <_svfprintf_r+0x1a0>
 800743a:	4276      	negs	r6, r6
 800743c:	960b      	str	r6, [sp, #44]	; 0x2c
 800743e:	461f      	mov	r7, r3
 8007440:	f045 0504 	orr.w	r5, r5, #4
 8007444:	e7e2      	b.n	800740c <_svfprintf_r+0x1a0>
 8007446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007448:	1c5e      	adds	r6, r3, #1
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	9306      	str	r3, [sp, #24]
 800744e:	2b2a      	cmp	r3, #42	; 0x2a
 8007450:	d001      	beq.n	8007456 <_svfprintf_r+0x1ea>
 8007452:	2300      	movs	r3, #0
 8007454:	e00a      	b.n	800746c <_svfprintf_r+0x200>
 8007456:	f8d7 a000 	ldr.w	sl, [r7]
 800745a:	9609      	str	r6, [sp, #36]	; 0x24
 800745c:	1d3b      	adds	r3, r7, #4
 800745e:	f1ba 0f00 	cmp.w	sl, #0
 8007462:	461f      	mov	r7, r3
 8007464:	dad2      	bge.n	800740c <_svfprintf_r+0x1a0>
 8007466:	f04f 3aff 	mov.w	sl, #4294967295
 800746a:	e7cf      	b.n	800740c <_svfprintf_r+0x1a0>
 800746c:	9609      	str	r6, [sp, #36]	; 0x24
 800746e:	9e06      	ldr	r6, [sp, #24]
 8007470:	3e30      	subs	r6, #48	; 0x30
 8007472:	2e09      	cmp	r6, #9
 8007474:	d808      	bhi.n	8007488 <_svfprintf_r+0x21c>
 8007476:	fb00 6303 	mla	r3, r0, r3, r6
 800747a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800747c:	46b6      	mov	lr, r6
 800747e:	f81e 6b01 	ldrb.w	r6, [lr], #1
 8007482:	9606      	str	r6, [sp, #24]
 8007484:	4676      	mov	r6, lr
 8007486:	e7f1      	b.n	800746c <_svfprintf_r+0x200>
 8007488:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 800748c:	e758      	b.n	8007340 <_svfprintf_r+0xd4>
 800748e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8007492:	e7bb      	b.n	800740c <_svfprintf_r+0x1a0>
 8007494:	2300      	movs	r3, #0
 8007496:	930b      	str	r3, [sp, #44]	; 0x2c
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800749c:	3b30      	subs	r3, #48	; 0x30
 800749e:	fb00 3306 	mla	r3, r0, r6, r3
 80074a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a6:	461e      	mov	r6, r3
 80074a8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80074ac:	9306      	str	r3, [sp, #24]
 80074ae:	9b06      	ldr	r3, [sp, #24]
 80074b0:	9609      	str	r6, [sp, #36]	; 0x24
 80074b2:	3b30      	subs	r3, #48	; 0x30
 80074b4:	2b09      	cmp	r3, #9
 80074b6:	d9ef      	bls.n	8007498 <_svfprintf_r+0x22c>
 80074b8:	e742      	b.n	8007340 <_svfprintf_r+0xd4>
 80074ba:	f045 0508 	orr.w	r5, r5, #8
 80074be:	e7a5      	b.n	800740c <_svfprintf_r+0x1a0>
 80074c0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80074c4:	e7a2      	b.n	800740c <_svfprintf_r+0x1a0>
 80074c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b6c      	cmp	r3, #108	; 0x6c
 80074cc:	d103      	bne.n	80074d6 <_svfprintf_r+0x26a>
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	3301      	adds	r3, #1
 80074d2:	9309      	str	r3, [sp, #36]	; 0x24
 80074d4:	e002      	b.n	80074dc <_svfprintf_r+0x270>
 80074d6:	f045 0510 	orr.w	r5, r5, #16
 80074da:	e797      	b.n	800740c <_svfprintf_r+0x1a0>
 80074dc:	f045 0520 	orr.w	r5, r5, #32
 80074e0:	e794      	b.n	800740c <_svfprintf_r+0x1a0>
 80074e2:	1d3b      	adds	r3, r7, #4
 80074e4:	9307      	str	r3, [sp, #28]
 80074e6:	2600      	movs	r6, #0
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80074ee:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80074f2:	e194      	b.n	800781e <_svfprintf_r+0x5b2>
 80074f4:	b10a      	cbz	r2, 80074fa <_svfprintf_r+0x28e>
 80074f6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80074fa:	f045 0510 	orr.w	r5, r5, #16
 80074fe:	06aa      	lsls	r2, r5, #26
 8007500:	d508      	bpl.n	8007514 <_svfprintf_r+0x2a8>
 8007502:	3707      	adds	r7, #7
 8007504:	f027 0707 	bic.w	r7, r7, #7
 8007508:	f107 0308 	add.w	r3, r7, #8
 800750c:	9307      	str	r3, [sp, #28]
 800750e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007512:	e00e      	b.n	8007532 <_svfprintf_r+0x2c6>
 8007514:	f015 0f10 	tst.w	r5, #16
 8007518:	f107 0304 	add.w	r3, r7, #4
 800751c:	d002      	beq.n	8007524 <_svfprintf_r+0x2b8>
 800751e:	9307      	str	r3, [sp, #28]
 8007520:	683e      	ldr	r6, [r7, #0]
 8007522:	e005      	b.n	8007530 <_svfprintf_r+0x2c4>
 8007524:	683e      	ldr	r6, [r7, #0]
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	f015 0f40 	tst.w	r5, #64	; 0x40
 800752c:	bf18      	it	ne
 800752e:	b236      	sxthne	r6, r6
 8007530:	17f7      	asrs	r7, r6, #31
 8007532:	2e00      	cmp	r6, #0
 8007534:	f177 0300 	sbcs.w	r3, r7, #0
 8007538:	f280 80e3 	bge.w	8007702 <_svfprintf_r+0x496>
 800753c:	4276      	negs	r6, r6
 800753e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8007542:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8007546:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800754a:	e0da      	b.n	8007702 <_svfprintf_r+0x496>
 800754c:	b10a      	cbz	r2, 8007552 <_svfprintf_r+0x2e6>
 800754e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007552:	3707      	adds	r7, #7
 8007554:	f027 0707 	bic.w	r7, r7, #7
 8007558:	f107 0308 	add.w	r3, r7, #8
 800755c:	9307      	str	r3, [sp, #28]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	930c      	str	r3, [sp, #48]	; 0x30
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	930d      	str	r3, [sp, #52]	; 0x34
 8007566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007568:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800756a:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800756e:	f04f 32ff 	mov.w	r2, #4294967295
 8007572:	4b57      	ldr	r3, [pc, #348]	; (80076d0 <_svfprintf_r+0x464>)
 8007574:	4638      	mov	r0, r7
 8007576:	4631      	mov	r1, r6
 8007578:	f7f9 fadc 	bl	8000b34 <__aeabi_dcmpun>
 800757c:	2800      	cmp	r0, #0
 800757e:	f040 84f7 	bne.w	8007f70 <_svfprintf_r+0xd04>
 8007582:	f04f 32ff 	mov.w	r2, #4294967295
 8007586:	4b52      	ldr	r3, [pc, #328]	; (80076d0 <_svfprintf_r+0x464>)
 8007588:	4638      	mov	r0, r7
 800758a:	4631      	mov	r1, r6
 800758c:	f7f9 fab4 	bl	8000af8 <__aeabi_dcmple>
 8007590:	2800      	cmp	r0, #0
 8007592:	f040 84ed 	bne.w	8007f70 <_svfprintf_r+0xd04>
 8007596:	f000 be03 	b.w	80081a0 <_svfprintf_r+0xf34>
 800759a:	b10a      	cbz	r2, 80075a0 <_svfprintf_r+0x334>
 800759c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80075a0:	f015 0f20 	tst.w	r5, #32
 80075a4:	f107 0304 	add.w	r3, r7, #4
 80075a8:	d007      	beq.n	80075ba <_svfprintf_r+0x34e>
 80075aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	17ce      	asrs	r6, r1, #31
 80075b0:	4608      	mov	r0, r1
 80075b2:	4631      	mov	r1, r6
 80075b4:	e9c2 0100 	strd	r0, r1, [r2]
 80075b8:	e00b      	b.n	80075d2 <_svfprintf_r+0x366>
 80075ba:	06e9      	lsls	r1, r5, #27
 80075bc:	d406      	bmi.n	80075cc <_svfprintf_r+0x360>
 80075be:	066a      	lsls	r2, r5, #25
 80075c0:	d504      	bpl.n	80075cc <_svfprintf_r+0x360>
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80075c8:	8011      	strh	r1, [r2, #0]
 80075ca:	e002      	b.n	80075d2 <_svfprintf_r+0x366>
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80075d0:	6011      	str	r1, [r2, #0]
 80075d2:	461f      	mov	r7, r3
 80075d4:	e67e      	b.n	80072d4 <_svfprintf_r+0x68>
 80075d6:	f045 0510 	orr.w	r5, r5, #16
 80075da:	f015 0320 	ands.w	r3, r5, #32
 80075de:	d009      	beq.n	80075f4 <_svfprintf_r+0x388>
 80075e0:	3707      	adds	r7, #7
 80075e2:	f027 0707 	bic.w	r7, r7, #7
 80075e6:	f107 0308 	add.w	r3, r7, #8
 80075ea:	e9d7 6700 	ldrd	r6, r7, [r7]
 80075ee:	9307      	str	r3, [sp, #28]
 80075f0:	2300      	movs	r3, #0
 80075f2:	e082      	b.n	80076fa <_svfprintf_r+0x48e>
 80075f4:	1d3a      	adds	r2, r7, #4
 80075f6:	f015 0110 	ands.w	r1, r5, #16
 80075fa:	9207      	str	r2, [sp, #28]
 80075fc:	d105      	bne.n	800760a <_svfprintf_r+0x39e>
 80075fe:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8007602:	d002      	beq.n	800760a <_svfprintf_r+0x39e>
 8007604:	883e      	ldrh	r6, [r7, #0]
 8007606:	2700      	movs	r7, #0
 8007608:	e7f2      	b.n	80075f0 <_svfprintf_r+0x384>
 800760a:	683e      	ldr	r6, [r7, #0]
 800760c:	2700      	movs	r7, #0
 800760e:	e074      	b.n	80076fa <_svfprintf_r+0x48e>
 8007610:	1d3b      	adds	r3, r7, #4
 8007612:	9307      	str	r3, [sp, #28]
 8007614:	2330      	movs	r3, #48	; 0x30
 8007616:	2278      	movs	r2, #120	; 0x78
 8007618:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800761c:	4b2d      	ldr	r3, [pc, #180]	; (80076d4 <_svfprintf_r+0x468>)
 800761e:	683e      	ldr	r6, [r7, #0]
 8007620:	9313      	str	r3, [sp, #76]	; 0x4c
 8007622:	2700      	movs	r7, #0
 8007624:	f045 0502 	orr.w	r5, r5, #2
 8007628:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800762c:	2302      	movs	r3, #2
 800762e:	9206      	str	r2, [sp, #24]
 8007630:	e063      	b.n	80076fa <_svfprintf_r+0x48e>
 8007632:	2600      	movs	r6, #0
 8007634:	1d3b      	adds	r3, r7, #4
 8007636:	45b2      	cmp	sl, r6
 8007638:	9307      	str	r3, [sp, #28]
 800763a:	f8d7 8000 	ldr.w	r8, [r7]
 800763e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8007642:	db0a      	blt.n	800765a <_svfprintf_r+0x3ee>
 8007644:	4652      	mov	r2, sl
 8007646:	4631      	mov	r1, r6
 8007648:	4640      	mov	r0, r8
 800764a:	f7f8 fdd1 	bl	80001f0 <memchr>
 800764e:	2800      	cmp	r0, #0
 8007650:	f000 80eb 	beq.w	800782a <_svfprintf_r+0x5be>
 8007654:	ebc8 0a00 	rsb	sl, r8, r0
 8007658:	e0e8      	b.n	800782c <_svfprintf_r+0x5c0>
 800765a:	4640      	mov	r0, r8
 800765c:	f7f8 fdc0 	bl	80001e0 <strlen>
 8007660:	4682      	mov	sl, r0
 8007662:	e0e3      	b.n	800782c <_svfprintf_r+0x5c0>
 8007664:	f045 0510 	orr.w	r5, r5, #16
 8007668:	06ae      	lsls	r6, r5, #26
 800766a:	d508      	bpl.n	800767e <_svfprintf_r+0x412>
 800766c:	3707      	adds	r7, #7
 800766e:	f027 0707 	bic.w	r7, r7, #7
 8007672:	f107 0308 	add.w	r3, r7, #8
 8007676:	9307      	str	r3, [sp, #28]
 8007678:	e9d7 6700 	ldrd	r6, r7, [r7]
 800767c:	e00a      	b.n	8007694 <_svfprintf_r+0x428>
 800767e:	1d3b      	adds	r3, r7, #4
 8007680:	f015 0f10 	tst.w	r5, #16
 8007684:	9307      	str	r3, [sp, #28]
 8007686:	d103      	bne.n	8007690 <_svfprintf_r+0x424>
 8007688:	0668      	lsls	r0, r5, #25
 800768a:	d501      	bpl.n	8007690 <_svfprintf_r+0x424>
 800768c:	883e      	ldrh	r6, [r7, #0]
 800768e:	e000      	b.n	8007692 <_svfprintf_r+0x426>
 8007690:	683e      	ldr	r6, [r7, #0]
 8007692:	2700      	movs	r7, #0
 8007694:	2301      	movs	r3, #1
 8007696:	e030      	b.n	80076fa <_svfprintf_r+0x48e>
 8007698:	b10a      	cbz	r2, 800769e <_svfprintf_r+0x432>
 800769a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <_svfprintf_r+0x468>)
 80076a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80076a2:	06a9      	lsls	r1, r5, #26
 80076a4:	d508      	bpl.n	80076b8 <_svfprintf_r+0x44c>
 80076a6:	3707      	adds	r7, #7
 80076a8:	f027 0707 	bic.w	r7, r7, #7
 80076ac:	f107 0308 	add.w	r3, r7, #8
 80076b0:	9307      	str	r3, [sp, #28]
 80076b2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80076b6:	e011      	b.n	80076dc <_svfprintf_r+0x470>
 80076b8:	1d3b      	adds	r3, r7, #4
 80076ba:	f015 0f10 	tst.w	r5, #16
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	d10a      	bne.n	80076d8 <_svfprintf_r+0x46c>
 80076c2:	066a      	lsls	r2, r5, #25
 80076c4:	d508      	bpl.n	80076d8 <_svfprintf_r+0x46c>
 80076c6:	883e      	ldrh	r6, [r7, #0]
 80076c8:	e007      	b.n	80076da <_svfprintf_r+0x46e>
 80076ca:	bf00      	nop
 80076cc:	0800bc29 	.word	0x0800bc29
 80076d0:	7fefffff 	.word	0x7fefffff
 80076d4:	0800bc3a 	.word	0x0800bc3a
 80076d8:	683e      	ldr	r6, [r7, #0]
 80076da:	2700      	movs	r7, #0
 80076dc:	07eb      	lsls	r3, r5, #31
 80076de:	d50b      	bpl.n	80076f8 <_svfprintf_r+0x48c>
 80076e0:	ea56 0307 	orrs.w	r3, r6, r7
 80076e4:	d008      	beq.n	80076f8 <_svfprintf_r+0x48c>
 80076e6:	2330      	movs	r3, #48	; 0x30
 80076e8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80076ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80076f0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80076f4:	f045 0502 	orr.w	r5, r5, #2
 80076f8:	2302      	movs	r3, #2
 80076fa:	2200      	movs	r2, #0
 80076fc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8007700:	e000      	b.n	8007704 <_svfprintf_r+0x498>
 8007702:	2301      	movs	r3, #1
 8007704:	f1ba 0f00 	cmp.w	sl, #0
 8007708:	f2c0 855b 	blt.w	80081c2 <_svfprintf_r+0xf56>
 800770c:	ea56 0207 	orrs.w	r2, r6, r7
 8007710:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8007714:	d103      	bne.n	800771e <_svfprintf_r+0x4b2>
 8007716:	f1ba 0f00 	cmp.w	sl, #0
 800771a:	d05f      	beq.n	80077dc <_svfprintf_r+0x570>
 800771c:	e006      	b.n	800772c <_svfprintf_r+0x4c0>
 800771e:	460d      	mov	r5, r1
 8007720:	2b01      	cmp	r3, #1
 8007722:	d025      	beq.n	8007770 <_svfprintf_r+0x504>
 8007724:	2b02      	cmp	r3, #2
 8007726:	d046      	beq.n	80077b6 <_svfprintf_r+0x54a>
 8007728:	4629      	mov	r1, r5
 800772a:	e007      	b.n	800773c <_svfprintf_r+0x4d0>
 800772c:	460d      	mov	r5, r1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d022      	beq.n	8007778 <_svfprintf_r+0x50c>
 8007732:	2b02      	cmp	r3, #2
 8007734:	d03d      	beq.n	80077b2 <_svfprintf_r+0x546>
 8007736:	4629      	mov	r1, r5
 8007738:	2600      	movs	r6, #0
 800773a:	2700      	movs	r7, #0
 800773c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8007740:	08f2      	lsrs	r2, r6, #3
 8007742:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8007746:	08f8      	lsrs	r0, r7, #3
 8007748:	f006 0307 	and.w	r3, r6, #7
 800774c:	4607      	mov	r7, r0
 800774e:	4616      	mov	r6, r2
 8007750:	3330      	adds	r3, #48	; 0x30
 8007752:	ea56 0207 	orrs.w	r2, r6, r7
 8007756:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800775a:	d1f1      	bne.n	8007740 <_svfprintf_r+0x4d4>
 800775c:	07e8      	lsls	r0, r5, #31
 800775e:	d548      	bpl.n	80077f2 <_svfprintf_r+0x586>
 8007760:	2b30      	cmp	r3, #48	; 0x30
 8007762:	d046      	beq.n	80077f2 <_svfprintf_r+0x586>
 8007764:	2330      	movs	r3, #48	; 0x30
 8007766:	f808 3c01 	strb.w	r3, [r8, #-1]
 800776a:	f108 38ff 	add.w	r8, r8, #4294967295
 800776e:	e040      	b.n	80077f2 <_svfprintf_r+0x586>
 8007770:	2f00      	cmp	r7, #0
 8007772:	bf08      	it	eq
 8007774:	2e0a      	cmpeq	r6, #10
 8007776:	d205      	bcs.n	8007784 <_svfprintf_r+0x518>
 8007778:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800777c:	3630      	adds	r6, #48	; 0x30
 800777e:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8007782:	e029      	b.n	80077d8 <_svfprintf_r+0x56c>
 8007784:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	220a      	movs	r2, #10
 800778e:	2300      	movs	r3, #0
 8007790:	f7f9 fa0e 	bl	8000bb0 <__aeabi_uldivmod>
 8007794:	3230      	adds	r2, #48	; 0x30
 8007796:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800779a:	2300      	movs	r3, #0
 800779c:	4630      	mov	r0, r6
 800779e:	4639      	mov	r1, r7
 80077a0:	220a      	movs	r2, #10
 80077a2:	f7f9 fa05 	bl	8000bb0 <__aeabi_uldivmod>
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	ea56 0307 	orrs.w	r3, r6, r7
 80077ae:	d1eb      	bne.n	8007788 <_svfprintf_r+0x51c>
 80077b0:	e012      	b.n	80077d8 <_svfprintf_r+0x56c>
 80077b2:	2600      	movs	r6, #0
 80077b4:	2700      	movs	r7, #0
 80077b6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80077ba:	f006 030f 	and.w	r3, r6, #15
 80077be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077c0:	5cd3      	ldrb	r3, [r2, r3]
 80077c2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80077c6:	0933      	lsrs	r3, r6, #4
 80077c8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80077cc:	093a      	lsrs	r2, r7, #4
 80077ce:	461e      	mov	r6, r3
 80077d0:	4617      	mov	r7, r2
 80077d2:	ea56 0307 	orrs.w	r3, r6, r7
 80077d6:	d1f0      	bne.n	80077ba <_svfprintf_r+0x54e>
 80077d8:	4629      	mov	r1, r5
 80077da:	e00a      	b.n	80077f2 <_svfprintf_r+0x586>
 80077dc:	b93b      	cbnz	r3, 80077ee <_svfprintf_r+0x582>
 80077de:	07ea      	lsls	r2, r5, #31
 80077e0:	d505      	bpl.n	80077ee <_svfprintf_r+0x582>
 80077e2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80077e6:	2330      	movs	r3, #48	; 0x30
 80077e8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80077ec:	e001      	b.n	80077f2 <_svfprintf_r+0x586>
 80077ee:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80077f2:	ab2c      	add	r3, sp, #176	; 0xb0
 80077f4:	4656      	mov	r6, sl
 80077f6:	460d      	mov	r5, r1
 80077f8:	ebc8 0a03 	rsb	sl, r8, r3
 80077fc:	2700      	movs	r7, #0
 80077fe:	e016      	b.n	800782e <_svfprintf_r+0x5c2>
 8007800:	b10a      	cbz	r2, 8007806 <_svfprintf_r+0x59a>
 8007802:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007806:	9b06      	ldr	r3, [sp, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 83a0 	beq.w	8007f4e <_svfprintf_r+0xce2>
 800780e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007812:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8007816:	2600      	movs	r6, #0
 8007818:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800781c:	9707      	str	r7, [sp, #28]
 800781e:	f04f 0a01 	mov.w	sl, #1
 8007822:	4637      	mov	r7, r6
 8007824:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8007828:	e001      	b.n	800782e <_svfprintf_r+0x5c2>
 800782a:	4606      	mov	r6, r0
 800782c:	4637      	mov	r7, r6
 800782e:	4556      	cmp	r6, sl
 8007830:	4633      	mov	r3, r6
 8007832:	bfb8      	it	lt
 8007834:	4653      	movlt	r3, sl
 8007836:	930f      	str	r3, [sp, #60]	; 0x3c
 8007838:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800783c:	b113      	cbz	r3, 8007844 <_svfprintf_r+0x5d8>
 800783e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007840:	3301      	adds	r3, #1
 8007842:	930f      	str	r3, [sp, #60]	; 0x3c
 8007844:	f015 0302 	ands.w	r3, r5, #2
 8007848:	9314      	str	r3, [sp, #80]	; 0x50
 800784a:	bf1e      	ittt	ne
 800784c:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 800784e:	3302      	addne	r3, #2
 8007850:	930f      	strne	r3, [sp, #60]	; 0x3c
 8007852:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8007856:	9315      	str	r3, [sp, #84]	; 0x54
 8007858:	d139      	bne.n	80078ce <_svfprintf_r+0x662>
 800785a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	9310      	str	r3, [sp, #64]	; 0x40
 8007864:	dd33      	ble.n	80078ce <_svfprintf_r+0x662>
 8007866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007868:	2b10      	cmp	r3, #16
 800786a:	4ba3      	ldr	r3, [pc, #652]	; (8007af8 <_svfprintf_r+0x88c>)
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	dd18      	ble.n	80078a2 <_svfprintf_r+0x636>
 8007870:	2310      	movs	r3, #16
 8007872:	6063      	str	r3, [r4, #4]
 8007874:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007876:	3310      	adds	r3, #16
 8007878:	9321      	str	r3, [sp, #132]	; 0x84
 800787a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800787c:	3301      	adds	r3, #1
 800787e:	2b07      	cmp	r3, #7
 8007880:	9320      	str	r3, [sp, #128]	; 0x80
 8007882:	dc01      	bgt.n	8007888 <_svfprintf_r+0x61c>
 8007884:	3408      	adds	r4, #8
 8007886:	e008      	b.n	800789a <_svfprintf_r+0x62e>
 8007888:	aa1f      	add	r2, sp, #124	; 0x7c
 800788a:	4659      	mov	r1, fp
 800788c:	4648      	mov	r0, r9
 800788e:	f002 fd1c 	bl	800a2ca <__ssprint_r>
 8007892:	2800      	cmp	r0, #0
 8007894:	f040 8362 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007898:	ac2c      	add	r4, sp, #176	; 0xb0
 800789a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800789c:	3b10      	subs	r3, #16
 800789e:	9310      	str	r3, [sp, #64]	; 0x40
 80078a0:	e7e1      	b.n	8007866 <_svfprintf_r+0x5fa>
 80078a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078aa:	4413      	add	r3, r2
 80078ac:	9321      	str	r3, [sp, #132]	; 0x84
 80078ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078b0:	3301      	adds	r3, #1
 80078b2:	2b07      	cmp	r3, #7
 80078b4:	9320      	str	r3, [sp, #128]	; 0x80
 80078b6:	dc01      	bgt.n	80078bc <_svfprintf_r+0x650>
 80078b8:	3408      	adds	r4, #8
 80078ba:	e008      	b.n	80078ce <_svfprintf_r+0x662>
 80078bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80078be:	4659      	mov	r1, fp
 80078c0:	4648      	mov	r0, r9
 80078c2:	f002 fd02 	bl	800a2ca <__ssprint_r>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f040 8348 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 80078cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80078ce:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80078d2:	b1bb      	cbz	r3, 8007904 <_svfprintf_r+0x698>
 80078d4:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	2301      	movs	r3, #1
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e0:	3301      	adds	r3, #1
 80078e2:	9321      	str	r3, [sp, #132]	; 0x84
 80078e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078e6:	3301      	adds	r3, #1
 80078e8:	2b07      	cmp	r3, #7
 80078ea:	9320      	str	r3, [sp, #128]	; 0x80
 80078ec:	dc01      	bgt.n	80078f2 <_svfprintf_r+0x686>
 80078ee:	3408      	adds	r4, #8
 80078f0:	e008      	b.n	8007904 <_svfprintf_r+0x698>
 80078f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80078f4:	4659      	mov	r1, fp
 80078f6:	4648      	mov	r0, r9
 80078f8:	f002 fce7 	bl	800a2ca <__ssprint_r>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f040 832d 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007902:	ac2c      	add	r4, sp, #176	; 0xb0
 8007904:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007906:	b1b3      	cbz	r3, 8007936 <_svfprintf_r+0x6ca>
 8007908:	ab18      	add	r3, sp, #96	; 0x60
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	2302      	movs	r3, #2
 800790e:	6063      	str	r3, [r4, #4]
 8007910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007912:	3302      	adds	r3, #2
 8007914:	9321      	str	r3, [sp, #132]	; 0x84
 8007916:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007918:	3301      	adds	r3, #1
 800791a:	2b07      	cmp	r3, #7
 800791c:	9320      	str	r3, [sp, #128]	; 0x80
 800791e:	dc01      	bgt.n	8007924 <_svfprintf_r+0x6b8>
 8007920:	3408      	adds	r4, #8
 8007922:	e008      	b.n	8007936 <_svfprintf_r+0x6ca>
 8007924:	aa1f      	add	r2, sp, #124	; 0x7c
 8007926:	4659      	mov	r1, fp
 8007928:	4648      	mov	r0, r9
 800792a:	f002 fcce 	bl	800a2ca <__ssprint_r>
 800792e:	2800      	cmp	r0, #0
 8007930:	f040 8314 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007934:	ac2c      	add	r4, sp, #176	; 0xb0
 8007936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007938:	2b80      	cmp	r3, #128	; 0x80
 800793a:	d139      	bne.n	80079b0 <_svfprintf_r+0x744>
 800793c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	2b00      	cmp	r3, #0
 8007944:	9310      	str	r3, [sp, #64]	; 0x40
 8007946:	dd33      	ble.n	80079b0 <_svfprintf_r+0x744>
 8007948:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800794a:	2b10      	cmp	r3, #16
 800794c:	4b6b      	ldr	r3, [pc, #428]	; (8007afc <_svfprintf_r+0x890>)
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	dd18      	ble.n	8007984 <_svfprintf_r+0x718>
 8007952:	2310      	movs	r3, #16
 8007954:	6063      	str	r3, [r4, #4]
 8007956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007958:	3310      	adds	r3, #16
 800795a:	9321      	str	r3, [sp, #132]	; 0x84
 800795c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800795e:	3301      	adds	r3, #1
 8007960:	2b07      	cmp	r3, #7
 8007962:	9320      	str	r3, [sp, #128]	; 0x80
 8007964:	dc01      	bgt.n	800796a <_svfprintf_r+0x6fe>
 8007966:	3408      	adds	r4, #8
 8007968:	e008      	b.n	800797c <_svfprintf_r+0x710>
 800796a:	aa1f      	add	r2, sp, #124	; 0x7c
 800796c:	4659      	mov	r1, fp
 800796e:	4648      	mov	r0, r9
 8007970:	f002 fcab 	bl	800a2ca <__ssprint_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	f040 82f1 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 800797a:	ac2c      	add	r4, sp, #176	; 0xb0
 800797c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800797e:	3b10      	subs	r3, #16
 8007980:	9310      	str	r3, [sp, #64]	; 0x40
 8007982:	e7e1      	b.n	8007948 <_svfprintf_r+0x6dc>
 8007984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800798a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800798c:	4413      	add	r3, r2
 800798e:	9321      	str	r3, [sp, #132]	; 0x84
 8007990:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007992:	3301      	adds	r3, #1
 8007994:	2b07      	cmp	r3, #7
 8007996:	9320      	str	r3, [sp, #128]	; 0x80
 8007998:	dc01      	bgt.n	800799e <_svfprintf_r+0x732>
 800799a:	3408      	adds	r4, #8
 800799c:	e008      	b.n	80079b0 <_svfprintf_r+0x744>
 800799e:	aa1f      	add	r2, sp, #124	; 0x7c
 80079a0:	4659      	mov	r1, fp
 80079a2:	4648      	mov	r0, r9
 80079a4:	f002 fc91 	bl	800a2ca <__ssprint_r>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f040 82d7 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 80079ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80079b0:	ebca 0606 	rsb	r6, sl, r6
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	dd2e      	ble.n	8007a16 <_svfprintf_r+0x7aa>
 80079b8:	4b50      	ldr	r3, [pc, #320]	; (8007afc <_svfprintf_r+0x890>)
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	2e10      	cmp	r6, #16
 80079be:	dd16      	ble.n	80079ee <_svfprintf_r+0x782>
 80079c0:	2310      	movs	r3, #16
 80079c2:	6063      	str	r3, [r4, #4]
 80079c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079c6:	3310      	adds	r3, #16
 80079c8:	9321      	str	r3, [sp, #132]	; 0x84
 80079ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079cc:	3301      	adds	r3, #1
 80079ce:	2b07      	cmp	r3, #7
 80079d0:	9320      	str	r3, [sp, #128]	; 0x80
 80079d2:	dc01      	bgt.n	80079d8 <_svfprintf_r+0x76c>
 80079d4:	3408      	adds	r4, #8
 80079d6:	e008      	b.n	80079ea <_svfprintf_r+0x77e>
 80079d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80079da:	4659      	mov	r1, fp
 80079dc:	4648      	mov	r0, r9
 80079de:	f002 fc74 	bl	800a2ca <__ssprint_r>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f040 82ba 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 80079e8:	ac2c      	add	r4, sp, #176	; 0xb0
 80079ea:	3e10      	subs	r6, #16
 80079ec:	e7e4      	b.n	80079b8 <_svfprintf_r+0x74c>
 80079ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079f0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80079f2:	6066      	str	r6, [r4, #4]
 80079f4:	3301      	adds	r3, #1
 80079f6:	4406      	add	r6, r0
 80079f8:	2b07      	cmp	r3, #7
 80079fa:	9621      	str	r6, [sp, #132]	; 0x84
 80079fc:	9320      	str	r3, [sp, #128]	; 0x80
 80079fe:	dc01      	bgt.n	8007a04 <_svfprintf_r+0x798>
 8007a00:	3408      	adds	r4, #8
 8007a02:	e008      	b.n	8007a16 <_svfprintf_r+0x7aa>
 8007a04:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a06:	4659      	mov	r1, fp
 8007a08:	4648      	mov	r0, r9
 8007a0a:	f002 fc5e 	bl	800a2ca <__ssprint_r>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f040 82a4 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007a14:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a16:	05eb      	lsls	r3, r5, #23
 8007a18:	d414      	bmi.n	8007a44 <_svfprintf_r+0x7d8>
 8007a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a1c:	e884 0500 	stmia.w	r4, {r8, sl}
 8007a20:	4453      	add	r3, sl
 8007a22:	9321      	str	r3, [sp, #132]	; 0x84
 8007a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a26:	3301      	adds	r3, #1
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	9320      	str	r3, [sp, #128]	; 0x80
 8007a2c:	f340 8245 	ble.w	8007eba <_svfprintf_r+0xc4e>
 8007a30:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a32:	4659      	mov	r1, fp
 8007a34:	4648      	mov	r0, r9
 8007a36:	f002 fc48 	bl	800a2ca <__ssprint_r>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f040 828e 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007a40:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a42:	e23b      	b.n	8007ebc <_svfprintf_r+0xc50>
 8007a44:	9b06      	ldr	r3, [sp, #24]
 8007a46:	2b65      	cmp	r3, #101	; 0x65
 8007a48:	f340 81ae 	ble.w	8007da8 <_svfprintf_r+0xb3c>
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a54:	f7f9 f83c 	bl	8000ad0 <__aeabi_dcmpeq>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d05e      	beq.n	8007b1a <_svfprintf_r+0x8ae>
 8007a5c:	4b28      	ldr	r3, [pc, #160]	; (8007b00 <_svfprintf_r+0x894>)
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	2301      	movs	r3, #1
 8007a62:	6063      	str	r3, [r4, #4]
 8007a64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a66:	3301      	adds	r3, #1
 8007a68:	9321      	str	r3, [sp, #132]	; 0x84
 8007a6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	2b07      	cmp	r3, #7
 8007a70:	9320      	str	r3, [sp, #128]	; 0x80
 8007a72:	dc01      	bgt.n	8007a78 <_svfprintf_r+0x80c>
 8007a74:	3408      	adds	r4, #8
 8007a76:	e008      	b.n	8007a8a <_svfprintf_r+0x81e>
 8007a78:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a7a:	4659      	mov	r1, fp
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	f002 fc24 	bl	800a2ca <__ssprint_r>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f040 826a 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007a88:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a8c:	9a08      	ldr	r2, [sp, #32]
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	db02      	blt.n	8007a98 <_svfprintf_r+0x82c>
 8007a92:	07ee      	lsls	r6, r5, #31
 8007a94:	f140 8212 	bpl.w	8007ebc <_svfprintf_r+0xc50>
 8007a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9e:	6063      	str	r3, [r4, #4]
 8007aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aa4:	4413      	add	r3, r2
 8007aa6:	9321      	str	r3, [sp, #132]	; 0x84
 8007aa8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007aaa:	3301      	adds	r3, #1
 8007aac:	2b07      	cmp	r3, #7
 8007aae:	9320      	str	r3, [sp, #128]	; 0x80
 8007ab0:	dc01      	bgt.n	8007ab6 <_svfprintf_r+0x84a>
 8007ab2:	3408      	adds	r4, #8
 8007ab4:	e008      	b.n	8007ac8 <_svfprintf_r+0x85c>
 8007ab6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ab8:	4659      	mov	r1, fp
 8007aba:	4648      	mov	r0, r9
 8007abc:	f002 fc05 	bl	800a2ca <__ssprint_r>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f040 824b 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007ac6:	ac2c      	add	r4, sp, #176	; 0xb0
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	1e5e      	subs	r6, r3, #1
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	f340 81f5 	ble.w	8007ebc <_svfprintf_r+0xc50>
 8007ad2:	4f0a      	ldr	r7, [pc, #40]	; (8007afc <_svfprintf_r+0x890>)
 8007ad4:	f04f 0810 	mov.w	r8, #16
 8007ad8:	2e10      	cmp	r6, #16
 8007ada:	f340 8159 	ble.w	8007d90 <_svfprintf_r+0xb24>
 8007ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae0:	3310      	adds	r3, #16
 8007ae2:	9321      	str	r3, [sp, #132]	; 0x84
 8007ae4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	2b07      	cmp	r3, #7
 8007aea:	e884 0180 	stmia.w	r4, {r7, r8}
 8007aee:	9320      	str	r3, [sp, #128]	; 0x80
 8007af0:	dc08      	bgt.n	8007b04 <_svfprintf_r+0x898>
 8007af2:	3408      	adds	r4, #8
 8007af4:	e00f      	b.n	8007b16 <_svfprintf_r+0x8aa>
 8007af6:	bf00      	nop
 8007af8:	0800bc4d 	.word	0x0800bc4d
 8007afc:	0800bc09 	.word	0x0800bc09
 8007b00:	0800bc4b 	.word	0x0800bc4b
 8007b04:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b06:	4659      	mov	r1, fp
 8007b08:	4648      	mov	r0, r9
 8007b0a:	f002 fbde 	bl	800a2ca <__ssprint_r>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f040 8224 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007b14:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b16:	3e10      	subs	r6, #16
 8007b18:	e7de      	b.n	8007ad8 <_svfprintf_r+0x86c>
 8007b1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dc7c      	bgt.n	8007c1a <_svfprintf_r+0x9ae>
 8007b20:	4b9f      	ldr	r3, [pc, #636]	; (8007da0 <_svfprintf_r+0xb34>)
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	2301      	movs	r3, #1
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	9321      	str	r3, [sp, #132]	; 0x84
 8007b2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b30:	3301      	adds	r3, #1
 8007b32:	2b07      	cmp	r3, #7
 8007b34:	9320      	str	r3, [sp, #128]	; 0x80
 8007b36:	dc01      	bgt.n	8007b3c <_svfprintf_r+0x8d0>
 8007b38:	3408      	adds	r4, #8
 8007b3a:	e008      	b.n	8007b4e <_svfprintf_r+0x8e2>
 8007b3c:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b3e:	4659      	mov	r1, fp
 8007b40:	4648      	mov	r0, r9
 8007b42:	f002 fbc2 	bl	800a2ca <__ssprint_r>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f040 8208 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007b4c:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b50:	b923      	cbnz	r3, 8007b5c <_svfprintf_r+0x8f0>
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	b913      	cbnz	r3, 8007b5c <_svfprintf_r+0x8f0>
 8007b56:	07e8      	lsls	r0, r5, #31
 8007b58:	f140 81b0 	bpl.w	8007ebc <_svfprintf_r+0xc50>
 8007b5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b62:	6063      	str	r3, [r4, #4]
 8007b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b68:	4413      	add	r3, r2
 8007b6a:	9321      	str	r3, [sp, #132]	; 0x84
 8007b6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b6e:	3301      	adds	r3, #1
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	9320      	str	r3, [sp, #128]	; 0x80
 8007b74:	dc02      	bgt.n	8007b7c <_svfprintf_r+0x910>
 8007b76:	f104 0308 	add.w	r3, r4, #8
 8007b7a:	e008      	b.n	8007b8e <_svfprintf_r+0x922>
 8007b7c:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b7e:	4659      	mov	r1, fp
 8007b80:	4648      	mov	r0, r9
 8007b82:	f002 fba2 	bl	800a2ca <__ssprint_r>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f040 81e8 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007b8c:	ab2c      	add	r3, sp, #176	; 0xb0
 8007b8e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007b90:	4276      	negs	r6, r6
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	dd30      	ble.n	8007bf8 <_svfprintf_r+0x98c>
 8007b96:	4f83      	ldr	r7, [pc, #524]	; (8007da4 <_svfprintf_r+0xb38>)
 8007b98:	2410      	movs	r4, #16
 8007b9a:	2e10      	cmp	r6, #16
 8007b9c:	dd16      	ble.n	8007bcc <_svfprintf_r+0x960>
 8007b9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ba0:	601f      	str	r7, [r3, #0]
 8007ba2:	3210      	adds	r2, #16
 8007ba4:	9221      	str	r2, [sp, #132]	; 0x84
 8007ba6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ba8:	605c      	str	r4, [r3, #4]
 8007baa:	3201      	adds	r2, #1
 8007bac:	2a07      	cmp	r2, #7
 8007bae:	9220      	str	r2, [sp, #128]	; 0x80
 8007bb0:	dc01      	bgt.n	8007bb6 <_svfprintf_r+0x94a>
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	e008      	b.n	8007bc8 <_svfprintf_r+0x95c>
 8007bb6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007bb8:	4659      	mov	r1, fp
 8007bba:	4648      	mov	r0, r9
 8007bbc:	f002 fb85 	bl	800a2ca <__ssprint_r>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f040 81cb 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007bc6:	ab2c      	add	r3, sp, #176	; 0xb0
 8007bc8:	3e10      	subs	r6, #16
 8007bca:	e7e6      	b.n	8007b9a <_svfprintf_r+0x92e>
 8007bcc:	4a75      	ldr	r2, [pc, #468]	; (8007da4 <_svfprintf_r+0xb38>)
 8007bce:	e883 0044 	stmia.w	r3, {r2, r6}
 8007bd2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bd4:	4416      	add	r6, r2
 8007bd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bd8:	9621      	str	r6, [sp, #132]	; 0x84
 8007bda:	3201      	adds	r2, #1
 8007bdc:	2a07      	cmp	r2, #7
 8007bde:	9220      	str	r2, [sp, #128]	; 0x80
 8007be0:	dc01      	bgt.n	8007be6 <_svfprintf_r+0x97a>
 8007be2:	3308      	adds	r3, #8
 8007be4:	e008      	b.n	8007bf8 <_svfprintf_r+0x98c>
 8007be6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007be8:	4659      	mov	r1, fp
 8007bea:	4648      	mov	r0, r9
 8007bec:	f002 fb6d 	bl	800a2ca <__ssprint_r>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f040 81b3 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007bf6:	ab2c      	add	r3, sp, #176	; 0xb0
 8007bf8:	9a08      	ldr	r2, [sp, #32]
 8007bfa:	605a      	str	r2, [r3, #4]
 8007bfc:	9908      	ldr	r1, [sp, #32]
 8007bfe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c00:	f8c3 8000 	str.w	r8, [r3]
 8007c04:	440a      	add	r2, r1
 8007c06:	9221      	str	r2, [sp, #132]	; 0x84
 8007c08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c0a:	3201      	adds	r2, #1
 8007c0c:	2a07      	cmp	r2, #7
 8007c0e:	9220      	str	r2, [sp, #128]	; 0x80
 8007c10:	f73f af0e 	bgt.w	8007a30 <_svfprintf_r+0x7c4>
 8007c14:	f103 0408 	add.w	r4, r3, #8
 8007c18:	e150      	b.n	8007ebc <_svfprintf_r+0xc50>
 8007c1a:	9b08      	ldr	r3, [sp, #32]
 8007c1c:	42bb      	cmp	r3, r7
 8007c1e:	bfa8      	it	ge
 8007c20:	463b      	movge	r3, r7
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	461e      	mov	r6, r3
 8007c26:	dd15      	ble.n	8007c54 <_svfprintf_r+0x9e8>
 8007c28:	6063      	str	r3, [r4, #4]
 8007c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c2c:	f8c4 8000 	str.w	r8, [r4]
 8007c30:	4433      	add	r3, r6
 8007c32:	9321      	str	r3, [sp, #132]	; 0x84
 8007c34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c36:	3301      	adds	r3, #1
 8007c38:	2b07      	cmp	r3, #7
 8007c3a:	9320      	str	r3, [sp, #128]	; 0x80
 8007c3c:	dc01      	bgt.n	8007c42 <_svfprintf_r+0x9d6>
 8007c3e:	3408      	adds	r4, #8
 8007c40:	e008      	b.n	8007c54 <_svfprintf_r+0x9e8>
 8007c42:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c44:	4659      	mov	r1, fp
 8007c46:	4648      	mov	r0, r9
 8007c48:	f002 fb3f 	bl	800a2ca <__ssprint_r>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	f040 8185 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007c52:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c54:	2e00      	cmp	r6, #0
 8007c56:	bfac      	ite	ge
 8007c58:	1bbe      	subge	r6, r7, r6
 8007c5a:	463e      	movlt	r6, r7
 8007c5c:	2e00      	cmp	r6, #0
 8007c5e:	dd30      	ble.n	8007cc2 <_svfprintf_r+0xa56>
 8007c60:	f04f 0a10 	mov.w	sl, #16
 8007c64:	4b4f      	ldr	r3, [pc, #316]	; (8007da4 <_svfprintf_r+0xb38>)
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	2e10      	cmp	r6, #16
 8007c6a:	dd16      	ble.n	8007c9a <_svfprintf_r+0xa2e>
 8007c6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c6e:	f8c4 a004 	str.w	sl, [r4, #4]
 8007c72:	3310      	adds	r3, #16
 8007c74:	9321      	str	r3, [sp, #132]	; 0x84
 8007c76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c78:	3301      	adds	r3, #1
 8007c7a:	2b07      	cmp	r3, #7
 8007c7c:	9320      	str	r3, [sp, #128]	; 0x80
 8007c7e:	dc01      	bgt.n	8007c84 <_svfprintf_r+0xa18>
 8007c80:	3408      	adds	r4, #8
 8007c82:	e008      	b.n	8007c96 <_svfprintf_r+0xa2a>
 8007c84:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c86:	4659      	mov	r1, fp
 8007c88:	4648      	mov	r0, r9
 8007c8a:	f002 fb1e 	bl	800a2ca <__ssprint_r>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f040 8164 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007c94:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c96:	3e10      	subs	r6, #16
 8007c98:	e7e4      	b.n	8007c64 <_svfprintf_r+0x9f8>
 8007c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c9c:	6066      	str	r6, [r4, #4]
 8007c9e:	441e      	add	r6, r3
 8007ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ca2:	9621      	str	r6, [sp, #132]	; 0x84
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	2b07      	cmp	r3, #7
 8007ca8:	9320      	str	r3, [sp, #128]	; 0x80
 8007caa:	dc01      	bgt.n	8007cb0 <_svfprintf_r+0xa44>
 8007cac:	3408      	adds	r4, #8
 8007cae:	e008      	b.n	8007cc2 <_svfprintf_r+0xa56>
 8007cb0:	aa1f      	add	r2, sp, #124	; 0x7c
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	4648      	mov	r0, r9
 8007cb6:	f002 fb08 	bl	800a2ca <__ssprint_r>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	f040 814e 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007cc0:	ac2c      	add	r4, sp, #176	; 0xb0
 8007cc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cc4:	9a08      	ldr	r2, [sp, #32]
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	4447      	add	r7, r8
 8007cca:	db01      	blt.n	8007cd0 <_svfprintf_r+0xa64>
 8007ccc:	07e9      	lsls	r1, r5, #31
 8007cce:	d517      	bpl.n	8007d00 <_svfprintf_r+0xa94>
 8007cd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd6:	6063      	str	r3, [r4, #4]
 8007cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cdc:	4413      	add	r3, r2
 8007cde:	9321      	str	r3, [sp, #132]	; 0x84
 8007ce0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	2b07      	cmp	r3, #7
 8007ce6:	9320      	str	r3, [sp, #128]	; 0x80
 8007ce8:	dc01      	bgt.n	8007cee <_svfprintf_r+0xa82>
 8007cea:	3408      	adds	r4, #8
 8007cec:	e008      	b.n	8007d00 <_svfprintf_r+0xa94>
 8007cee:	aa1f      	add	r2, sp, #124	; 0x7c
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	4648      	mov	r0, r9
 8007cf4:	f002 fae9 	bl	800a2ca <__ssprint_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	f040 812f 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007cfe:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d00:	9b08      	ldr	r3, [sp, #32]
 8007d02:	9a08      	ldr	r2, [sp, #32]
 8007d04:	eb08 0603 	add.w	r6, r8, r3
 8007d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d0a:	1bf6      	subs	r6, r6, r7
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	429e      	cmp	r6, r3
 8007d10:	bfa8      	it	ge
 8007d12:	461e      	movge	r6, r3
 8007d14:	2e00      	cmp	r6, #0
 8007d16:	dd14      	ble.n	8007d42 <_svfprintf_r+0xad6>
 8007d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d1a:	6027      	str	r7, [r4, #0]
 8007d1c:	4433      	add	r3, r6
 8007d1e:	9321      	str	r3, [sp, #132]	; 0x84
 8007d20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d22:	6066      	str	r6, [r4, #4]
 8007d24:	3301      	adds	r3, #1
 8007d26:	2b07      	cmp	r3, #7
 8007d28:	9320      	str	r3, [sp, #128]	; 0x80
 8007d2a:	dc01      	bgt.n	8007d30 <_svfprintf_r+0xac4>
 8007d2c:	3408      	adds	r4, #8
 8007d2e:	e008      	b.n	8007d42 <_svfprintf_r+0xad6>
 8007d30:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d32:	4659      	mov	r1, fp
 8007d34:	4648      	mov	r0, r9
 8007d36:	f002 fac8 	bl	800a2ca <__ssprint_r>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f040 810e 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007d40:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d44:	9a08      	ldr	r2, [sp, #32]
 8007d46:	2e00      	cmp	r6, #0
 8007d48:	eba2 0303 	sub.w	r3, r2, r3
 8007d4c:	bfac      	ite	ge
 8007d4e:	1b9e      	subge	r6, r3, r6
 8007d50:	461e      	movlt	r6, r3
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	f340 80b2 	ble.w	8007ebc <_svfprintf_r+0xc50>
 8007d58:	4f12      	ldr	r7, [pc, #72]	; (8007da4 <_svfprintf_r+0xb38>)
 8007d5a:	f04f 0810 	mov.w	r8, #16
 8007d5e:	2e10      	cmp	r6, #16
 8007d60:	dd16      	ble.n	8007d90 <_svfprintf_r+0xb24>
 8007d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d64:	3310      	adds	r3, #16
 8007d66:	9321      	str	r3, [sp, #132]	; 0x84
 8007d68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	2b07      	cmp	r3, #7
 8007d6e:	e884 0180 	stmia.w	r4, {r7, r8}
 8007d72:	9320      	str	r3, [sp, #128]	; 0x80
 8007d74:	dc01      	bgt.n	8007d7a <_svfprintf_r+0xb0e>
 8007d76:	3408      	adds	r4, #8
 8007d78:	e008      	b.n	8007d8c <_svfprintf_r+0xb20>
 8007d7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d7c:	4659      	mov	r1, fp
 8007d7e:	4648      	mov	r0, r9
 8007d80:	f002 faa3 	bl	800a2ca <__ssprint_r>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	f040 80e9 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007d8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d8c:	3e10      	subs	r6, #16
 8007d8e:	e7e6      	b.n	8007d5e <_svfprintf_r+0xaf2>
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <_svfprintf_r+0xb38>)
 8007d92:	e884 0048 	stmia.w	r4, {r3, r6}
 8007d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d98:	441e      	add	r6, r3
 8007d9a:	9621      	str	r6, [sp, #132]	; 0x84
 8007d9c:	e642      	b.n	8007a24 <_svfprintf_r+0x7b8>
 8007d9e:	bf00      	nop
 8007da0:	0800bc4b 	.word	0x0800bc4b
 8007da4:	0800bc09 	.word	0x0800bc09
 8007da8:	9b08      	ldr	r3, [sp, #32]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	dc01      	bgt.n	8007db2 <_svfprintf_r+0xb46>
 8007dae:	07ea      	lsls	r2, r5, #31
 8007db0:	d573      	bpl.n	8007e9a <_svfprintf_r+0xc2e>
 8007db2:	2301      	movs	r3, #1
 8007db4:	6063      	str	r3, [r4, #4]
 8007db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db8:	f8c4 8000 	str.w	r8, [r4]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	9321      	str	r3, [sp, #132]	; 0x84
 8007dc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	2b07      	cmp	r3, #7
 8007dc6:	9320      	str	r3, [sp, #128]	; 0x80
 8007dc8:	dc01      	bgt.n	8007dce <_svfprintf_r+0xb62>
 8007dca:	3408      	adds	r4, #8
 8007dcc:	e008      	b.n	8007de0 <_svfprintf_r+0xb74>
 8007dce:	aa1f      	add	r2, sp, #124	; 0x7c
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	4648      	mov	r0, r9
 8007dd4:	f002 fa79 	bl	800a2ca <__ssprint_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f040 80bf 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007dde:	ac2c      	add	r4, sp, #176	; 0xb0
 8007de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de6:	6063      	str	r3, [r4, #4]
 8007de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dec:	4413      	add	r3, r2
 8007dee:	9321      	str	r3, [sp, #132]	; 0x84
 8007df0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007df2:	3301      	adds	r3, #1
 8007df4:	2b07      	cmp	r3, #7
 8007df6:	9320      	str	r3, [sp, #128]	; 0x80
 8007df8:	dc01      	bgt.n	8007dfe <_svfprintf_r+0xb92>
 8007dfa:	3408      	adds	r4, #8
 8007dfc:	e008      	b.n	8007e10 <_svfprintf_r+0xba4>
 8007dfe:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e00:	4659      	mov	r1, fp
 8007e02:	4648      	mov	r0, r9
 8007e04:	f002 fa61 	bl	800a2ca <__ssprint_r>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	f040 80a7 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007e0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e10:	2300      	movs	r3, #0
 8007e12:	2200      	movs	r2, #0
 8007e14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e18:	f7f8 fe5a 	bl	8000ad0 <__aeabi_dcmpeq>
 8007e1c:	9b08      	ldr	r3, [sp, #32]
 8007e1e:	1e5e      	subs	r6, r3, #1
 8007e20:	b9b8      	cbnz	r0, 8007e52 <_svfprintf_r+0xbe6>
 8007e22:	f108 0301 	add.w	r3, r8, #1
 8007e26:	e884 0048 	stmia.w	r4, {r3, r6}
 8007e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e2c:	9a08      	ldr	r2, [sp, #32]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	4413      	add	r3, r2
 8007e32:	9321      	str	r3, [sp, #132]	; 0x84
 8007e34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e36:	3301      	adds	r3, #1
 8007e38:	2b07      	cmp	r3, #7
 8007e3a:	9320      	str	r3, [sp, #128]	; 0x80
 8007e3c:	dd34      	ble.n	8007ea8 <_svfprintf_r+0xc3c>
 8007e3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e40:	4659      	mov	r1, fp
 8007e42:	4648      	mov	r0, r9
 8007e44:	f002 fa41 	bl	800a2ca <__ssprint_r>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f040 8087 	bne.w	8007f5c <_svfprintf_r+0xcf0>
 8007e4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e50:	e02b      	b.n	8007eaa <_svfprintf_r+0xc3e>
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	dd29      	ble.n	8007eaa <_svfprintf_r+0xc3e>
 8007e56:	4f8f      	ldr	r7, [pc, #572]	; (8008094 <_svfprintf_r+0xe28>)
 8007e58:	f04f 0810 	mov.w	r8, #16
 8007e5c:	2e10      	cmp	r6, #16
 8007e5e:	dd15      	ble.n	8007e8c <_svfprintf_r+0xc20>
 8007e60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e62:	3310      	adds	r3, #16
 8007e64:	9321      	str	r3, [sp, #132]	; 0x84
 8007e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e68:	3301      	adds	r3, #1
 8007e6a:	2b07      	cmp	r3, #7
 8007e6c:	e884 0180 	stmia.w	r4, {r7, r8}
 8007e70:	9320      	str	r3, [sp, #128]	; 0x80
 8007e72:	dc01      	bgt.n	8007e78 <_svfprintf_r+0xc0c>
 8007e74:	3408      	adds	r4, #8
 8007e76:	e007      	b.n	8007e88 <_svfprintf_r+0xc1c>
 8007e78:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e7a:	4659      	mov	r1, fp
 8007e7c:	4648      	mov	r0, r9
 8007e7e:	f002 fa24 	bl	800a2ca <__ssprint_r>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d16a      	bne.n	8007f5c <_svfprintf_r+0xcf0>
 8007e86:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e88:	3e10      	subs	r6, #16
 8007e8a:	e7e7      	b.n	8007e5c <_svfprintf_r+0xbf0>
 8007e8c:	4b81      	ldr	r3, [pc, #516]	; (8008094 <_svfprintf_r+0xe28>)
 8007e8e:	e884 0048 	stmia.w	r4, {r3, r6}
 8007e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e94:	441e      	add	r6, r3
 8007e96:	9621      	str	r6, [sp, #132]	; 0x84
 8007e98:	e7cc      	b.n	8007e34 <_svfprintf_r+0xbc8>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	6063      	str	r3, [r4, #4]
 8007e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea0:	f8c4 8000 	str.w	r8, [r4]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	e7c4      	b.n	8007e32 <_svfprintf_r+0xbc6>
 8007ea8:	3408      	adds	r4, #8
 8007eaa:	ab1b      	add	r3, sp, #108	; 0x6c
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007eb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eb6:	4413      	add	r3, r2
 8007eb8:	e5b3      	b.n	8007a22 <_svfprintf_r+0x7b6>
 8007eba:	3408      	adds	r4, #8
 8007ebc:	076b      	lsls	r3, r5, #29
 8007ebe:	d40b      	bmi.n	8007ed8 <_svfprintf_r+0xc6c>
 8007ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ec4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ec6:	428a      	cmp	r2, r1
 8007ec8:	bfac      	ite	ge
 8007eca:	189b      	addge	r3, r3, r2
 8007ecc:	185b      	addlt	r3, r3, r1
 8007ece:	930e      	str	r3, [sp, #56]	; 0x38
 8007ed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d035      	beq.n	8007f42 <_svfprintf_r+0xcd6>
 8007ed6:	e02e      	b.n	8007f36 <_svfprintf_r+0xcca>
 8007ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007edc:	1a9d      	subs	r5, r3, r2
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	ddee      	ble.n	8007ec0 <_svfprintf_r+0xc54>
 8007ee2:	2610      	movs	r6, #16
 8007ee4:	4b6c      	ldr	r3, [pc, #432]	; (8008098 <_svfprintf_r+0xe2c>)
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	2d10      	cmp	r5, #16
 8007eea:	dd13      	ble.n	8007f14 <_svfprintf_r+0xca8>
 8007eec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eee:	6066      	str	r6, [r4, #4]
 8007ef0:	3310      	adds	r3, #16
 8007ef2:	9321      	str	r3, [sp, #132]	; 0x84
 8007ef4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	2b07      	cmp	r3, #7
 8007efa:	9320      	str	r3, [sp, #128]	; 0x80
 8007efc:	dc01      	bgt.n	8007f02 <_svfprintf_r+0xc96>
 8007efe:	3408      	adds	r4, #8
 8007f00:	e006      	b.n	8007f10 <_svfprintf_r+0xca4>
 8007f02:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f04:	4659      	mov	r1, fp
 8007f06:	4648      	mov	r0, r9
 8007f08:	f002 f9df 	bl	800a2ca <__ssprint_r>
 8007f0c:	bb30      	cbnz	r0, 8007f5c <_svfprintf_r+0xcf0>
 8007f0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007f10:	3d10      	subs	r5, #16
 8007f12:	e7e7      	b.n	8007ee4 <_svfprintf_r+0xc78>
 8007f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f16:	6065      	str	r5, [r4, #4]
 8007f18:	441d      	add	r5, r3
 8007f1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f1c:	9521      	str	r5, [sp, #132]	; 0x84
 8007f1e:	3301      	adds	r3, #1
 8007f20:	2b07      	cmp	r3, #7
 8007f22:	9320      	str	r3, [sp, #128]	; 0x80
 8007f24:	ddcc      	ble.n	8007ec0 <_svfprintf_r+0xc54>
 8007f26:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f28:	4659      	mov	r1, fp
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f002 f9cd 	bl	800a2ca <__ssprint_r>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d0c5      	beq.n	8007ec0 <_svfprintf_r+0xc54>
 8007f34:	e012      	b.n	8007f5c <_svfprintf_r+0xcf0>
 8007f36:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f38:	4659      	mov	r1, fp
 8007f3a:	4648      	mov	r0, r9
 8007f3c:	f002 f9c5 	bl	800a2ca <__ssprint_r>
 8007f40:	b960      	cbnz	r0, 8007f5c <_svfprintf_r+0xcf0>
 8007f42:	2300      	movs	r3, #0
 8007f44:	9320      	str	r3, [sp, #128]	; 0x80
 8007f46:	9f07      	ldr	r7, [sp, #28]
 8007f48:	ac2c      	add	r4, sp, #176	; 0xb0
 8007f4a:	f7ff b9c3 	b.w	80072d4 <_svfprintf_r+0x68>
 8007f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f50:	b123      	cbz	r3, 8007f5c <_svfprintf_r+0xcf0>
 8007f52:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f54:	4659      	mov	r1, fp
 8007f56:	4648      	mov	r0, r9
 8007f58:	f002 f9b7 	bl	800a2ca <__ssprint_r>
 8007f5c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8007f60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f66:	bf18      	it	ne
 8007f68:	f04f 33ff 	movne.w	r3, #4294967295
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	e12e      	b.n	80081ce <_svfprintf_r+0xf62>
 8007f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f78:	f7f8 fddc 	bl	8000b34 <__aeabi_dcmpun>
 8007f7c:	b160      	cbz	r0, 8007f98 <_svfprintf_r+0xd2c>
 8007f7e:	4b47      	ldr	r3, [pc, #284]	; (800809c <_svfprintf_r+0xe30>)
 8007f80:	4a47      	ldr	r2, [pc, #284]	; (80080a0 <_svfprintf_r+0xe34>)
 8007f82:	9906      	ldr	r1, [sp, #24]
 8007f84:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007f88:	2947      	cmp	r1, #71	; 0x47
 8007f8a:	bfcc      	ite	gt
 8007f8c:	4690      	movgt	r8, r2
 8007f8e:	4698      	movle	r8, r3
 8007f90:	f04f 0a03 	mov.w	sl, #3
 8007f94:	2600      	movs	r6, #0
 8007f96:	e449      	b.n	800782c <_svfprintf_r+0x5c0>
 8007f98:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007f9c:	d00a      	beq.n	8007fb4 <_svfprintf_r+0xd48>
 8007f9e:	9b06      	ldr	r3, [sp, #24]
 8007fa0:	f023 0320 	bic.w	r3, r3, #32
 8007fa4:	2b47      	cmp	r3, #71	; 0x47
 8007fa6:	d107      	bne.n	8007fb8 <_svfprintf_r+0xd4c>
 8007fa8:	f1ba 0f00 	cmp.w	sl, #0
 8007fac:	bf08      	it	eq
 8007fae:	f04f 0a01 	moveq.w	sl, #1
 8007fb2:	e001      	b.n	8007fb8 <_svfprintf_r+0xd4c>
 8007fb4:	f04f 0a06 	mov.w	sl, #6
 8007fb8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8007fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8007fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc0:	1e1f      	subs	r7, r3, #0
 8007fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fc6:	bfbd      	ittte	lt
 8007fc8:	463b      	movlt	r3, r7
 8007fca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007fce:	9310      	strlt	r3, [sp, #64]	; 0x40
 8007fd0:	2300      	movge	r3, #0
 8007fd2:	bfb8      	it	lt
 8007fd4:	232d      	movlt	r3, #45	; 0x2d
 8007fd6:	9314      	str	r3, [sp, #80]	; 0x50
 8007fd8:	9b06      	ldr	r3, [sp, #24]
 8007fda:	bfa8      	it	ge
 8007fdc:	9710      	strge	r7, [sp, #64]	; 0x40
 8007fde:	f023 0720 	bic.w	r7, r3, #32
 8007fe2:	2f46      	cmp	r7, #70	; 0x46
 8007fe4:	d004      	beq.n	8007ff0 <_svfprintf_r+0xd84>
 8007fe6:	2f45      	cmp	r7, #69	; 0x45
 8007fe8:	d105      	bne.n	8007ff6 <_svfprintf_r+0xd8a>
 8007fea:	f10a 0601 	add.w	r6, sl, #1
 8007fee:	e003      	b.n	8007ff8 <_svfprintf_r+0xd8c>
 8007ff0:	4656      	mov	r6, sl
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e001      	b.n	8007ffa <_svfprintf_r+0xd8e>
 8007ff6:	4656      	mov	r6, sl
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	aa1d      	add	r2, sp, #116	; 0x74
 8007ffc:	9204      	str	r2, [sp, #16]
 8007ffe:	aa1a      	add	r2, sp, #104	; 0x68
 8008000:	9203      	str	r2, [sp, #12]
 8008002:	aa19      	add	r2, sp, #100	; 0x64
 8008004:	9202      	str	r2, [sp, #8]
 8008006:	e88d 0048 	stmia.w	sp, {r3, r6}
 800800a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800800c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800800e:	4648      	mov	r0, r9
 8008010:	f000 f976 	bl	8008300 <_dtoa_r>
 8008014:	2f47      	cmp	r7, #71	; 0x47
 8008016:	4680      	mov	r8, r0
 8008018:	d102      	bne.n	8008020 <_svfprintf_r+0xdb4>
 800801a:	07eb      	lsls	r3, r5, #31
 800801c:	f140 80cd 	bpl.w	80081ba <_svfprintf_r+0xf4e>
 8008020:	eb08 0306 	add.w	r3, r8, r6
 8008024:	2f46      	cmp	r7, #70	; 0x46
 8008026:	9308      	str	r3, [sp, #32]
 8008028:	d111      	bne.n	800804e <_svfprintf_r+0xde2>
 800802a:	f898 3000 	ldrb.w	r3, [r8]
 800802e:	2b30      	cmp	r3, #48	; 0x30
 8008030:	d109      	bne.n	8008046 <_svfprintf_r+0xdda>
 8008032:	2200      	movs	r2, #0
 8008034:	2300      	movs	r3, #0
 8008036:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008038:	9910      	ldr	r1, [sp, #64]	; 0x40
 800803a:	f7f8 fd49 	bl	8000ad0 <__aeabi_dcmpeq>
 800803e:	b910      	cbnz	r0, 8008046 <_svfprintf_r+0xdda>
 8008040:	f1c6 0601 	rsb	r6, r6, #1
 8008044:	9619      	str	r6, [sp, #100]	; 0x64
 8008046:	9a08      	ldr	r2, [sp, #32]
 8008048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800804a:	441a      	add	r2, r3
 800804c:	9208      	str	r2, [sp, #32]
 800804e:	2200      	movs	r2, #0
 8008050:	2300      	movs	r3, #0
 8008052:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008054:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008056:	f7f8 fd3b 	bl	8000ad0 <__aeabi_dcmpeq>
 800805a:	b908      	cbnz	r0, 8008060 <_svfprintf_r+0xdf4>
 800805c:	2230      	movs	r2, #48	; 0x30
 800805e:	e002      	b.n	8008066 <_svfprintf_r+0xdfa>
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	931d      	str	r3, [sp, #116]	; 0x74
 8008064:	e007      	b.n	8008076 <_svfprintf_r+0xe0a>
 8008066:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008068:	9908      	ldr	r1, [sp, #32]
 800806a:	4299      	cmp	r1, r3
 800806c:	d903      	bls.n	8008076 <_svfprintf_r+0xe0a>
 800806e:	1c59      	adds	r1, r3, #1
 8008070:	911d      	str	r1, [sp, #116]	; 0x74
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e7f7      	b.n	8008066 <_svfprintf_r+0xdfa>
 8008076:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008078:	2f47      	cmp	r7, #71	; 0x47
 800807a:	ebc8 0303 	rsb	r3, r8, r3
 800807e:	9308      	str	r3, [sp, #32]
 8008080:	d110      	bne.n	80080a4 <_svfprintf_r+0xe38>
 8008082:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008084:	1cdf      	adds	r7, r3, #3
 8008086:	db01      	blt.n	800808c <_svfprintf_r+0xe20>
 8008088:	459a      	cmp	sl, r3
 800808a:	da68      	bge.n	800815e <_svfprintf_r+0xef2>
 800808c:	9b06      	ldr	r3, [sp, #24]
 800808e:	3b02      	subs	r3, #2
 8008090:	9306      	str	r3, [sp, #24]
 8008092:	e00a      	b.n	80080aa <_svfprintf_r+0xe3e>
 8008094:	0800bc09 	.word	0x0800bc09
 8008098:	0800bc4d 	.word	0x0800bc4d
 800809c:	0800bc21 	.word	0x0800bc21
 80080a0:	0800bc25 	.word	0x0800bc25
 80080a4:	9b06      	ldr	r3, [sp, #24]
 80080a6:	2b65      	cmp	r3, #101	; 0x65
 80080a8:	dc42      	bgt.n	8008130 <_svfprintf_r+0xec4>
 80080aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080ac:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80080b0:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 80080b4:	3b01      	subs	r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	9319      	str	r3, [sp, #100]	; 0x64
 80080ba:	bfba      	itte	lt
 80080bc:	425b      	neglt	r3, r3
 80080be:	222d      	movlt	r2, #45	; 0x2d
 80080c0:	222b      	movge	r2, #43	; 0x2b
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80080c8:	dd1c      	ble.n	8008104 <_svfprintf_r+0xe98>
 80080ca:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80080ce:	200a      	movs	r0, #10
 80080d0:	fb93 f1f0 	sdiv	r1, r3, r0
 80080d4:	fb00 3311 	mls	r3, r0, r1, r3
 80080d8:	3330      	adds	r3, #48	; 0x30
 80080da:	2909      	cmp	r1, #9
 80080dc:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80080e0:	460b      	mov	r3, r1
 80080e2:	dcf5      	bgt.n	80080d0 <_svfprintf_r+0xe64>
 80080e4:	3330      	adds	r3, #48	; 0x30
 80080e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80080ea:	1e51      	subs	r1, r2, #1
 80080ec:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80080f0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80080f4:	4281      	cmp	r1, r0
 80080f6:	461a      	mov	r2, r3
 80080f8:	d20b      	bcs.n	8008112 <_svfprintf_r+0xea6>
 80080fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080fe:	f803 2b01 	strb.w	r2, [r3], #1
 8008102:	e7f7      	b.n	80080f4 <_svfprintf_r+0xe88>
 8008104:	2230      	movs	r2, #48	; 0x30
 8008106:	4413      	add	r3, r2
 8008108:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800810c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008110:	aa1c      	add	r2, sp, #112	; 0x70
 8008112:	ab1b      	add	r3, sp, #108	; 0x6c
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	9a08      	ldr	r2, [sp, #32]
 8008118:	9312      	str	r3, [sp, #72]	; 0x48
 800811a:	2a01      	cmp	r2, #1
 800811c:	eb03 0a02 	add.w	sl, r3, r2
 8008120:	dc02      	bgt.n	8008128 <_svfprintf_r+0xebc>
 8008122:	f015 0701 	ands.w	r7, r5, #1
 8008126:	d032      	beq.n	800818e <_svfprintf_r+0xf22>
 8008128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812a:	2700      	movs	r7, #0
 800812c:	449a      	add	sl, r3
 800812e:	e02e      	b.n	800818e <_svfprintf_r+0xf22>
 8008130:	9b06      	ldr	r3, [sp, #24]
 8008132:	2b66      	cmp	r3, #102	; 0x66
 8008134:	d113      	bne.n	800815e <_svfprintf_r+0xef2>
 8008136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008138:	2b00      	cmp	r3, #0
 800813a:	dd07      	ble.n	800814c <_svfprintf_r+0xee0>
 800813c:	f1ba 0f00 	cmp.w	sl, #0
 8008140:	d101      	bne.n	8008146 <_svfprintf_r+0xeda>
 8008142:	07ee      	lsls	r6, r5, #31
 8008144:	d521      	bpl.n	800818a <_svfprintf_r+0xf1e>
 8008146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008148:	4413      	add	r3, r2
 800814a:	e006      	b.n	800815a <_svfprintf_r+0xeee>
 800814c:	f1ba 0f00 	cmp.w	sl, #0
 8008150:	d101      	bne.n	8008156 <_svfprintf_r+0xeea>
 8008152:	07ed      	lsls	r5, r5, #31
 8008154:	d514      	bpl.n	8008180 <_svfprintf_r+0xf14>
 8008156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008158:	3301      	adds	r3, #1
 800815a:	4453      	add	r3, sl
 800815c:	e015      	b.n	800818a <_svfprintf_r+0xf1e>
 800815e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008160:	9a08      	ldr	r2, [sp, #32]
 8008162:	4293      	cmp	r3, r2
 8008164:	db03      	blt.n	800816e <_svfprintf_r+0xf02>
 8008166:	07e8      	lsls	r0, r5, #31
 8008168:	d50d      	bpl.n	8008186 <_svfprintf_r+0xf1a>
 800816a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800816c:	e006      	b.n	800817c <_svfprintf_r+0xf10>
 800816e:	9a08      	ldr	r2, [sp, #32]
 8008170:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008172:	2b00      	cmp	r3, #0
 8008174:	440a      	add	r2, r1
 8008176:	dc05      	bgt.n	8008184 <_svfprintf_r+0xf18>
 8008178:	f1c3 0301 	rsb	r3, r3, #1
 800817c:	4413      	add	r3, r2
 800817e:	e002      	b.n	8008186 <_svfprintf_r+0xf1a>
 8008180:	2301      	movs	r3, #1
 8008182:	e002      	b.n	800818a <_svfprintf_r+0xf1e>
 8008184:	4613      	mov	r3, r2
 8008186:	2267      	movs	r2, #103	; 0x67
 8008188:	9206      	str	r2, [sp, #24]
 800818a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800818c:	469a      	mov	sl, r3
 800818e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008190:	b113      	cbz	r3, 8008198 <_svfprintf_r+0xf2c>
 8008192:	232d      	movs	r3, #45	; 0x2d
 8008194:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008198:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800819a:	2600      	movs	r6, #0
 800819c:	f7ff bb47 	b.w	800782e <_svfprintf_r+0x5c2>
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081a8:	f7f8 fc9c 	bl	8000ae4 <__aeabi_dcmplt>
 80081ac:	b110      	cbz	r0, 80081b4 <_svfprintf_r+0xf48>
 80081ae:	232d      	movs	r3, #45	; 0x2d
 80081b0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80081b4:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <_svfprintf_r+0xf68>)
 80081b6:	4a08      	ldr	r2, [pc, #32]	; (80081d8 <_svfprintf_r+0xf6c>)
 80081b8:	e6e3      	b.n	8007f82 <_svfprintf_r+0xd16>
 80081ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081bc:	1a1b      	subs	r3, r3, r0
 80081be:	9308      	str	r3, [sp, #32]
 80081c0:	e75f      	b.n	8008082 <_svfprintf_r+0xe16>
 80081c2:	ea56 0207 	orrs.w	r2, r6, r7
 80081c6:	f47f aaab 	bne.w	8007720 <_svfprintf_r+0x4b4>
 80081ca:	f7ff bab0 	b.w	800772e <_svfprintf_r+0x4c2>
 80081ce:	b03d      	add	sp, #244	; 0xf4
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	0800bc19 	.word	0x0800bc19
 80081d8:	0800bc1d 	.word	0x0800bc1d

080081dc <quorem>:
 80081dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	6903      	ldr	r3, [r0, #16]
 80081e2:	690c      	ldr	r4, [r1, #16]
 80081e4:	429c      	cmp	r4, r3
 80081e6:	4680      	mov	r8, r0
 80081e8:	f300 8083 	bgt.w	80082f2 <quorem+0x116>
 80081ec:	3c01      	subs	r4, #1
 80081ee:	f101 0714 	add.w	r7, r1, #20
 80081f2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80081f6:	f100 0614 	add.w	r6, r0, #20
 80081fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80081fe:	eb06 030e 	add.w	r3, r6, lr
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	3501      	adds	r5, #1
 8008206:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800820a:	fbb3 f5f5 	udiv	r5, r3, r5
 800820e:	eb07 090e 	add.w	r9, r7, lr
 8008212:	2d00      	cmp	r5, #0
 8008214:	d039      	beq.n	800828a <quorem+0xae>
 8008216:	f04f 0a00 	mov.w	sl, #0
 800821a:	4638      	mov	r0, r7
 800821c:	46b4      	mov	ip, r6
 800821e:	46d3      	mov	fp, sl
 8008220:	f850 2b04 	ldr.w	r2, [r0], #4
 8008224:	b293      	uxth	r3, r2
 8008226:	fb05 a303 	mla	r3, r5, r3, sl
 800822a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800822e:	b29b      	uxth	r3, r3
 8008230:	ebc3 030b 	rsb	r3, r3, fp
 8008234:	0c12      	lsrs	r2, r2, #16
 8008236:	f8bc b000 	ldrh.w	fp, [ip]
 800823a:	fb05 a202 	mla	r2, r5, r2, sl
 800823e:	fa13 f38b 	uxtah	r3, r3, fp
 8008242:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008246:	fa1f fb82 	uxth.w	fp, r2
 800824a:	f8dc 2000 	ldr.w	r2, [ip]
 800824e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008252:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008256:	b29b      	uxth	r3, r3
 8008258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800825c:	4581      	cmp	r9, r0
 800825e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008262:	f84c 3b04 	str.w	r3, [ip], #4
 8008266:	d2db      	bcs.n	8008220 <quorem+0x44>
 8008268:	f856 300e 	ldr.w	r3, [r6, lr]
 800826c:	b96b      	cbnz	r3, 800828a <quorem+0xae>
 800826e:	9b01      	ldr	r3, [sp, #4]
 8008270:	3b04      	subs	r3, #4
 8008272:	429e      	cmp	r6, r3
 8008274:	461a      	mov	r2, r3
 8008276:	d302      	bcc.n	800827e <quorem+0xa2>
 8008278:	f8c8 4010 	str.w	r4, [r8, #16]
 800827c:	e005      	b.n	800828a <quorem+0xae>
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	3b04      	subs	r3, #4
 8008282:	2a00      	cmp	r2, #0
 8008284:	d1f8      	bne.n	8008278 <quorem+0x9c>
 8008286:	3c01      	subs	r4, #1
 8008288:	e7f3      	b.n	8008272 <quorem+0x96>
 800828a:	4640      	mov	r0, r8
 800828c:	f001 fd59 	bl	8009d42 <__mcmp>
 8008290:	2800      	cmp	r0, #0
 8008292:	db2c      	blt.n	80082ee <quorem+0x112>
 8008294:	3501      	adds	r5, #1
 8008296:	4630      	mov	r0, r6
 8008298:	f04f 0e00 	mov.w	lr, #0
 800829c:	f857 1b04 	ldr.w	r1, [r7], #4
 80082a0:	f8d0 c000 	ldr.w	ip, [r0]
 80082a4:	b28a      	uxth	r2, r1
 80082a6:	ebc2 030e 	rsb	r3, r2, lr
 80082aa:	0c09      	lsrs	r1, r1, #16
 80082ac:	fa13 f38c 	uxtah	r3, r3, ip
 80082b0:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 80082b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082be:	45b9      	cmp	r9, r7
 80082c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80082c4:	f840 3b04 	str.w	r3, [r0], #4
 80082c8:	d2e8      	bcs.n	800829c <quorem+0xc0>
 80082ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80082ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80082d2:	b962      	cbnz	r2, 80082ee <quorem+0x112>
 80082d4:	3b04      	subs	r3, #4
 80082d6:	429e      	cmp	r6, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	d302      	bcc.n	80082e2 <quorem+0x106>
 80082dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80082e0:	e005      	b.n	80082ee <quorem+0x112>
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	d1f8      	bne.n	80082dc <quorem+0x100>
 80082ea:	3c01      	subs	r4, #1
 80082ec:	e7f3      	b.n	80082d6 <quorem+0xfa>
 80082ee:	4628      	mov	r0, r5
 80082f0:	e000      	b.n	80082f4 <quorem+0x118>
 80082f2:	2000      	movs	r0, #0
 80082f4:	b003      	add	sp, #12
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	0000      	movs	r0, r0
 80082fc:	0000      	movs	r0, r0
	...

08008300 <_dtoa_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008306:	b095      	sub	sp, #84	; 0x54
 8008308:	4682      	mov	sl, r0
 800830a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800830c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008310:	b945      	cbnz	r5, 8008324 <_dtoa_r+0x24>
 8008312:	2010      	movs	r0, #16
 8008314:	f001 f8c2 	bl	800949c <malloc>
 8008318:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800831c:	6045      	str	r5, [r0, #4]
 800831e:	6085      	str	r5, [r0, #8]
 8008320:	6005      	str	r5, [r0, #0]
 8008322:	60c5      	str	r5, [r0, #12]
 8008324:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008328:	6819      	ldr	r1, [r3, #0]
 800832a:	b159      	cbz	r1, 8008344 <_dtoa_r+0x44>
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	604a      	str	r2, [r1, #4]
 8008330:	2301      	movs	r3, #1
 8008332:	4093      	lsls	r3, r2
 8008334:	608b      	str	r3, [r1, #8]
 8008336:	4650      	mov	r0, sl
 8008338:	f001 fb2a 	bl	8009990 <_Bfree>
 800833c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	4aa0      	ldr	r2, [pc, #640]	; (80085c8 <_dtoa_r+0x2c8>)
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfbf      	itttt	lt
 800834c:	2301      	movlt	r3, #1
 800834e:	6023      	strlt	r3, [r4, #0]
 8008350:	9b03      	ldrlt	r3, [sp, #12]
 8008352:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008356:	bfb8      	it	lt
 8008358:	9303      	strlt	r3, [sp, #12]
 800835a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800835e:	bfa4      	itt	ge
 8008360:	2300      	movge	r3, #0
 8008362:	6023      	strge	r3, [r4, #0]
 8008364:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008368:	0d1b      	lsrs	r3, r3, #20
 800836a:	051b      	lsls	r3, r3, #20
 800836c:	4293      	cmp	r3, r2
 800836e:	d11d      	bne.n	80083ac <_dtoa_r+0xac>
 8008370:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008372:	f242 730f 	movw	r3, #9999	; 0x270f
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	b943      	cbnz	r3, 800838e <_dtoa_r+0x8e>
 800837c:	4a93      	ldr	r2, [pc, #588]	; (80085cc <_dtoa_r+0x2cc>)
 800837e:	4b94      	ldr	r3, [pc, #592]	; (80085d0 <_dtoa_r+0x2d0>)
 8008380:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008384:	2800      	cmp	r0, #0
 8008386:	bf14      	ite	ne
 8008388:	4618      	movne	r0, r3
 800838a:	4610      	moveq	r0, r2
 800838c:	e000      	b.n	8008390 <_dtoa_r+0x90>
 800838e:	4890      	ldr	r0, [pc, #576]	; (80085d0 <_dtoa_r+0x2d0>)
 8008390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 854a 	beq.w	8008e2c <_dtoa_r+0xb2c>
 8008398:	78c3      	ldrb	r3, [r0, #3]
 800839a:	b113      	cbz	r3, 80083a2 <_dtoa_r+0xa2>
 800839c:	f100 0308 	add.w	r3, r0, #8
 80083a0:	e000      	b.n	80083a4 <_dtoa_r+0xa4>
 80083a2:	1cc3      	adds	r3, r0, #3
 80083a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	f000 bd40 	b.w	8008e2c <_dtoa_r+0xb2c>
 80083ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	4620      	mov	r0, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	f7f8 fb8a 	bl	8000ad0 <__aeabi_dcmpeq>
 80083bc:	4607      	mov	r7, r0
 80083be:	b158      	cbz	r0, 80083d8 <_dtoa_r+0xd8>
 80083c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083c2:	2301      	movs	r3, #1
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8522 	beq.w	8008e12 <_dtoa_r+0xb12>
 80083ce:	4881      	ldr	r0, [pc, #516]	; (80085d4 <_dtoa_r+0x2d4>)
 80083d0:	6018      	str	r0, [r3, #0]
 80083d2:	3801      	subs	r0, #1
 80083d4:	f000 bd2a 	b.w	8008e2c <_dtoa_r+0xb2c>
 80083d8:	ab12      	add	r3, sp, #72	; 0x48
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	ab13      	add	r3, sp, #76	; 0x4c
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	4622      	mov	r2, r4
 80083e2:	462b      	mov	r3, r5
 80083e4:	4650      	mov	r0, sl
 80083e6:	f001 fd27 	bl	8009e38 <__d2b>
 80083ea:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80083ee:	9004      	str	r0, [sp, #16]
 80083f0:	b156      	cbz	r6, 8008408 <_dtoa_r+0x108>
 80083f2:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80083f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80083fa:	4620      	mov	r0, r4
 80083fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008400:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8008404:	9711      	str	r7, [sp, #68]	; 0x44
 8008406:	e01d      	b.n	8008444 <_dtoa_r+0x144>
 8008408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800840a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800840c:	441e      	add	r6, r3
 800840e:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8008412:	2b20      	cmp	r3, #32
 8008414:	dd0a      	ble.n	800842c <_dtoa_r+0x12c>
 8008416:	9a02      	ldr	r2, [sp, #8]
 8008418:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800841c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008420:	fa22 f000 	lsr.w	r0, r2, r0
 8008424:	fa08 f303 	lsl.w	r3, r8, r3
 8008428:	4318      	orrs	r0, r3
 800842a:	e004      	b.n	8008436 <_dtoa_r+0x136>
 800842c:	f1c3 0020 	rsb	r0, r3, #32
 8008430:	9b02      	ldr	r3, [sp, #8]
 8008432:	fa03 f000 	lsl.w	r0, r3, r0
 8008436:	f7f8 f86d 	bl	8000514 <__aeabi_ui2d>
 800843a:	2301      	movs	r3, #1
 800843c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008440:	3e01      	subs	r6, #1
 8008442:	9311      	str	r3, [sp, #68]	; 0x44
 8008444:	2200      	movs	r2, #0
 8008446:	4b64      	ldr	r3, [pc, #400]	; (80085d8 <_dtoa_r+0x2d8>)
 8008448:	f7f7 ff26 	bl	8000298 <__aeabi_dsub>
 800844c:	a358      	add	r3, pc, #352	; (adr r3, 80085b0 <_dtoa_r+0x2b0>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f7f8 f8d5 	bl	8000600 <__aeabi_dmul>
 8008456:	a358      	add	r3, pc, #352	; (adr r3, 80085b8 <_dtoa_r+0x2b8>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f7 ff1e 	bl	800029c <__adddf3>
 8008460:	4604      	mov	r4, r0
 8008462:	4630      	mov	r0, r6
 8008464:	460d      	mov	r5, r1
 8008466:	f7f8 f865 	bl	8000534 <__aeabi_i2d>
 800846a:	a355      	add	r3, pc, #340	; (adr r3, 80085c0 <_dtoa_r+0x2c0>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f8 f8c6 	bl	8000600 <__aeabi_dmul>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f7 ff0e 	bl	800029c <__adddf3>
 8008480:	4604      	mov	r4, r0
 8008482:	460d      	mov	r5, r1
 8008484:	f7f8 fb6c 	bl	8000b60 <__aeabi_d2iz>
 8008488:	2200      	movs	r2, #0
 800848a:	4683      	mov	fp, r0
 800848c:	2300      	movs	r3, #0
 800848e:	4620      	mov	r0, r4
 8008490:	4629      	mov	r1, r5
 8008492:	f7f8 fb27 	bl	8000ae4 <__aeabi_dcmplt>
 8008496:	b158      	cbz	r0, 80084b0 <_dtoa_r+0x1b0>
 8008498:	4658      	mov	r0, fp
 800849a:	f7f8 f84b 	bl	8000534 <__aeabi_i2d>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4620      	mov	r0, r4
 80084a4:	4629      	mov	r1, r5
 80084a6:	f7f8 fb13 	bl	8000ad0 <__aeabi_dcmpeq>
 80084aa:	b908      	cbnz	r0, 80084b0 <_dtoa_r+0x1b0>
 80084ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084b0:	f1bb 0f16 	cmp.w	fp, #22
 80084b4:	d80d      	bhi.n	80084d2 <_dtoa_r+0x1d2>
 80084b6:	4949      	ldr	r1, [pc, #292]	; (80085dc <_dtoa_r+0x2dc>)
 80084b8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80084bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c4:	f7f8 fb2c 	bl	8000b20 <__aeabi_dcmpgt>
 80084c8:	b130      	cbz	r0, 80084d8 <_dtoa_r+0x1d8>
 80084ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084ce:	2300      	movs	r3, #0
 80084d0:	e000      	b.n	80084d4 <_dtoa_r+0x1d4>
 80084d2:	2301      	movs	r3, #1
 80084d4:	9310      	str	r3, [sp, #64]	; 0x40
 80084d6:	e000      	b.n	80084da <_dtoa_r+0x1da>
 80084d8:	9010      	str	r0, [sp, #64]	; 0x40
 80084da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084dc:	1b9e      	subs	r6, r3, r6
 80084de:	1e73      	subs	r3, r6, #1
 80084e0:	9307      	str	r3, [sp, #28]
 80084e2:	bf43      	ittte	mi
 80084e4:	f1c3 0800 	rsbmi	r8, r3, #0
 80084e8:	2300      	movmi	r3, #0
 80084ea:	9307      	strmi	r3, [sp, #28]
 80084ec:	f04f 0800 	movpl.w	r8, #0
 80084f0:	f1bb 0f00 	cmp.w	fp, #0
 80084f4:	db06      	blt.n	8008504 <_dtoa_r+0x204>
 80084f6:	9b07      	ldr	r3, [sp, #28]
 80084f8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80084fc:	445b      	add	r3, fp
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	2700      	movs	r7, #0
 8008502:	e005      	b.n	8008510 <_dtoa_r+0x210>
 8008504:	2300      	movs	r3, #0
 8008506:	ebcb 0808 	rsb	r8, fp, r8
 800850a:	f1cb 0700 	rsb	r7, fp, #0
 800850e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008510:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008512:	2b09      	cmp	r3, #9
 8008514:	d827      	bhi.n	8008566 <_dtoa_r+0x266>
 8008516:	2b05      	cmp	r3, #5
 8008518:	bfc4      	itt	gt
 800851a:	3b04      	subgt	r3, #4
 800851c:	931e      	strgt	r3, [sp, #120]	; 0x78
 800851e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008520:	f1a3 0302 	sub.w	r3, r3, #2
 8008524:	bfcc      	ite	gt
 8008526:	2500      	movgt	r5, #0
 8008528:	2501      	movle	r5, #1
 800852a:	2b03      	cmp	r3, #3
 800852c:	d820      	bhi.n	8008570 <_dtoa_r+0x270>
 800852e:	e8df f003 	tbb	[pc, r3]
 8008532:	0e06      	.short	0x0e06
 8008534:	0402      	.short	0x0402
 8008536:	2301      	movs	r3, #1
 8008538:	e002      	b.n	8008540 <_dtoa_r+0x240>
 800853a:	2301      	movs	r3, #1
 800853c:	e008      	b.n	8008550 <_dtoa_r+0x250>
 800853e:	2300      	movs	r3, #0
 8008540:	930a      	str	r3, [sp, #40]	; 0x28
 8008542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008544:	2b00      	cmp	r3, #0
 8008546:	dd1d      	ble.n	8008584 <_dtoa_r+0x284>
 8008548:	4699      	mov	r9, r3
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	e021      	b.n	8008592 <_dtoa_r+0x292>
 800854e:	2300      	movs	r3, #0
 8008550:	930a      	str	r3, [sp, #40]	; 0x28
 8008552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008554:	eb0b 0903 	add.w	r9, fp, r3
 8008558:	f109 0301 	add.w	r3, r9, #1
 800855c:	2b01      	cmp	r3, #1
 800855e:	9305      	str	r3, [sp, #20]
 8008560:	bfb8      	it	lt
 8008562:	2301      	movlt	r3, #1
 8008564:	e015      	b.n	8008592 <_dtoa_r+0x292>
 8008566:	2501      	movs	r5, #1
 8008568:	2300      	movs	r3, #0
 800856a:	931e      	str	r3, [sp, #120]	; 0x78
 800856c:	950a      	str	r5, [sp, #40]	; 0x28
 800856e:	e001      	b.n	8008574 <_dtoa_r+0x274>
 8008570:	2301      	movs	r3, #1
 8008572:	930a      	str	r3, [sp, #40]	; 0x28
 8008574:	f04f 39ff 	mov.w	r9, #4294967295
 8008578:	2200      	movs	r2, #0
 800857a:	f8cd 9014 	str.w	r9, [sp, #20]
 800857e:	2312      	movs	r3, #18
 8008580:	921f      	str	r2, [sp, #124]	; 0x7c
 8008582:	e006      	b.n	8008592 <_dtoa_r+0x292>
 8008584:	f04f 0901 	mov.w	r9, #1
 8008588:	f8cd 9014 	str.w	r9, [sp, #20]
 800858c:	464b      	mov	r3, r9
 800858e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8008592:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8008596:	2200      	movs	r2, #0
 8008598:	6062      	str	r2, [r4, #4]
 800859a:	2104      	movs	r1, #4
 800859c:	f101 0214 	add.w	r2, r1, #20
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d81d      	bhi.n	80085e0 <_dtoa_r+0x2e0>
 80085a4:	6862      	ldr	r2, [r4, #4]
 80085a6:	3201      	adds	r2, #1
 80085a8:	6062      	str	r2, [r4, #4]
 80085aa:	0049      	lsls	r1, r1, #1
 80085ac:	e7f6      	b.n	800859c <_dtoa_r+0x29c>
 80085ae:	bf00      	nop
 80085b0:	636f4361 	.word	0x636f4361
 80085b4:	3fd287a7 	.word	0x3fd287a7
 80085b8:	8b60c8b3 	.word	0x8b60c8b3
 80085bc:	3fc68a28 	.word	0x3fc68a28
 80085c0:	509f79fb 	.word	0x509f79fb
 80085c4:	3fd34413 	.word	0x3fd34413
 80085c8:	7ff00000 	.word	0x7ff00000
 80085cc:	0800bc5d 	.word	0x0800bc5d
 80085d0:	0800bc66 	.word	0x0800bc66
 80085d4:	0800bc4c 	.word	0x0800bc4c
 80085d8:	3ff80000 	.word	0x3ff80000
 80085dc:	0800bce0 	.word	0x0800bce0
 80085e0:	6861      	ldr	r1, [r4, #4]
 80085e2:	4650      	mov	r0, sl
 80085e4:	f001 f99f 	bl	8009926 <_Balloc>
 80085e8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80085ec:	6020      	str	r0, [r4, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	9306      	str	r3, [sp, #24]
 80085f2:	9b05      	ldr	r3, [sp, #20]
 80085f4:	2b0e      	cmp	r3, #14
 80085f6:	f200 815d 	bhi.w	80088b4 <_dtoa_r+0x5b4>
 80085fa:	2d00      	cmp	r5, #0
 80085fc:	f000 815a 	beq.w	80088b4 <_dtoa_r+0x5b4>
 8008600:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8008604:	f1bb 0f00 	cmp.w	fp, #0
 8008608:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 800860c:	dd30      	ble.n	8008670 <_dtoa_r+0x370>
 800860e:	4aa0      	ldr	r2, [pc, #640]	; (8008890 <_dtoa_r+0x590>)
 8008610:	f00b 030f 	and.w	r3, fp, #15
 8008614:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008618:	cb18      	ldmia	r3, {r3, r4}
 800861a:	ea4f 152b 	mov.w	r5, fp, asr #4
 800861e:	06e8      	lsls	r0, r5, #27
 8008620:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008624:	d50c      	bpl.n	8008640 <_dtoa_r+0x340>
 8008626:	4b9b      	ldr	r3, [pc, #620]	; (8008894 <_dtoa_r+0x594>)
 8008628:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800862c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008630:	f7f8 f910 	bl	8000854 <__aeabi_ddiv>
 8008634:	f005 050f 	and.w	r5, r5, #15
 8008638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800863c:	2403      	movs	r4, #3
 800863e:	e000      	b.n	8008642 <_dtoa_r+0x342>
 8008640:	2402      	movs	r4, #2
 8008642:	4e94      	ldr	r6, [pc, #592]	; (8008894 <_dtoa_r+0x594>)
 8008644:	b16d      	cbz	r5, 8008662 <_dtoa_r+0x362>
 8008646:	07e9      	lsls	r1, r5, #31
 8008648:	d508      	bpl.n	800865c <_dtoa_r+0x35c>
 800864a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800864e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008652:	f7f7 ffd5 	bl	8000600 <__aeabi_dmul>
 8008656:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800865a:	3401      	adds	r4, #1
 800865c:	106d      	asrs	r5, r5, #1
 800865e:	3608      	adds	r6, #8
 8008660:	e7f0      	b.n	8008644 <_dtoa_r+0x344>
 8008662:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866a:	f7f8 f8f3 	bl	8000854 <__aeabi_ddiv>
 800866e:	e020      	b.n	80086b2 <_dtoa_r+0x3b2>
 8008670:	f1cb 0500 	rsb	r5, fp, #0
 8008674:	b305      	cbz	r5, 80086b8 <_dtoa_r+0x3b8>
 8008676:	4b86      	ldr	r3, [pc, #536]	; (8008890 <_dtoa_r+0x590>)
 8008678:	4e86      	ldr	r6, [pc, #536]	; (8008894 <_dtoa_r+0x594>)
 800867a:	f005 020f 	and.w	r2, r5, #15
 800867e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800868a:	f7f7 ffb9 	bl	8000600 <__aeabi_dmul>
 800868e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008692:	112d      	asrs	r5, r5, #4
 8008694:	2300      	movs	r3, #0
 8008696:	2402      	movs	r4, #2
 8008698:	b155      	cbz	r5, 80086b0 <_dtoa_r+0x3b0>
 800869a:	07ea      	lsls	r2, r5, #31
 800869c:	d505      	bpl.n	80086aa <_dtoa_r+0x3aa>
 800869e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086a2:	f7f7 ffad 	bl	8000600 <__aeabi_dmul>
 80086a6:	3401      	adds	r4, #1
 80086a8:	2301      	movs	r3, #1
 80086aa:	106d      	asrs	r5, r5, #1
 80086ac:	3608      	adds	r6, #8
 80086ae:	e7f3      	b.n	8008698 <_dtoa_r+0x398>
 80086b0:	b11b      	cbz	r3, 80086ba <_dtoa_r+0x3ba>
 80086b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b6:	e000      	b.n	80086ba <_dtoa_r+0x3ba>
 80086b8:	2402      	movs	r4, #2
 80086ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086bc:	b1e3      	cbz	r3, 80086f8 <_dtoa_r+0x3f8>
 80086be:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	4b74      	ldr	r3, [pc, #464]	; (8008898 <_dtoa_r+0x598>)
 80086c6:	4628      	mov	r0, r5
 80086c8:	4631      	mov	r1, r6
 80086ca:	f7f8 fa0b 	bl	8000ae4 <__aeabi_dcmplt>
 80086ce:	b198      	cbz	r0, 80086f8 <_dtoa_r+0x3f8>
 80086d0:	9b05      	ldr	r3, [sp, #20]
 80086d2:	b18b      	cbz	r3, 80086f8 <_dtoa_r+0x3f8>
 80086d4:	f1b9 0f00 	cmp.w	r9, #0
 80086d8:	f340 80e8 	ble.w	80088ac <_dtoa_r+0x5ac>
 80086dc:	f10b 33ff 	add.w	r3, fp, #4294967295
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	4631      	mov	r1, r6
 80086e4:	2200      	movs	r2, #0
 80086e6:	4b6d      	ldr	r3, [pc, #436]	; (800889c <_dtoa_r+0x59c>)
 80086e8:	4628      	mov	r0, r5
 80086ea:	f7f7 ff89 	bl	8000600 <__aeabi_dmul>
 80086ee:	3401      	adds	r4, #1
 80086f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086f4:	464e      	mov	r6, r9
 80086f6:	e002      	b.n	80086fe <_dtoa_r+0x3fe>
 80086f8:	9e05      	ldr	r6, [sp, #20]
 80086fa:	f8cd b020 	str.w	fp, [sp, #32]
 80086fe:	4620      	mov	r0, r4
 8008700:	f7f7 ff18 	bl	8000534 <__aeabi_i2d>
 8008704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008708:	f7f7 ff7a 	bl	8000600 <__aeabi_dmul>
 800870c:	4b64      	ldr	r3, [pc, #400]	; (80088a0 <_dtoa_r+0x5a0>)
 800870e:	2200      	movs	r2, #0
 8008710:	f7f7 fdc4 	bl	800029c <__adddf3>
 8008714:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008718:	4604      	mov	r4, r0
 800871a:	930c      	str	r3, [sp, #48]	; 0x30
 800871c:	461d      	mov	r5, r3
 800871e:	b9d6      	cbnz	r6, 8008756 <_dtoa_r+0x456>
 8008720:	2200      	movs	r2, #0
 8008722:	4b60      	ldr	r3, [pc, #384]	; (80088a4 <_dtoa_r+0x5a4>)
 8008724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008728:	f7f7 fdb6 	bl	8000298 <__aeabi_dsub>
 800872c:	4622      	mov	r2, r4
 800872e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008734:	f7f8 f9f4 	bl	8000b20 <__aeabi_dcmpgt>
 8008738:	2800      	cmp	r0, #0
 800873a:	f040 8241 	bne.w	8008bc0 <_dtoa_r+0x8c0>
 800873e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008740:	4622      	mov	r2, r4
 8008742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800874a:	f7f8 f9cb 	bl	8000ae4 <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f040 822d 	bne.w	8008bae <_dtoa_r+0x8ae>
 8008754:	e0aa      	b.n	80088ac <_dtoa_r+0x5ac>
 8008756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008758:	4b4d      	ldr	r3, [pc, #308]	; (8008890 <_dtoa_r+0x590>)
 800875a:	1e71      	subs	r1, r6, #1
 800875c:	2a00      	cmp	r2, #0
 800875e:	d049      	beq.n	80087f4 <_dtoa_r+0x4f4>
 8008760:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	2000      	movs	r0, #0
 800876a:	494f      	ldr	r1, [pc, #316]	; (80088a8 <_dtoa_r+0x5a8>)
 800876c:	f7f8 f872 	bl	8000854 <__aeabi_ddiv>
 8008770:	4622      	mov	r2, r4
 8008772:	462b      	mov	r3, r5
 8008774:	f7f7 fd90 	bl	8000298 <__aeabi_dsub>
 8008778:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800877c:	9c06      	ldr	r4, [sp, #24]
 800877e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008782:	f7f8 f9ed 	bl	8000b60 <__aeabi_d2iz>
 8008786:	4605      	mov	r5, r0
 8008788:	f7f7 fed4 	bl	8000534 <__aeabi_i2d>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008794:	f7f7 fd80 	bl	8000298 <__aeabi_dsub>
 8008798:	3530      	adds	r5, #48	; 0x30
 800879a:	f804 5b01 	strb.w	r5, [r4], #1
 800879e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a6:	f7f8 f99d 	bl	8000ae4 <__aeabi_dcmplt>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f040 8321 	bne.w	8008df2 <_dtoa_r+0xaf2>
 80087b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087b4:	2000      	movs	r0, #0
 80087b6:	4938      	ldr	r1, [pc, #224]	; (8008898 <_dtoa_r+0x598>)
 80087b8:	f7f7 fd6e 	bl	8000298 <__aeabi_dsub>
 80087bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087c0:	f7f8 f990 	bl	8000ae4 <__aeabi_dcmplt>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f040 80d3 	bne.w	8008970 <_dtoa_r+0x670>
 80087ca:	9b06      	ldr	r3, [sp, #24]
 80087cc:	1ae3      	subs	r3, r4, r3
 80087ce:	42b3      	cmp	r3, r6
 80087d0:	da6c      	bge.n	80088ac <_dtoa_r+0x5ac>
 80087d2:	2200      	movs	r2, #0
 80087d4:	4b31      	ldr	r3, [pc, #196]	; (800889c <_dtoa_r+0x59c>)
 80087d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087da:	f7f7 ff11 	bl	8000600 <__aeabi_dmul>
 80087de:	2200      	movs	r2, #0
 80087e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087e4:	4b2d      	ldr	r3, [pc, #180]	; (800889c <_dtoa_r+0x59c>)
 80087e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ea:	f7f7 ff09 	bl	8000600 <__aeabi_dmul>
 80087ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087f2:	e7c4      	b.n	800877e <_dtoa_r+0x47e>
 80087f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80087f8:	4622      	mov	r2, r4
 80087fa:	462b      	mov	r3, r5
 80087fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008800:	f7f7 fefe 	bl	8000600 <__aeabi_dmul>
 8008804:	9b06      	ldr	r3, [sp, #24]
 8008806:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800880a:	199c      	adds	r4, r3, r6
 800880c:	461d      	mov	r5, r3
 800880e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008812:	f7f8 f9a5 	bl	8000b60 <__aeabi_d2iz>
 8008816:	4606      	mov	r6, r0
 8008818:	f7f7 fe8c 	bl	8000534 <__aeabi_i2d>
 800881c:	3630      	adds	r6, #48	; 0x30
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008826:	f7f7 fd37 	bl	8000298 <__aeabi_dsub>
 800882a:	f805 6b01 	strb.w	r6, [r5], #1
 800882e:	42ac      	cmp	r4, r5
 8008830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	d123      	bne.n	8008882 <_dtoa_r+0x582>
 800883a:	4b1b      	ldr	r3, [pc, #108]	; (80088a8 <_dtoa_r+0x5a8>)
 800883c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008840:	f7f7 fd2c 	bl	800029c <__adddf3>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884c:	f7f8 f968 	bl	8000b20 <__aeabi_dcmpgt>
 8008850:	2800      	cmp	r0, #0
 8008852:	f040 808d 	bne.w	8008970 <_dtoa_r+0x670>
 8008856:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800885a:	2000      	movs	r0, #0
 800885c:	4912      	ldr	r1, [pc, #72]	; (80088a8 <_dtoa_r+0x5a8>)
 800885e:	f7f7 fd1b 	bl	8000298 <__aeabi_dsub>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886a:	f7f8 f93b 	bl	8000ae4 <__aeabi_dcmplt>
 800886e:	b1e8      	cbz	r0, 80088ac <_dtoa_r+0x5ac>
 8008870:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008874:	2b30      	cmp	r3, #48	; 0x30
 8008876:	f104 32ff 	add.w	r2, r4, #4294967295
 800887a:	f040 82ba 	bne.w	8008df2 <_dtoa_r+0xaf2>
 800887e:	4614      	mov	r4, r2
 8008880:	e7f6      	b.n	8008870 <_dtoa_r+0x570>
 8008882:	4b06      	ldr	r3, [pc, #24]	; (800889c <_dtoa_r+0x59c>)
 8008884:	f7f7 febc 	bl	8000600 <__aeabi_dmul>
 8008888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800888c:	e7bf      	b.n	800880e <_dtoa_r+0x50e>
 800888e:	bf00      	nop
 8008890:	0800bce0 	.word	0x0800bce0
 8008894:	0800bda8 	.word	0x0800bda8
 8008898:	3ff00000 	.word	0x3ff00000
 800889c:	40240000 	.word	0x40240000
 80088a0:	401c0000 	.word	0x401c0000
 80088a4:	40140000 	.word	0x40140000
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80088b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80088b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	db7d      	blt.n	80089b6 <_dtoa_r+0x6b6>
 80088ba:	f1bb 0f0e 	cmp.w	fp, #14
 80088be:	dc7a      	bgt.n	80089b6 <_dtoa_r+0x6b6>
 80088c0:	4bab      	ldr	r3, [pc, #684]	; (8008b70 <_dtoa_r+0x870>)
 80088c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80088c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80088ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	da14      	bge.n	80088fa <_dtoa_r+0x5fa>
 80088d0:	9b05      	ldr	r3, [sp, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dc11      	bgt.n	80088fa <_dtoa_r+0x5fa>
 80088d6:	f040 816c 	bne.w	8008bb2 <_dtoa_r+0x8b2>
 80088da:	2200      	movs	r2, #0
 80088dc:	4ba5      	ldr	r3, [pc, #660]	; (8008b74 <_dtoa_r+0x874>)
 80088de:	4630      	mov	r0, r6
 80088e0:	4639      	mov	r1, r7
 80088e2:	f7f7 fe8d 	bl	8000600 <__aeabi_dmul>
 80088e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ea:	f7f8 f90f 	bl	8000b0c <__aeabi_dcmpge>
 80088ee:	9d05      	ldr	r5, [sp, #20]
 80088f0:	462e      	mov	r6, r5
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f040 815f 	bne.w	8008bb6 <_dtoa_r+0x8b6>
 80088f8:	e165      	b.n	8008bc6 <_dtoa_r+0x8c6>
 80088fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80088fe:	9c06      	ldr	r4, [sp, #24]
 8008900:	4632      	mov	r2, r6
 8008902:	463b      	mov	r3, r7
 8008904:	4640      	mov	r0, r8
 8008906:	4649      	mov	r1, r9
 8008908:	f7f7 ffa4 	bl	8000854 <__aeabi_ddiv>
 800890c:	f7f8 f928 	bl	8000b60 <__aeabi_d2iz>
 8008910:	4605      	mov	r5, r0
 8008912:	f7f7 fe0f 	bl	8000534 <__aeabi_i2d>
 8008916:	4632      	mov	r2, r6
 8008918:	463b      	mov	r3, r7
 800891a:	f7f7 fe71 	bl	8000600 <__aeabi_dmul>
 800891e:	460b      	mov	r3, r1
 8008920:	4602      	mov	r2, r0
 8008922:	4649      	mov	r1, r9
 8008924:	4640      	mov	r0, r8
 8008926:	f7f7 fcb7 	bl	8000298 <__aeabi_dsub>
 800892a:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800892e:	9b06      	ldr	r3, [sp, #24]
 8008930:	f804 eb01 	strb.w	lr, [r4], #1
 8008934:	ebc3 0e04 	rsb	lr, r3, r4
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	4573      	cmp	r3, lr
 800893c:	d12e      	bne.n	800899c <_dtoa_r+0x69c>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	f7f7 fcab 	bl	800029c <__adddf3>
 8008946:	4680      	mov	r8, r0
 8008948:	4689      	mov	r9, r1
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f8 f8c7 	bl	8000ae4 <__aeabi_dcmplt>
 8008956:	b978      	cbnz	r0, 8008978 <_dtoa_r+0x678>
 8008958:	4642      	mov	r2, r8
 800895a:	464b      	mov	r3, r9
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f8 f8b6 	bl	8000ad0 <__aeabi_dcmpeq>
 8008964:	2800      	cmp	r0, #0
 8008966:	f000 8246 	beq.w	8008df6 <_dtoa_r+0xaf6>
 800896a:	07eb      	lsls	r3, r5, #31
 800896c:	d404      	bmi.n	8008978 <_dtoa_r+0x678>
 800896e:	e242      	b.n	8008df6 <_dtoa_r+0xaf6>
 8008970:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008974:	e000      	b.n	8008978 <_dtoa_r+0x678>
 8008976:	461c      	mov	r4, r3
 8008978:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800897c:	2a39      	cmp	r2, #57	; 0x39
 800897e:	f104 33ff 	add.w	r3, r4, #4294967295
 8008982:	d107      	bne.n	8008994 <_dtoa_r+0x694>
 8008984:	9a06      	ldr	r2, [sp, #24]
 8008986:	429a      	cmp	r2, r3
 8008988:	d1f5      	bne.n	8008976 <_dtoa_r+0x676>
 800898a:	9906      	ldr	r1, [sp, #24]
 800898c:	2230      	movs	r2, #48	; 0x30
 800898e:	f10b 0b01 	add.w	fp, fp, #1
 8008992:	700a      	strb	r2, [r1, #0]
 8008994:	781a      	ldrb	r2, [r3, #0]
 8008996:	3201      	adds	r2, #1
 8008998:	701a      	strb	r2, [r3, #0]
 800899a:	e22c      	b.n	8008df6 <_dtoa_r+0xaf6>
 800899c:	2200      	movs	r2, #0
 800899e:	4b76      	ldr	r3, [pc, #472]	; (8008b78 <_dtoa_r+0x878>)
 80089a0:	f7f7 fe2e 	bl	8000600 <__aeabi_dmul>
 80089a4:	2200      	movs	r2, #0
 80089a6:	2300      	movs	r3, #0
 80089a8:	4680      	mov	r8, r0
 80089aa:	4689      	mov	r9, r1
 80089ac:	f7f8 f890 	bl	8000ad0 <__aeabi_dcmpeq>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0a5      	beq.n	8008900 <_dtoa_r+0x600>
 80089b4:	e21f      	b.n	8008df6 <_dtoa_r+0xaf6>
 80089b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d02b      	beq.n	8008a14 <_dtoa_r+0x714>
 80089bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089be:	2a01      	cmp	r2, #1
 80089c0:	dc0a      	bgt.n	80089d8 <_dtoa_r+0x6d8>
 80089c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089c4:	b112      	cbz	r2, 80089cc <_dtoa_r+0x6cc>
 80089c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089ca:	e002      	b.n	80089d2 <_dtoa_r+0x6d2>
 80089cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089d2:	463d      	mov	r5, r7
 80089d4:	4644      	mov	r4, r8
 80089d6:	e013      	b.n	8008a00 <_dtoa_r+0x700>
 80089d8:	9b05      	ldr	r3, [sp, #20]
 80089da:	1e5d      	subs	r5, r3, #1
 80089dc:	42af      	cmp	r7, r5
 80089de:	bfbf      	itttt	lt
 80089e0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80089e2:	1bea      	sublt	r2, r5, r7
 80089e4:	189b      	addlt	r3, r3, r2
 80089e6:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80089e8:	9b05      	ldr	r3, [sp, #20]
 80089ea:	bfb6      	itet	lt
 80089ec:	462f      	movlt	r7, r5
 80089ee:	1b7d      	subge	r5, r7, r5
 80089f0:	2500      	movlt	r5, #0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	bfab      	itete	ge
 80089f6:	9b05      	ldrge	r3, [sp, #20]
 80089f8:	ebc3 0408 	rsblt	r4, r3, r8
 80089fc:	4644      	movge	r4, r8
 80089fe:	2300      	movlt	r3, #0
 8008a00:	9a07      	ldr	r2, [sp, #28]
 8008a02:	2101      	movs	r1, #1
 8008a04:	441a      	add	r2, r3
 8008a06:	4650      	mov	r0, sl
 8008a08:	4498      	add	r8, r3
 8008a0a:	9207      	str	r2, [sp, #28]
 8008a0c:	f001 f85f 	bl	8009ace <__i2b>
 8008a10:	4606      	mov	r6, r0
 8008a12:	e002      	b.n	8008a1a <_dtoa_r+0x71a>
 8008a14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008a16:	463d      	mov	r5, r7
 8008a18:	4644      	mov	r4, r8
 8008a1a:	b15c      	cbz	r4, 8008a34 <_dtoa_r+0x734>
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dd08      	ble.n	8008a34 <_dtoa_r+0x734>
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	9a07      	ldr	r2, [sp, #28]
 8008a26:	bfa8      	it	ge
 8008a28:	4623      	movge	r3, r4
 8008a2a:	ebc3 0808 	rsb	r8, r3, r8
 8008a2e:	1ae4      	subs	r4, r4, r3
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	9307      	str	r3, [sp, #28]
 8008a34:	2f00      	cmp	r7, #0
 8008a36:	dd1d      	ble.n	8008a74 <_dtoa_r+0x774>
 8008a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3a:	b1ab      	cbz	r3, 8008a68 <_dtoa_r+0x768>
 8008a3c:	b18d      	cbz	r5, 8008a62 <_dtoa_r+0x762>
 8008a3e:	4631      	mov	r1, r6
 8008a40:	462a      	mov	r2, r5
 8008a42:	4650      	mov	r0, sl
 8008a44:	f001 f8de 	bl	8009c04 <__pow5mult>
 8008a48:	9a04      	ldr	r2, [sp, #16]
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	4650      	mov	r0, sl
 8008a50:	f001 f846 	bl	8009ae0 <__multiply>
 8008a54:	9904      	ldr	r1, [sp, #16]
 8008a56:	9008      	str	r0, [sp, #32]
 8008a58:	4650      	mov	r0, sl
 8008a5a:	f000 ff99 	bl	8009990 <_Bfree>
 8008a5e:	9b08      	ldr	r3, [sp, #32]
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	1b7a      	subs	r2, r7, r5
 8008a64:	d006      	beq.n	8008a74 <_dtoa_r+0x774>
 8008a66:	e000      	b.n	8008a6a <_dtoa_r+0x76a>
 8008a68:	463a      	mov	r2, r7
 8008a6a:	9904      	ldr	r1, [sp, #16]
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	f001 f8c9 	bl	8009c04 <__pow5mult>
 8008a72:	9004      	str	r0, [sp, #16]
 8008a74:	2101      	movs	r1, #1
 8008a76:	4650      	mov	r0, sl
 8008a78:	f001 f829 	bl	8009ace <__i2b>
 8008a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7e:	4605      	mov	r5, r0
 8008a80:	b35b      	cbz	r3, 8008ada <_dtoa_r+0x7da>
 8008a82:	461a      	mov	r2, r3
 8008a84:	4601      	mov	r1, r0
 8008a86:	4650      	mov	r0, sl
 8008a88:	f001 f8bc 	bl	8009c04 <__pow5mult>
 8008a8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	4605      	mov	r5, r0
 8008a92:	dc18      	bgt.n	8008ac6 <_dtoa_r+0x7c6>
 8008a94:	9b02      	ldr	r3, [sp, #8]
 8008a96:	b983      	cbnz	r3, 8008aba <_dtoa_r+0x7ba>
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a9e:	b973      	cbnz	r3, 8008abe <_dtoa_r+0x7be>
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8008aa6:	0d3f      	lsrs	r7, r7, #20
 8008aa8:	053f      	lsls	r7, r7, #20
 8008aaa:	b14f      	cbz	r7, 8008ac0 <_dtoa_r+0x7c0>
 8008aac:	9b07      	ldr	r3, [sp, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	f108 0801 	add.w	r8, r8, #1
 8008ab4:	9307      	str	r3, [sp, #28]
 8008ab6:	2701      	movs	r7, #1
 8008ab8:	e002      	b.n	8008ac0 <_dtoa_r+0x7c0>
 8008aba:	2700      	movs	r7, #0
 8008abc:	e000      	b.n	8008ac0 <_dtoa_r+0x7c0>
 8008abe:	9f02      	ldr	r7, [sp, #8]
 8008ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ac2:	b173      	cbz	r3, 8008ae2 <_dtoa_r+0x7e2>
 8008ac4:	e000      	b.n	8008ac8 <_dtoa_r+0x7c8>
 8008ac6:	2700      	movs	r7, #0
 8008ac8:	692b      	ldr	r3, [r5, #16]
 8008aca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008ace:	6918      	ldr	r0, [r3, #16]
 8008ad0:	f000 ffb0 	bl	8009a34 <__hi0bits>
 8008ad4:	f1c0 0020 	rsb	r0, r0, #32
 8008ad8:	e004      	b.n	8008ae4 <_dtoa_r+0x7e4>
 8008ada:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	ddd9      	ble.n	8008a94 <_dtoa_r+0x794>
 8008ae0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	9b07      	ldr	r3, [sp, #28]
 8008ae6:	4418      	add	r0, r3
 8008ae8:	f010 001f 	ands.w	r0, r0, #31
 8008aec:	d008      	beq.n	8008b00 <_dtoa_r+0x800>
 8008aee:	f1c0 0320 	rsb	r3, r0, #32
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	dd02      	ble.n	8008afc <_dtoa_r+0x7fc>
 8008af6:	f1c0 001c 	rsb	r0, r0, #28
 8008afa:	e002      	b.n	8008b02 <_dtoa_r+0x802>
 8008afc:	d006      	beq.n	8008b0c <_dtoa_r+0x80c>
 8008afe:	4618      	mov	r0, r3
 8008b00:	301c      	adds	r0, #28
 8008b02:	9b07      	ldr	r3, [sp, #28]
 8008b04:	4403      	add	r3, r0
 8008b06:	4480      	add	r8, r0
 8008b08:	4404      	add	r4, r0
 8008b0a:	9307      	str	r3, [sp, #28]
 8008b0c:	f1b8 0f00 	cmp.w	r8, #0
 8008b10:	dd05      	ble.n	8008b1e <_dtoa_r+0x81e>
 8008b12:	4642      	mov	r2, r8
 8008b14:	9904      	ldr	r1, [sp, #16]
 8008b16:	4650      	mov	r0, sl
 8008b18:	f001 f8c2 	bl	8009ca0 <__lshift>
 8008b1c:	9004      	str	r0, [sp, #16]
 8008b1e:	9b07      	ldr	r3, [sp, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dd05      	ble.n	8008b30 <_dtoa_r+0x830>
 8008b24:	4629      	mov	r1, r5
 8008b26:	461a      	mov	r2, r3
 8008b28:	4650      	mov	r0, sl
 8008b2a:	f001 f8b9 	bl	8009ca0 <__lshift>
 8008b2e:	4605      	mov	r5, r0
 8008b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b32:	b31b      	cbz	r3, 8008b7c <_dtoa_r+0x87c>
 8008b34:	4629      	mov	r1, r5
 8008b36:	9804      	ldr	r0, [sp, #16]
 8008b38:	f001 f903 	bl	8009d42 <__mcmp>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	da1d      	bge.n	8008b7c <_dtoa_r+0x87c>
 8008b40:	2300      	movs	r3, #0
 8008b42:	220a      	movs	r2, #10
 8008b44:	9904      	ldr	r1, [sp, #16]
 8008b46:	4650      	mov	r0, sl
 8008b48:	f000 ff39 	bl	80099be <__multadd>
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4e:	9004      	str	r0, [sp, #16]
 8008b50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8160 	beq.w	8008e1a <_dtoa_r+0xb1a>
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	220a      	movs	r2, #10
 8008b60:	4650      	mov	r0, sl
 8008b62:	f000 ff2c 	bl	80099be <__multadd>
 8008b66:	f1b9 0f00 	cmp.w	r9, #0
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	dc3e      	bgt.n	8008bec <_dtoa_r+0x8ec>
 8008b6e:	e03a      	b.n	8008be6 <_dtoa_r+0x8e6>
 8008b70:	0800bce0 	.word	0x0800bce0
 8008b74:	40140000 	.word	0x40140000
 8008b78:	40240000 	.word	0x40240000
 8008b7c:	9b05      	ldr	r3, [sp, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dc2b      	bgt.n	8008bda <_dtoa_r+0x8da>
 8008b82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	dd28      	ble.n	8008bda <_dtoa_r+0x8da>
 8008b88:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008b8c:	f1b9 0f00 	cmp.w	r9, #0
 8008b90:	d111      	bne.n	8008bb6 <_dtoa_r+0x8b6>
 8008b92:	4629      	mov	r1, r5
 8008b94:	464b      	mov	r3, r9
 8008b96:	2205      	movs	r2, #5
 8008b98:	4650      	mov	r0, sl
 8008b9a:	f000 ff10 	bl	80099be <__multadd>
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	9804      	ldr	r0, [sp, #16]
 8008ba4:	f001 f8cd 	bl	8009d42 <__mcmp>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	dc0c      	bgt.n	8008bc6 <_dtoa_r+0x8c6>
 8008bac:	e003      	b.n	8008bb6 <_dtoa_r+0x8b6>
 8008bae:	4635      	mov	r5, r6
 8008bb0:	e000      	b.n	8008bb4 <_dtoa_r+0x8b4>
 8008bb2:	2500      	movs	r5, #0
 8008bb4:	462e      	mov	r6, r5
 8008bb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008bb8:	9c06      	ldr	r4, [sp, #24]
 8008bba:	ea6f 0b03 	mvn.w	fp, r3
 8008bbe:	e009      	b.n	8008bd4 <_dtoa_r+0x8d4>
 8008bc0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008bc4:	4635      	mov	r5, r6
 8008bc6:	9b06      	ldr	r3, [sp, #24]
 8008bc8:	9a06      	ldr	r2, [sp, #24]
 8008bca:	1c5c      	adds	r4, r3, #1
 8008bcc:	2331      	movs	r3, #49	; 0x31
 8008bce:	7013      	strb	r3, [r2, #0]
 8008bd0:	f10b 0b01 	add.w	fp, fp, #1
 8008bd4:	9605      	str	r6, [sp, #20]
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	e0f9      	b.n	8008dce <_dtoa_r+0xace>
 8008bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bdc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008be0:	b923      	cbnz	r3, 8008bec <_dtoa_r+0x8ec>
 8008be2:	9c06      	ldr	r4, [sp, #24]
 8008be4:	e0b2      	b.n	8008d4c <_dtoa_r+0xa4c>
 8008be6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	dccf      	bgt.n	8008b8c <_dtoa_r+0x88c>
 8008bec:	2c00      	cmp	r4, #0
 8008bee:	dd05      	ble.n	8008bfc <_dtoa_r+0x8fc>
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	f001 f853 	bl	8009ca0 <__lshift>
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	b19f      	cbz	r7, 8008c26 <_dtoa_r+0x926>
 8008bfe:	6871      	ldr	r1, [r6, #4]
 8008c00:	4650      	mov	r0, sl
 8008c02:	f000 fe90 	bl	8009926 <_Balloc>
 8008c06:	6932      	ldr	r2, [r6, #16]
 8008c08:	3202      	adds	r2, #2
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	0092      	lsls	r2, r2, #2
 8008c0e:	f106 010c 	add.w	r1, r6, #12
 8008c12:	300c      	adds	r0, #12
 8008c14:	f7fe fa9f 	bl	8007156 <memcpy>
 8008c18:	2201      	movs	r2, #1
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	f001 f83f 	bl	8009ca0 <__lshift>
 8008c22:	9005      	str	r0, [sp, #20]
 8008c24:	e000      	b.n	8008c28 <_dtoa_r+0x928>
 8008c26:	9605      	str	r6, [sp, #20]
 8008c28:	9b02      	ldr	r3, [sp, #8]
 8008c2a:	9f06      	ldr	r7, [sp, #24]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	9307      	str	r3, [sp, #28]
 8008c32:	4629      	mov	r1, r5
 8008c34:	9804      	ldr	r0, [sp, #16]
 8008c36:	f7ff fad1 	bl	80081dc <quorem>
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c42:	9804      	ldr	r0, [sp, #16]
 8008c44:	f001 f87d 	bl	8009d42 <__mcmp>
 8008c48:	9a05      	ldr	r2, [sp, #20]
 8008c4a:	9002      	str	r0, [sp, #8]
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	4650      	mov	r0, sl
 8008c50:	f001 f893 	bl	8009d7a <__mdiff>
 8008c54:	68c3      	ldr	r3, [r0, #12]
 8008c56:	4602      	mov	r2, r0
 8008c58:	b93b      	cbnz	r3, 8008c6a <_dtoa_r+0x96a>
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	900a      	str	r0, [sp, #40]	; 0x28
 8008c5e:	9804      	ldr	r0, [sp, #16]
 8008c60:	f001 f86f 	bl	8009d42 <__mcmp>
 8008c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c66:	4603      	mov	r3, r0
 8008c68:	e000      	b.n	8008c6c <_dtoa_r+0x96c>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4650      	mov	r0, sl
 8008c70:	930a      	str	r3, [sp, #40]	; 0x28
 8008c72:	f000 fe8d 	bl	8009990 <_Bfree>
 8008c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c78:	b953      	cbnz	r3, 8008c90 <_dtoa_r+0x990>
 8008c7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c7c:	b942      	cbnz	r2, 8008c90 <_dtoa_r+0x990>
 8008c7e:	9a07      	ldr	r2, [sp, #28]
 8008c80:	b932      	cbnz	r2, 8008c90 <_dtoa_r+0x990>
 8008c82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c86:	d02a      	beq.n	8008cde <_dtoa_r+0x9de>
 8008c88:	9b02      	ldr	r3, [sp, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	dc1c      	bgt.n	8008cc8 <_dtoa_r+0x9c8>
 8008c8e:	e01d      	b.n	8008ccc <_dtoa_r+0x9cc>
 8008c90:	9a02      	ldr	r2, [sp, #8]
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	db04      	blt.n	8008ca0 <_dtoa_r+0x9a0>
 8008c96:	d11b      	bne.n	8008cd0 <_dtoa_r+0x9d0>
 8008c98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c9a:	b9ca      	cbnz	r2, 8008cd0 <_dtoa_r+0x9d0>
 8008c9c:	9a07      	ldr	r2, [sp, #28]
 8008c9e:	b9ba      	cbnz	r2, 8008cd0 <_dtoa_r+0x9d0>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dd13      	ble.n	8008ccc <_dtoa_r+0x9cc>
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	9904      	ldr	r1, [sp, #16]
 8008ca8:	4650      	mov	r0, sl
 8008caa:	f000 fff9 	bl	8009ca0 <__lshift>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	9004      	str	r0, [sp, #16]
 8008cb2:	f001 f846 	bl	8009d42 <__mcmp>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	dc03      	bgt.n	8008cc2 <_dtoa_r+0x9c2>
 8008cba:	d107      	bne.n	8008ccc <_dtoa_r+0x9cc>
 8008cbc:	f018 0f01 	tst.w	r8, #1
 8008cc0:	d004      	beq.n	8008ccc <_dtoa_r+0x9cc>
 8008cc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008cc6:	d00a      	beq.n	8008cde <_dtoa_r+0x9de>
 8008cc8:	f104 0831 	add.w	r8, r4, #49	; 0x31
 8008ccc:	1c7c      	adds	r4, r7, #1
 8008cce:	e00c      	b.n	8008cea <_dtoa_r+0x9ea>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f107 0401 	add.w	r4, r7, #1
 8008cd6:	dd0b      	ble.n	8008cf0 <_dtoa_r+0x9f0>
 8008cd8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008cdc:	d103      	bne.n	8008ce6 <_dtoa_r+0x9e6>
 8008cde:	2339      	movs	r3, #57	; 0x39
 8008ce0:	703b      	strb	r3, [r7, #0]
 8008ce2:	3701      	adds	r7, #1
 8008ce4:	e056      	b.n	8008d94 <_dtoa_r+0xa94>
 8008ce6:	f108 0801 	add.w	r8, r8, #1
 8008cea:	f887 8000 	strb.w	r8, [r7]
 8008cee:	e06e      	b.n	8008dce <_dtoa_r+0xace>
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	f804 8c01 	strb.w	r8, [r4, #-1]
 8008cf6:	1ae3      	subs	r3, r4, r3
 8008cf8:	454b      	cmp	r3, r9
 8008cfa:	4627      	mov	r7, r4
 8008cfc:	d03b      	beq.n	8008d76 <_dtoa_r+0xa76>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	220a      	movs	r2, #10
 8008d02:	9904      	ldr	r1, [sp, #16]
 8008d04:	4650      	mov	r0, sl
 8008d06:	f000 fe5a 	bl	80099be <__multadd>
 8008d0a:	9b05      	ldr	r3, [sp, #20]
 8008d0c:	9004      	str	r0, [sp, #16]
 8008d0e:	429e      	cmp	r6, r3
 8008d10:	f04f 020a 	mov.w	r2, #10
 8008d14:	f04f 0300 	mov.w	r3, #0
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4650      	mov	r0, sl
 8008d1c:	d104      	bne.n	8008d28 <_dtoa_r+0xa28>
 8008d1e:	f000 fe4e 	bl	80099be <__multadd>
 8008d22:	4606      	mov	r6, r0
 8008d24:	9005      	str	r0, [sp, #20]
 8008d26:	e784      	b.n	8008c32 <_dtoa_r+0x932>
 8008d28:	f000 fe49 	bl	80099be <__multadd>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4606      	mov	r6, r0
 8008d30:	220a      	movs	r2, #10
 8008d32:	9905      	ldr	r1, [sp, #20]
 8008d34:	4650      	mov	r0, sl
 8008d36:	f000 fe42 	bl	80099be <__multadd>
 8008d3a:	9005      	str	r0, [sp, #20]
 8008d3c:	e779      	b.n	8008c32 <_dtoa_r+0x932>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	220a      	movs	r2, #10
 8008d42:	9904      	ldr	r1, [sp, #16]
 8008d44:	4650      	mov	r0, sl
 8008d46:	f000 fe3a 	bl	80099be <__multadd>
 8008d4a:	9004      	str	r0, [sp, #16]
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	9804      	ldr	r0, [sp, #16]
 8008d50:	f7ff fa44 	bl	80081dc <quorem>
 8008d54:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d58:	f804 8b01 	strb.w	r8, [r4], #1
 8008d5c:	9b06      	ldr	r3, [sp, #24]
 8008d5e:	1ae3      	subs	r3, r4, r3
 8008d60:	454b      	cmp	r3, r9
 8008d62:	dbec      	blt.n	8008d3e <_dtoa_r+0xa3e>
 8008d64:	9b06      	ldr	r3, [sp, #24]
 8008d66:	9605      	str	r6, [sp, #20]
 8008d68:	f1b9 0f01 	cmp.w	r9, #1
 8008d6c:	bfac      	ite	ge
 8008d6e:	444b      	addge	r3, r9
 8008d70:	3301      	addlt	r3, #1
 8008d72:	461f      	mov	r7, r3
 8008d74:	2600      	movs	r6, #0
 8008d76:	2201      	movs	r2, #1
 8008d78:	9904      	ldr	r1, [sp, #16]
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	f000 ff90 	bl	8009ca0 <__lshift>
 8008d80:	4629      	mov	r1, r5
 8008d82:	9004      	str	r0, [sp, #16]
 8008d84:	f000 ffdd 	bl	8009d42 <__mcmp>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	dc03      	bgt.n	8008d94 <_dtoa_r+0xa94>
 8008d8c:	d116      	bne.n	8008dbc <_dtoa_r+0xabc>
 8008d8e:	f018 0f01 	tst.w	r8, #1
 8008d92:	d013      	beq.n	8008dbc <_dtoa_r+0xabc>
 8008d94:	463c      	mov	r4, r7
 8008d96:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008d9a:	2b39      	cmp	r3, #57	; 0x39
 8008d9c:	f104 32ff 	add.w	r2, r4, #4294967295
 8008da0:	d109      	bne.n	8008db6 <_dtoa_r+0xab6>
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d104      	bne.n	8008db2 <_dtoa_r+0xab2>
 8008da8:	f10b 0b01 	add.w	fp, fp, #1
 8008dac:	2331      	movs	r3, #49	; 0x31
 8008dae:	9a06      	ldr	r2, [sp, #24]
 8008db0:	e002      	b.n	8008db8 <_dtoa_r+0xab8>
 8008db2:	4614      	mov	r4, r2
 8008db4:	e7ef      	b.n	8008d96 <_dtoa_r+0xa96>
 8008db6:	3301      	adds	r3, #1
 8008db8:	7013      	strb	r3, [r2, #0]
 8008dba:	e008      	b.n	8008dce <_dtoa_r+0xace>
 8008dbc:	463c      	mov	r4, r7
 8008dbe:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008dc2:	2b30      	cmp	r3, #48	; 0x30
 8008dc4:	f104 32ff 	add.w	r2, r4, #4294967295
 8008dc8:	d101      	bne.n	8008dce <_dtoa_r+0xace>
 8008dca:	4614      	mov	r4, r2
 8008dcc:	e7f7      	b.n	8008dbe <_dtoa_r+0xabe>
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	f000 fddd 	bl	8009990 <_Bfree>
 8008dd6:	9b05      	ldr	r3, [sp, #20]
 8008dd8:	b16b      	cbz	r3, 8008df6 <_dtoa_r+0xaf6>
 8008dda:	b12e      	cbz	r6, 8008de8 <_dtoa_r+0xae8>
 8008ddc:	429e      	cmp	r6, r3
 8008dde:	d003      	beq.n	8008de8 <_dtoa_r+0xae8>
 8008de0:	4631      	mov	r1, r6
 8008de2:	4650      	mov	r0, sl
 8008de4:	f000 fdd4 	bl	8009990 <_Bfree>
 8008de8:	9905      	ldr	r1, [sp, #20]
 8008dea:	4650      	mov	r0, sl
 8008dec:	f000 fdd0 	bl	8009990 <_Bfree>
 8008df0:	e001      	b.n	8008df6 <_dtoa_r+0xaf6>
 8008df2:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008df6:	9904      	ldr	r1, [sp, #16]
 8008df8:	4650      	mov	r0, sl
 8008dfa:	f000 fdc9 	bl	8009990 <_Bfree>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e02:	7023      	strb	r3, [r4, #0]
 8008e04:	f10b 0301 	add.w	r3, fp, #1
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e0c:	b11b      	cbz	r3, 8008e16 <_dtoa_r+0xb16>
 8008e0e:	601c      	str	r4, [r3, #0]
 8008e10:	e001      	b.n	8008e16 <_dtoa_r+0xb16>
 8008e12:	4808      	ldr	r0, [pc, #32]	; (8008e34 <_dtoa_r+0xb34>)
 8008e14:	e00a      	b.n	8008e2c <_dtoa_r+0xb2c>
 8008e16:	9806      	ldr	r0, [sp, #24]
 8008e18:	e008      	b.n	8008e2c <_dtoa_r+0xb2c>
 8008e1a:	f1b9 0f00 	cmp.w	r9, #0
 8008e1e:	f73f aee0 	bgt.w	8008be2 <_dtoa_r+0x8e2>
 8008e22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	f77f aedc 	ble.w	8008be2 <_dtoa_r+0x8e2>
 8008e2a:	e6af      	b.n	8008b8c <_dtoa_r+0x88c>
 8008e2c:	b015      	add	sp, #84	; 0x54
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	bf00      	nop
 8008e34:	0800bc4b 	.word	0x0800bc4b

08008e38 <_cleanup_r>:
 8008e38:	4901      	ldr	r1, [pc, #4]	; (8008e40 <_cleanup_r+0x8>)
 8008e3a:	f000 bb0d 	b.w	8009458 <_fwalk_reent>
 8008e3e:	bf00      	nop
 8008e40:	0800a545 	.word	0x0800a545

08008e44 <std.isra.0>:
 8008e44:	2300      	movs	r3, #0
 8008e46:	b510      	push	{r4, lr}
 8008e48:	4604      	mov	r4, r0
 8008e4a:	6003      	str	r3, [r0, #0]
 8008e4c:	6043      	str	r3, [r0, #4]
 8008e4e:	6083      	str	r3, [r0, #8]
 8008e50:	8181      	strh	r1, [r0, #12]
 8008e52:	6643      	str	r3, [r0, #100]	; 0x64
 8008e54:	81c2      	strh	r2, [r0, #14]
 8008e56:	6103      	str	r3, [r0, #16]
 8008e58:	6143      	str	r3, [r0, #20]
 8008e5a:	6183      	str	r3, [r0, #24]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	2208      	movs	r2, #8
 8008e60:	305c      	adds	r0, #92	; 0x5c
 8008e62:	f7fe f983 	bl	800716c <memset>
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <std.isra.0+0x38>)
 8008e68:	6263      	str	r3, [r4, #36]	; 0x24
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <std.isra.0+0x3c>)
 8008e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <std.isra.0+0x40>)
 8008e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e72:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <std.isra.0+0x44>)
 8008e74:	6224      	str	r4, [r4, #32]
 8008e76:	6323      	str	r3, [r4, #48]	; 0x30
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800a245 	.word	0x0800a245
 8008e80:	0800a267 	.word	0x0800a267
 8008e84:	0800a29f 	.word	0x0800a29f
 8008e88:	0800a2c3 	.word	0x0800a2c3

08008e8c <__sfmoreglue>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	2368      	movs	r3, #104	; 0x68
 8008e90:	1e4d      	subs	r5, r1, #1
 8008e92:	435d      	muls	r5, r3
 8008e94:	460e      	mov	r6, r1
 8008e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e9a:	f000 fb07 	bl	80094ac <_malloc_r>
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	b140      	cbz	r0, 8008eb4 <__sfmoreglue+0x28>
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	e880 0042 	stmia.w	r0, {r1, r6}
 8008ea8:	300c      	adds	r0, #12
 8008eaa:	60a0      	str	r0, [r4, #8]
 8008eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008eb0:	f7fe f95c 	bl	800716c <memset>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}

08008eb8 <__sinit>:
 8008eb8:	6983      	ldr	r3, [r0, #24]
 8008eba:	b510      	push	{r4, lr}
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	bb4b      	cbnz	r3, 8008f14 <__sinit+0x5c>
 8008ec0:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8008ec4:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8008ec8:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8008ecc:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <__sinit+0x60>)
 8008ece:	4a13      	ldr	r2, [pc, #76]	; (8008f1c <__sinit+0x64>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6282      	str	r2, [r0, #40]	; 0x28
 8008ed4:	4298      	cmp	r0, r3
 8008ed6:	bf04      	itt	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	6183      	streq	r3, [r0, #24]
 8008edc:	f000 f820 	bl	8008f20 <__sfp>
 8008ee0:	6060      	str	r0, [r4, #4]
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 f81c 	bl	8008f20 <__sfp>
 8008ee8:	60a0      	str	r0, [r4, #8]
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 f818 	bl	8008f20 <__sfp>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	60e0      	str	r0, [r4, #12]
 8008ef4:	2104      	movs	r1, #4
 8008ef6:	6860      	ldr	r0, [r4, #4]
 8008ef8:	f7ff ffa4 	bl	8008e44 <std.isra.0>
 8008efc:	2201      	movs	r2, #1
 8008efe:	2109      	movs	r1, #9
 8008f00:	68a0      	ldr	r0, [r4, #8]
 8008f02:	f7ff ff9f 	bl	8008e44 <std.isra.0>
 8008f06:	2202      	movs	r2, #2
 8008f08:	2112      	movs	r1, #18
 8008f0a:	68e0      	ldr	r0, [r4, #12]
 8008f0c:	f7ff ff9a 	bl	8008e44 <std.isra.0>
 8008f10:	2301      	movs	r3, #1
 8008f12:	61a3      	str	r3, [r4, #24]
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	bf00      	nop
 8008f18:	0800bcd0 	.word	0x0800bcd0
 8008f1c:	08008e39 	.word	0x08008e39

08008f20 <__sfp>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	4b1c      	ldr	r3, [pc, #112]	; (8008f94 <__sfp+0x74>)
 8008f24:	681e      	ldr	r6, [r3, #0]
 8008f26:	69b3      	ldr	r3, [r6, #24]
 8008f28:	4607      	mov	r7, r0
 8008f2a:	b913      	cbnz	r3, 8008f32 <__sfp+0x12>
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7ff ffc3 	bl	8008eb8 <__sinit>
 8008f32:	36d8      	adds	r6, #216	; 0xd8
 8008f34:	68b4      	ldr	r4, [r6, #8]
 8008f36:	6873      	ldr	r3, [r6, #4]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	d404      	bmi.n	8008f46 <__sfp+0x26>
 8008f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f40:	b17d      	cbz	r5, 8008f62 <__sfp+0x42>
 8008f42:	3468      	adds	r4, #104	; 0x68
 8008f44:	e7f8      	b.n	8008f38 <__sfp+0x18>
 8008f46:	6833      	ldr	r3, [r6, #0]
 8008f48:	b10b      	cbz	r3, 8008f4e <__sfp+0x2e>
 8008f4a:	6836      	ldr	r6, [r6, #0]
 8008f4c:	e7f2      	b.n	8008f34 <__sfp+0x14>
 8008f4e:	2104      	movs	r1, #4
 8008f50:	4638      	mov	r0, r7
 8008f52:	f7ff ff9b 	bl	8008e8c <__sfmoreglue>
 8008f56:	6030      	str	r0, [r6, #0]
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d1f6      	bne.n	8008f4a <__sfp+0x2a>
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f66:	81e3      	strh	r3, [r4, #14]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	6665      	str	r5, [r4, #100]	; 0x64
 8008f6e:	6025      	str	r5, [r4, #0]
 8008f70:	60a5      	str	r5, [r4, #8]
 8008f72:	6065      	str	r5, [r4, #4]
 8008f74:	6125      	str	r5, [r4, #16]
 8008f76:	6165      	str	r5, [r4, #20]
 8008f78:	61a5      	str	r5, [r4, #24]
 8008f7a:	2208      	movs	r2, #8
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f82:	f7fe f8f3 	bl	800716c <memset>
 8008f86:	6365      	str	r5, [r4, #52]	; 0x34
 8008f88:	63a5      	str	r5, [r4, #56]	; 0x38
 8008f8a:	64a5      	str	r5, [r4, #72]	; 0x48
 8008f8c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008f8e:	4620      	mov	r0, r4
 8008f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f92:	bf00      	nop
 8008f94:	0800bcd0 	.word	0x0800bcd0

08008f98 <__sfp_lock_acquire>:
 8008f98:	4770      	bx	lr

08008f9a <__sfp_lock_release>:
 8008f9a:	4770      	bx	lr

08008f9c <_malloc_trim_r>:
 8008f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	4f25      	ldr	r7, [pc, #148]	; (8009038 <_malloc_trim_r+0x9c>)
 8008fa2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009044 <_malloc_trim_r+0xa8>
 8008fa6:	4689      	mov	r9, r1
 8008fa8:	4606      	mov	r6, r0
 8008faa:	f000 fcba 	bl	8009922 <__malloc_lock>
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	685d      	ldr	r5, [r3, #4]
 8008fb2:	f1a8 0411 	sub.w	r4, r8, #17
 8008fb6:	f025 0503 	bic.w	r5, r5, #3
 8008fba:	442c      	add	r4, r5
 8008fbc:	ebc9 0404 	rsb	r4, r9, r4
 8008fc0:	fbb4 f4f8 	udiv	r4, r4, r8
 8008fc4:	3c01      	subs	r4, #1
 8008fc6:	fb08 f404 	mul.w	r4, r8, r4
 8008fca:	4544      	cmp	r4, r8
 8008fcc:	da05      	bge.n	8008fda <_malloc_trim_r+0x3e>
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f000 fca8 	bl	8009924 <__malloc_unlock>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f001 f921 	bl	800a224 <_sbrk_r>
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	442b      	add	r3, r5
 8008fe6:	4298      	cmp	r0, r3
 8008fe8:	d1f1      	bne.n	8008fce <_malloc_trim_r+0x32>
 8008fea:	4261      	negs	r1, r4
 8008fec:	4630      	mov	r0, r6
 8008fee:	f001 f919 	bl	800a224 <_sbrk_r>
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d110      	bne.n	8009018 <_malloc_trim_r+0x7c>
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f001 f913 	bl	800a224 <_sbrk_r>
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	1a83      	subs	r3, r0, r2
 8009002:	2b0f      	cmp	r3, #15
 8009004:	dde3      	ble.n	8008fce <_malloc_trim_r+0x32>
 8009006:	490d      	ldr	r1, [pc, #52]	; (800903c <_malloc_trim_r+0xa0>)
 8009008:	6809      	ldr	r1, [r1, #0]
 800900a:	1a40      	subs	r0, r0, r1
 800900c:	490c      	ldr	r1, [pc, #48]	; (8009040 <_malloc_trim_r+0xa4>)
 800900e:	f043 0301 	orr.w	r3, r3, #1
 8009012:	6008      	str	r0, [r1, #0]
 8009014:	6053      	str	r3, [r2, #4]
 8009016:	e7da      	b.n	8008fce <_malloc_trim_r+0x32>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	4a09      	ldr	r2, [pc, #36]	; (8009040 <_malloc_trim_r+0xa4>)
 800901c:	1b2d      	subs	r5, r5, r4
 800901e:	f045 0501 	orr.w	r5, r5, #1
 8009022:	605d      	str	r5, [r3, #4]
 8009024:	6813      	ldr	r3, [r2, #0]
 8009026:	4630      	mov	r0, r6
 8009028:	1b1c      	subs	r4, r3, r4
 800902a:	6014      	str	r4, [r2, #0]
 800902c:	f000 fc7a 	bl	8009924 <__malloc_unlock>
 8009030:	2001      	movs	r0, #1
 8009032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009036:	bf00      	nop
 8009038:	20000164 	.word	0x20000164
 800903c:	20000570 	.word	0x20000570
 8009040:	20002bcc 	.word	0x20002bcc
 8009044:	00000080 	.word	0x00000080

08009048 <_free_r>:
 8009048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904c:	4604      	mov	r4, r0
 800904e:	4688      	mov	r8, r1
 8009050:	2900      	cmp	r1, #0
 8009052:	f000 80ad 	beq.w	80091b0 <_free_r+0x168>
 8009056:	f000 fc64 	bl	8009922 <__malloc_lock>
 800905a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800905e:	4d55      	ldr	r5, [pc, #340]	; (80091b4 <_free_r+0x16c>)
 8009060:	f022 0001 	bic.w	r0, r2, #1
 8009064:	f1a8 0308 	sub.w	r3, r8, #8
 8009068:	181f      	adds	r7, r3, r0
 800906a:	68a9      	ldr	r1, [r5, #8]
 800906c:	687e      	ldr	r6, [r7, #4]
 800906e:	428f      	cmp	r7, r1
 8009070:	f026 0603 	bic.w	r6, r6, #3
 8009074:	f002 0201 	and.w	r2, r2, #1
 8009078:	d11b      	bne.n	80090b2 <_free_r+0x6a>
 800907a:	4430      	add	r0, r6
 800907c:	b93a      	cbnz	r2, 800908e <_free_r+0x46>
 800907e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	4410      	add	r0, r2
 8009086:	6899      	ldr	r1, [r3, #8]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	60ca      	str	r2, [r1, #12]
 800908c:	6091      	str	r1, [r2, #8]
 800908e:	f040 0201 	orr.w	r2, r0, #1
 8009092:	605a      	str	r2, [r3, #4]
 8009094:	60ab      	str	r3, [r5, #8]
 8009096:	4b48      	ldr	r3, [pc, #288]	; (80091b8 <_free_r+0x170>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4298      	cmp	r0, r3
 800909c:	d304      	bcc.n	80090a8 <_free_r+0x60>
 800909e:	4b47      	ldr	r3, [pc, #284]	; (80091bc <_free_r+0x174>)
 80090a0:	4620      	mov	r0, r4
 80090a2:	6819      	ldr	r1, [r3, #0]
 80090a4:	f7ff ff7a 	bl	8008f9c <_malloc_trim_r>
 80090a8:	4620      	mov	r0, r4
 80090aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ae:	f000 bc39 	b.w	8009924 <__malloc_unlock>
 80090b2:	607e      	str	r6, [r7, #4]
 80090b4:	b97a      	cbnz	r2, 80090d6 <_free_r+0x8e>
 80090b6:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80090ba:	1a5b      	subs	r3, r3, r1
 80090bc:	4408      	add	r0, r1
 80090be:	6899      	ldr	r1, [r3, #8]
 80090c0:	f105 0e08 	add.w	lr, r5, #8
 80090c4:	4571      	cmp	r1, lr
 80090c6:	d008      	beq.n	80090da <_free_r+0x92>
 80090c8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80090cc:	f8c1 e00c 	str.w	lr, [r1, #12]
 80090d0:	f8ce 1008 	str.w	r1, [lr, #8]
 80090d4:	e002      	b.n	80090dc <_free_r+0x94>
 80090d6:	2200      	movs	r2, #0
 80090d8:	e000      	b.n	80090dc <_free_r+0x94>
 80090da:	2201      	movs	r2, #1
 80090dc:	19b9      	adds	r1, r7, r6
 80090de:	6849      	ldr	r1, [r1, #4]
 80090e0:	07c9      	lsls	r1, r1, #31
 80090e2:	d40e      	bmi.n	8009102 <_free_r+0xba>
 80090e4:	4430      	add	r0, r6
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	b942      	cbnz	r2, 80090fc <_free_r+0xb4>
 80090ea:	4e35      	ldr	r6, [pc, #212]	; (80091c0 <_free_r+0x178>)
 80090ec:	42b1      	cmp	r1, r6
 80090ee:	d105      	bne.n	80090fc <_free_r+0xb4>
 80090f0:	616b      	str	r3, [r5, #20]
 80090f2:	612b      	str	r3, [r5, #16]
 80090f4:	2201      	movs	r2, #1
 80090f6:	60d9      	str	r1, [r3, #12]
 80090f8:	6099      	str	r1, [r3, #8]
 80090fa:	e002      	b.n	8009102 <_free_r+0xba>
 80090fc:	68fe      	ldr	r6, [r7, #12]
 80090fe:	60ce      	str	r6, [r1, #12]
 8009100:	60b1      	str	r1, [r6, #8]
 8009102:	f040 0101 	orr.w	r1, r0, #1
 8009106:	6059      	str	r1, [r3, #4]
 8009108:	5018      	str	r0, [r3, r0]
 800910a:	2a00      	cmp	r2, #0
 800910c:	d1cc      	bne.n	80090a8 <_free_r+0x60>
 800910e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009112:	d212      	bcs.n	800913a <_free_r+0xf2>
 8009114:	08c0      	lsrs	r0, r0, #3
 8009116:	1081      	asrs	r1, r0, #2
 8009118:	2201      	movs	r2, #1
 800911a:	fa02 f101 	lsl.w	r1, r2, r1
 800911e:	686a      	ldr	r2, [r5, #4]
 8009120:	3001      	adds	r0, #1
 8009122:	430a      	orrs	r2, r1
 8009124:	606a      	str	r2, [r5, #4]
 8009126:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800912a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800912e:	6099      	str	r1, [r3, #8]
 8009130:	3a08      	subs	r2, #8
 8009132:	60da      	str	r2, [r3, #12]
 8009134:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009138:	e038      	b.n	80091ac <_free_r+0x164>
 800913a:	0a42      	lsrs	r2, r0, #9
 800913c:	2a04      	cmp	r2, #4
 800913e:	d802      	bhi.n	8009146 <_free_r+0xfe>
 8009140:	0982      	lsrs	r2, r0, #6
 8009142:	3238      	adds	r2, #56	; 0x38
 8009144:	e015      	b.n	8009172 <_free_r+0x12a>
 8009146:	2a14      	cmp	r2, #20
 8009148:	d801      	bhi.n	800914e <_free_r+0x106>
 800914a:	325b      	adds	r2, #91	; 0x5b
 800914c:	e011      	b.n	8009172 <_free_r+0x12a>
 800914e:	2a54      	cmp	r2, #84	; 0x54
 8009150:	d802      	bhi.n	8009158 <_free_r+0x110>
 8009152:	0b02      	lsrs	r2, r0, #12
 8009154:	326e      	adds	r2, #110	; 0x6e
 8009156:	e00c      	b.n	8009172 <_free_r+0x12a>
 8009158:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800915c:	d802      	bhi.n	8009164 <_free_r+0x11c>
 800915e:	0bc2      	lsrs	r2, r0, #15
 8009160:	3277      	adds	r2, #119	; 0x77
 8009162:	e006      	b.n	8009172 <_free_r+0x12a>
 8009164:	f240 5154 	movw	r1, #1364	; 0x554
 8009168:	428a      	cmp	r2, r1
 800916a:	bf9a      	itte	ls
 800916c:	0c82      	lsrls	r2, r0, #18
 800916e:	327c      	addls	r2, #124	; 0x7c
 8009170:	227e      	movhi	r2, #126	; 0x7e
 8009172:	1c51      	adds	r1, r2, #1
 8009174:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009178:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800917c:	4f0d      	ldr	r7, [pc, #52]	; (80091b4 <_free_r+0x16c>)
 800917e:	428e      	cmp	r6, r1
 8009180:	d10b      	bne.n	800919a <_free_r+0x152>
 8009182:	2101      	movs	r1, #1
 8009184:	1092      	asrs	r2, r2, #2
 8009186:	fa01 f202 	lsl.w	r2, r1, r2
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	4311      	orrs	r1, r2
 800918e:	6079      	str	r1, [r7, #4]
 8009190:	4631      	mov	r1, r6
 8009192:	e008      	b.n	80091a6 <_free_r+0x15e>
 8009194:	6889      	ldr	r1, [r1, #8]
 8009196:	428e      	cmp	r6, r1
 8009198:	d004      	beq.n	80091a4 <_free_r+0x15c>
 800919a:	684a      	ldr	r2, [r1, #4]
 800919c:	f022 0203 	bic.w	r2, r2, #3
 80091a0:	4290      	cmp	r0, r2
 80091a2:	d3f7      	bcc.n	8009194 <_free_r+0x14c>
 80091a4:	68ce      	ldr	r6, [r1, #12]
 80091a6:	60de      	str	r6, [r3, #12]
 80091a8:	6099      	str	r1, [r3, #8]
 80091aa:	60b3      	str	r3, [r6, #8]
 80091ac:	60cb      	str	r3, [r1, #12]
 80091ae:	e77b      	b.n	80090a8 <_free_r+0x60>
 80091b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b4:	20000164 	.word	0x20000164
 80091b8:	2000056c 	.word	0x2000056c
 80091bc:	20002bc8 	.word	0x20002bc8
 80091c0:	2000016c 	.word	0x2000016c

080091c4 <__sfvwrite_r>:
 80091c4:	6893      	ldr	r3, [r2, #8]
 80091c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ca:	4606      	mov	r6, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	4690      	mov	r8, r2
 80091d0:	b90b      	cbnz	r3, 80091d6 <__sfvwrite_r+0x12>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e13b      	b.n	800944e <__sfvwrite_r+0x28a>
 80091d6:	898b      	ldrh	r3, [r1, #12]
 80091d8:	0718      	lsls	r0, r3, #28
 80091da:	d50f      	bpl.n	80091fc <__sfvwrite_r+0x38>
 80091dc:	690b      	ldr	r3, [r1, #16]
 80091de:	b16b      	cbz	r3, 80091fc <__sfvwrite_r+0x38>
 80091e0:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 80091e4:	f8d8 b000 	ldr.w	fp, [r8]
 80091e8:	f009 0502 	and.w	r5, r9, #2
 80091ec:	b2ad      	uxth	r5, r5
 80091ee:	b355      	cbz	r5, 8009246 <__sfvwrite_r+0x82>
 80091f0:	f04f 0900 	mov.w	r9, #0
 80091f4:	464f      	mov	r7, r9
 80091f6:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8009454 <__sfvwrite_r+0x290>
 80091fa:	e01b      	b.n	8009234 <__sfvwrite_r+0x70>
 80091fc:	4621      	mov	r1, r4
 80091fe:	4630      	mov	r0, r6
 8009200:	f001 f8f4 	bl	800a3ec <__swsetup_r>
 8009204:	2800      	cmp	r0, #0
 8009206:	d0eb      	beq.n	80091e0 <__sfvwrite_r+0x1c>
 8009208:	e11f      	b.n	800944a <__sfvwrite_r+0x286>
 800920a:	4557      	cmp	r7, sl
 800920c:	463b      	mov	r3, r7
 800920e:	464a      	mov	r2, r9
 8009210:	bf28      	it	cs
 8009212:	4653      	movcs	r3, sl
 8009214:	6a21      	ldr	r1, [r4, #32]
 8009216:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009218:	4630      	mov	r0, r6
 800921a:	47a8      	blx	r5
 800921c:	2800      	cmp	r0, #0
 800921e:	f340 8110 	ble.w	8009442 <__sfvwrite_r+0x27e>
 8009222:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009226:	4481      	add	r9, r0
 8009228:	1a3f      	subs	r7, r7, r0
 800922a:	1a18      	subs	r0, r3, r0
 800922c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009230:	2800      	cmp	r0, #0
 8009232:	d0ce      	beq.n	80091d2 <__sfvwrite_r+0xe>
 8009234:	2f00      	cmp	r7, #0
 8009236:	d1e8      	bne.n	800920a <__sfvwrite_r+0x46>
 8009238:	f8db 9000 	ldr.w	r9, [fp]
 800923c:	f8db 7004 	ldr.w	r7, [fp, #4]
 8009240:	f10b 0b08 	add.w	fp, fp, #8
 8009244:	e7f6      	b.n	8009234 <__sfvwrite_r+0x70>
 8009246:	f019 0901 	ands.w	r9, r9, #1
 800924a:	d003      	beq.n	8009254 <__sfvwrite_r+0x90>
 800924c:	9500      	str	r5, [sp, #0]
 800924e:	46a9      	mov	r9, r5
 8009250:	46aa      	mov	sl, r5
 8009252:	e0bd      	b.n	80093d0 <__sfvwrite_r+0x20c>
 8009254:	464f      	mov	r7, r9
 8009256:	b937      	cbnz	r7, 8009266 <__sfvwrite_r+0xa2>
 8009258:	f8db 9000 	ldr.w	r9, [fp]
 800925c:	f8db 7004 	ldr.w	r7, [fp, #4]
 8009260:	f10b 0b08 	add.w	fp, fp, #8
 8009264:	e7f7      	b.n	8009256 <__sfvwrite_r+0x92>
 8009266:	89a2      	ldrh	r2, [r4, #12]
 8009268:	68a5      	ldr	r5, [r4, #8]
 800926a:	0591      	lsls	r1, r2, #22
 800926c:	d552      	bpl.n	8009314 <__sfvwrite_r+0x150>
 800926e:	42af      	cmp	r7, r5
 8009270:	d342      	bcc.n	80092f8 <__sfvwrite_r+0x134>
 8009272:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009276:	d03d      	beq.n	80092f4 <__sfvwrite_r+0x130>
 8009278:	6921      	ldr	r1, [r4, #16]
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	1a5b      	subs	r3, r3, r1
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	6963      	ldr	r3, [r4, #20]
 8009282:	2002      	movs	r0, #2
 8009284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009288:	fb93 faf0 	sdiv	sl, r3, r0
 800928c:	9b00      	ldr	r3, [sp, #0]
 800928e:	3301      	adds	r3, #1
 8009290:	443b      	add	r3, r7
 8009292:	459a      	cmp	sl, r3
 8009294:	bf38      	it	cc
 8009296:	469a      	movcc	sl, r3
 8009298:	0553      	lsls	r3, r2, #21
 800929a:	d510      	bpl.n	80092be <__sfvwrite_r+0xfa>
 800929c:	4651      	mov	r1, sl
 800929e:	4630      	mov	r0, r6
 80092a0:	f000 f904 	bl	80094ac <_malloc_r>
 80092a4:	4605      	mov	r5, r0
 80092a6:	b1c0      	cbz	r0, 80092da <__sfvwrite_r+0x116>
 80092a8:	9a00      	ldr	r2, [sp, #0]
 80092aa:	6921      	ldr	r1, [r4, #16]
 80092ac:	f7fd ff53 	bl	8007156 <memcpy>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	e010      	b.n	80092e0 <__sfvwrite_r+0x11c>
 80092be:	4652      	mov	r2, sl
 80092c0:	4630      	mov	r0, r6
 80092c2:	f000 fe07 	bl	8009ed4 <_realloc_r>
 80092c6:	4605      	mov	r5, r0
 80092c8:	b950      	cbnz	r0, 80092e0 <__sfvwrite_r+0x11c>
 80092ca:	6921      	ldr	r1, [r4, #16]
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff febb 	bl	8009048 <_free_r>
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	230c      	movs	r3, #12
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	e0b0      	b.n	8009442 <__sfvwrite_r+0x27e>
 80092e0:	9b00      	ldr	r3, [sp, #0]
 80092e2:	6125      	str	r5, [r4, #16]
 80092e4:	441d      	add	r5, r3
 80092e6:	ebc3 030a 	rsb	r3, r3, sl
 80092ea:	6025      	str	r5, [r4, #0]
 80092ec:	f8c4 a014 	str.w	sl, [r4, #20]
 80092f0:	463d      	mov	r5, r7
 80092f2:	60a3      	str	r3, [r4, #8]
 80092f4:	42af      	cmp	r7, r5
 80092f6:	d200      	bcs.n	80092fa <__sfvwrite_r+0x136>
 80092f8:	463d      	mov	r5, r7
 80092fa:	462a      	mov	r2, r5
 80092fc:	4649      	mov	r1, r9
 80092fe:	6820      	ldr	r0, [r4, #0]
 8009300:	f000 faf4 	bl	80098ec <memmove>
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	1b5b      	subs	r3, r3, r5
 8009308:	60a3      	str	r3, [r4, #8]
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	441d      	add	r5, r3
 800930e:	6025      	str	r5, [r4, #0]
 8009310:	463d      	mov	r5, r7
 8009312:	e029      	b.n	8009368 <__sfvwrite_r+0x1a4>
 8009314:	6820      	ldr	r0, [r4, #0]
 8009316:	6923      	ldr	r3, [r4, #16]
 8009318:	4298      	cmp	r0, r3
 800931a:	d802      	bhi.n	8009322 <__sfvwrite_r+0x15e>
 800931c:	6962      	ldr	r2, [r4, #20]
 800931e:	4297      	cmp	r7, r2
 8009320:	d213      	bcs.n	800934a <__sfvwrite_r+0x186>
 8009322:	42bd      	cmp	r5, r7
 8009324:	bf28      	it	cs
 8009326:	463d      	movcs	r5, r7
 8009328:	462a      	mov	r2, r5
 800932a:	4649      	mov	r1, r9
 800932c:	f000 fade 	bl	80098ec <memmove>
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	6822      	ldr	r2, [r4, #0]
 8009334:	1b5b      	subs	r3, r3, r5
 8009336:	442a      	add	r2, r5
 8009338:	60a3      	str	r3, [r4, #8]
 800933a:	6022      	str	r2, [r4, #0]
 800933c:	b9a3      	cbnz	r3, 8009368 <__sfvwrite_r+0x1a4>
 800933e:	4621      	mov	r1, r4
 8009340:	4630      	mov	r0, r6
 8009342:	f001 f9e1 	bl	800a708 <_fflush_r>
 8009346:	b178      	cbz	r0, 8009368 <__sfvwrite_r+0x1a4>
 8009348:	e07b      	b.n	8009442 <__sfvwrite_r+0x27e>
 800934a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800934e:	42bb      	cmp	r3, r7
 8009350:	bf28      	it	cs
 8009352:	463b      	movcs	r3, r7
 8009354:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009356:	fb93 f3f2 	sdiv	r3, r3, r2
 800935a:	6a21      	ldr	r1, [r4, #32]
 800935c:	4353      	muls	r3, r2
 800935e:	4630      	mov	r0, r6
 8009360:	464a      	mov	r2, r9
 8009362:	47a8      	blx	r5
 8009364:	1e05      	subs	r5, r0, #0
 8009366:	dd6c      	ble.n	8009442 <__sfvwrite_r+0x27e>
 8009368:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800936c:	44a9      	add	r9, r5
 800936e:	1b7f      	subs	r7, r7, r5
 8009370:	1b5d      	subs	r5, r3, r5
 8009372:	f8c8 5008 	str.w	r5, [r8, #8]
 8009376:	2d00      	cmp	r5, #0
 8009378:	f47f af6d 	bne.w	8009256 <__sfvwrite_r+0x92>
 800937c:	e729      	b.n	80091d2 <__sfvwrite_r+0xe>
 800937e:	9b00      	ldr	r3, [sp, #0]
 8009380:	b383      	cbz	r3, 80093e4 <__sfvwrite_r+0x220>
 8009382:	6820      	ldr	r0, [r4, #0]
 8009384:	6921      	ldr	r1, [r4, #16]
 8009386:	6962      	ldr	r2, [r4, #20]
 8009388:	4555      	cmp	r5, sl
 800938a:	462b      	mov	r3, r5
 800938c:	bf28      	it	cs
 800938e:	4653      	movcs	r3, sl
 8009390:	4288      	cmp	r0, r1
 8009392:	d936      	bls.n	8009402 <__sfvwrite_r+0x23e>
 8009394:	68a7      	ldr	r7, [r4, #8]
 8009396:	4417      	add	r7, r2
 8009398:	42bb      	cmp	r3, r7
 800939a:	dd32      	ble.n	8009402 <__sfvwrite_r+0x23e>
 800939c:	4649      	mov	r1, r9
 800939e:	463a      	mov	r2, r7
 80093a0:	f000 faa4 	bl	80098ec <memmove>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	443b      	add	r3, r7
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	4621      	mov	r1, r4
 80093ac:	4630      	mov	r0, r6
 80093ae:	f001 f9ab 	bl	800a708 <_fflush_r>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d145      	bne.n	8009442 <__sfvwrite_r+0x27e>
 80093b6:	1bed      	subs	r5, r5, r7
 80093b8:	d03c      	beq.n	8009434 <__sfvwrite_r+0x270>
 80093ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093be:	44b9      	add	r9, r7
 80093c0:	ebc7 0a0a 	rsb	sl, r7, sl
 80093c4:	1bdf      	subs	r7, r3, r7
 80093c6:	f8c8 7008 	str.w	r7, [r8, #8]
 80093ca:	2f00      	cmp	r7, #0
 80093cc:	f43f af01 	beq.w	80091d2 <__sfvwrite_r+0xe>
 80093d0:	f1ba 0f00 	cmp.w	sl, #0
 80093d4:	d1d3      	bne.n	800937e <__sfvwrite_r+0x1ba>
 80093d6:	2300      	movs	r3, #0
 80093d8:	e89b 0600 	ldmia.w	fp, {r9, sl}
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	f10b 0b08 	add.w	fp, fp, #8
 80093e2:	e7f5      	b.n	80093d0 <__sfvwrite_r+0x20c>
 80093e4:	4652      	mov	r2, sl
 80093e6:	210a      	movs	r1, #10
 80093e8:	4648      	mov	r0, r9
 80093ea:	f7f6 ff01 	bl	80001f0 <memchr>
 80093ee:	b118      	cbz	r0, 80093f8 <__sfvwrite_r+0x234>
 80093f0:	3001      	adds	r0, #1
 80093f2:	ebc9 0500 	rsb	r5, r9, r0
 80093f6:	e001      	b.n	80093fc <__sfvwrite_r+0x238>
 80093f8:	f10a 0501 	add.w	r5, sl, #1
 80093fc:	2301      	movs	r3, #1
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	e7bf      	b.n	8009382 <__sfvwrite_r+0x1be>
 8009402:	4293      	cmp	r3, r2
 8009404:	db08      	blt.n	8009418 <__sfvwrite_r+0x254>
 8009406:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8009408:	6a21      	ldr	r1, [r4, #32]
 800940a:	4613      	mov	r3, r2
 800940c:	4630      	mov	r0, r6
 800940e:	464a      	mov	r2, r9
 8009410:	47b8      	blx	r7
 8009412:	1e07      	subs	r7, r0, #0
 8009414:	dccf      	bgt.n	80093b6 <__sfvwrite_r+0x1f2>
 8009416:	e014      	b.n	8009442 <__sfvwrite_r+0x27e>
 8009418:	461a      	mov	r2, r3
 800941a:	4649      	mov	r1, r9
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	f000 fa65 	bl	80098ec <memmove>
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	68a2      	ldr	r2, [r4, #8]
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	60a2      	str	r2, [r4, #8]
 800942a:	6822      	ldr	r2, [r4, #0]
 800942c:	441a      	add	r2, r3
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	461f      	mov	r7, r3
 8009432:	e7c0      	b.n	80093b6 <__sfvwrite_r+0x1f2>
 8009434:	4621      	mov	r1, r4
 8009436:	4630      	mov	r0, r6
 8009438:	f001 f966 	bl	800a708 <_fflush_r>
 800943c:	b908      	cbnz	r0, 8009442 <__sfvwrite_r+0x27e>
 800943e:	9500      	str	r5, [sp, #0]
 8009440:	e7bb      	b.n	80093ba <__sfvwrite_r+0x1f6>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009448:	81a3      	strh	r3, [r4, #12]
 800944a:	f04f 30ff 	mov.w	r0, #4294967295
 800944e:	b003      	add	sp, #12
 8009450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009454:	7ffffc00 	.word	0x7ffffc00

08009458 <_fwalk_reent>:
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	4680      	mov	r8, r0
 800945e:	4689      	mov	r9, r1
 8009460:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8009464:	2600      	movs	r6, #0
 8009466:	b194      	cbz	r4, 800948e <_fwalk_reent+0x36>
 8009468:	68a5      	ldr	r5, [r4, #8]
 800946a:	6867      	ldr	r7, [r4, #4]
 800946c:	3f01      	subs	r7, #1
 800946e:	d40c      	bmi.n	800948a <_fwalk_reent+0x32>
 8009470:	89ab      	ldrh	r3, [r5, #12]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d907      	bls.n	8009486 <_fwalk_reent+0x2e>
 8009476:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800947a:	3301      	adds	r3, #1
 800947c:	d003      	beq.n	8009486 <_fwalk_reent+0x2e>
 800947e:	4629      	mov	r1, r5
 8009480:	4640      	mov	r0, r8
 8009482:	47c8      	blx	r9
 8009484:	4306      	orrs	r6, r0
 8009486:	3568      	adds	r5, #104	; 0x68
 8009488:	e7f0      	b.n	800946c <_fwalk_reent+0x14>
 800948a:	6824      	ldr	r4, [r4, #0]
 800948c:	e7eb      	b.n	8009466 <_fwalk_reent+0xe>
 800948e:	4630      	mov	r0, r6
 8009490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009494 <_localeconv_r>:
 8009494:	4800      	ldr	r0, [pc, #0]	; (8009498 <_localeconv_r+0x4>)
 8009496:	4770      	bx	lr
 8009498:	2000012c 	.word	0x2000012c

0800949c <malloc>:
 800949c:	4b02      	ldr	r3, [pc, #8]	; (80094a8 <malloc+0xc>)
 800949e:	4601      	mov	r1, r0
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f000 b803 	b.w	80094ac <_malloc_r>
 80094a6:	bf00      	nop
 80094a8:	20000128 	.word	0x20000128

080094ac <_malloc_r>:
 80094ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	f101 040b 	add.w	r4, r1, #11
 80094b4:	2c16      	cmp	r4, #22
 80094b6:	b085      	sub	sp, #20
 80094b8:	4681      	mov	r9, r0
 80094ba:	d903      	bls.n	80094c4 <_malloc_r+0x18>
 80094bc:	f034 0407 	bics.w	r4, r4, #7
 80094c0:	d501      	bpl.n	80094c6 <_malloc_r+0x1a>
 80094c2:	e002      	b.n	80094ca <_malloc_r+0x1e>
 80094c4:	2410      	movs	r4, #16
 80094c6:	428c      	cmp	r4, r1
 80094c8:	d203      	bcs.n	80094d2 <_malloc_r+0x26>
 80094ca:	230c      	movs	r3, #12
 80094cc:	f8c9 3000 	str.w	r3, [r9]
 80094d0:	e1ea      	b.n	80098a8 <_malloc_r+0x3fc>
 80094d2:	4648      	mov	r0, r9
 80094d4:	f000 fa25 	bl	8009922 <__malloc_lock>
 80094d8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80094dc:	4d9e      	ldr	r5, [pc, #632]	; (8009758 <_malloc_r+0x2ac>)
 80094de:	d217      	bcs.n	8009510 <_malloc_r+0x64>
 80094e0:	f104 0208 	add.w	r2, r4, #8
 80094e4:	442a      	add	r2, r5
 80094e6:	f1a2 0108 	sub.w	r1, r2, #8
 80094ea:	6856      	ldr	r6, [r2, #4]
 80094ec:	428e      	cmp	r6, r1
 80094ee:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80094f2:	d102      	bne.n	80094fa <_malloc_r+0x4e>
 80094f4:	68d6      	ldr	r6, [r2, #12]
 80094f6:	42b2      	cmp	r2, r6
 80094f8:	d008      	beq.n	800950c <_malloc_r+0x60>
 80094fa:	6873      	ldr	r3, [r6, #4]
 80094fc:	68f2      	ldr	r2, [r6, #12]
 80094fe:	68b1      	ldr	r1, [r6, #8]
 8009500:	f023 0303 	bic.w	r3, r3, #3
 8009504:	60ca      	str	r2, [r1, #12]
 8009506:	4433      	add	r3, r6
 8009508:	6091      	str	r1, [r2, #8]
 800950a:	e02f      	b.n	800956c <_malloc_r+0xc0>
 800950c:	3302      	adds	r3, #2
 800950e:	e03d      	b.n	800958c <_malloc_r+0xe0>
 8009510:	0a63      	lsrs	r3, r4, #9
 8009512:	d01a      	beq.n	800954a <_malloc_r+0x9e>
 8009514:	2b04      	cmp	r3, #4
 8009516:	d802      	bhi.n	800951e <_malloc_r+0x72>
 8009518:	09a3      	lsrs	r3, r4, #6
 800951a:	3338      	adds	r3, #56	; 0x38
 800951c:	e018      	b.n	8009550 <_malloc_r+0xa4>
 800951e:	2b14      	cmp	r3, #20
 8009520:	d801      	bhi.n	8009526 <_malloc_r+0x7a>
 8009522:	335b      	adds	r3, #91	; 0x5b
 8009524:	e014      	b.n	8009550 <_malloc_r+0xa4>
 8009526:	2b54      	cmp	r3, #84	; 0x54
 8009528:	d802      	bhi.n	8009530 <_malloc_r+0x84>
 800952a:	0b23      	lsrs	r3, r4, #12
 800952c:	336e      	adds	r3, #110	; 0x6e
 800952e:	e00f      	b.n	8009550 <_malloc_r+0xa4>
 8009530:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009534:	d802      	bhi.n	800953c <_malloc_r+0x90>
 8009536:	0be3      	lsrs	r3, r4, #15
 8009538:	3377      	adds	r3, #119	; 0x77
 800953a:	e009      	b.n	8009550 <_malloc_r+0xa4>
 800953c:	f240 5254 	movw	r2, #1364	; 0x554
 8009540:	4293      	cmp	r3, r2
 8009542:	d804      	bhi.n	800954e <_malloc_r+0xa2>
 8009544:	0ca3      	lsrs	r3, r4, #18
 8009546:	337c      	adds	r3, #124	; 0x7c
 8009548:	e002      	b.n	8009550 <_malloc_r+0xa4>
 800954a:	233f      	movs	r3, #63	; 0x3f
 800954c:	e000      	b.n	8009550 <_malloc_r+0xa4>
 800954e:	237e      	movs	r3, #126	; 0x7e
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009556:	f1a2 0008 	sub.w	r0, r2, #8
 800955a:	6856      	ldr	r6, [r2, #4]
 800955c:	e00c      	b.n	8009578 <_malloc_r+0xcc>
 800955e:	2900      	cmp	r1, #0
 8009560:	68f1      	ldr	r1, [r6, #12]
 8009562:	db08      	blt.n	8009576 <_malloc_r+0xca>
 8009564:	68b3      	ldr	r3, [r6, #8]
 8009566:	60d9      	str	r1, [r3, #12]
 8009568:	608b      	str	r3, [r1, #8]
 800956a:	18b3      	adds	r3, r6, r2
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	f042 0201 	orr.w	r2, r2, #1
 8009572:	605a      	str	r2, [r3, #4]
 8009574:	e1a3      	b.n	80098be <_malloc_r+0x412>
 8009576:	460e      	mov	r6, r1
 8009578:	4286      	cmp	r6, r0
 800957a:	d006      	beq.n	800958a <_malloc_r+0xde>
 800957c:	6872      	ldr	r2, [r6, #4]
 800957e:	f022 0203 	bic.w	r2, r2, #3
 8009582:	1b11      	subs	r1, r2, r4
 8009584:	290f      	cmp	r1, #15
 8009586:	ddea      	ble.n	800955e <_malloc_r+0xb2>
 8009588:	3b01      	subs	r3, #1
 800958a:	3301      	adds	r3, #1
 800958c:	4a72      	ldr	r2, [pc, #456]	; (8009758 <_malloc_r+0x2ac>)
 800958e:	692e      	ldr	r6, [r5, #16]
 8009590:	f102 0708 	add.w	r7, r2, #8
 8009594:	42be      	cmp	r6, r7
 8009596:	4639      	mov	r1, r7
 8009598:	d079      	beq.n	800968e <_malloc_r+0x1e2>
 800959a:	6870      	ldr	r0, [r6, #4]
 800959c:	f020 0003 	bic.w	r0, r0, #3
 80095a0:	ebc4 0e00 	rsb	lr, r4, r0
 80095a4:	f1be 0f0f 	cmp.w	lr, #15
 80095a8:	dd0d      	ble.n	80095c6 <_malloc_r+0x11a>
 80095aa:	1933      	adds	r3, r6, r4
 80095ac:	f044 0401 	orr.w	r4, r4, #1
 80095b0:	6074      	str	r4, [r6, #4]
 80095b2:	6153      	str	r3, [r2, #20]
 80095b4:	6113      	str	r3, [r2, #16]
 80095b6:	f04e 0201 	orr.w	r2, lr, #1
 80095ba:	60df      	str	r7, [r3, #12]
 80095bc:	609f      	str	r7, [r3, #8]
 80095be:	605a      	str	r2, [r3, #4]
 80095c0:	f843 e00e 	str.w	lr, [r3, lr]
 80095c4:	e17b      	b.n	80098be <_malloc_r+0x412>
 80095c6:	f1be 0f00 	cmp.w	lr, #0
 80095ca:	6157      	str	r7, [r2, #20]
 80095cc:	6117      	str	r7, [r2, #16]
 80095ce:	db05      	blt.n	80095dc <_malloc_r+0x130>
 80095d0:	4430      	add	r0, r6
 80095d2:	6843      	ldr	r3, [r0, #4]
 80095d4:	f043 0301 	orr.w	r3, r3, #1
 80095d8:	6043      	str	r3, [r0, #4]
 80095da:	e170      	b.n	80098be <_malloc_r+0x412>
 80095dc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80095e0:	d215      	bcs.n	800960e <_malloc_r+0x162>
 80095e2:	08c0      	lsrs	r0, r0, #3
 80095e4:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80095e8:	2701      	movs	r7, #1
 80095ea:	fa07 fe0e 	lsl.w	lr, r7, lr
 80095ee:	6857      	ldr	r7, [r2, #4]
 80095f0:	3001      	adds	r0, #1
 80095f2:	ea4e 0707 	orr.w	r7, lr, r7
 80095f6:	6057      	str	r7, [r2, #4]
 80095f8:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80095fc:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8009600:	f8c6 e008 	str.w	lr, [r6, #8]
 8009604:	3f08      	subs	r7, #8
 8009606:	60f7      	str	r7, [r6, #12]
 8009608:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 800960c:	e03d      	b.n	800968a <_malloc_r+0x1de>
 800960e:	0a42      	lsrs	r2, r0, #9
 8009610:	2a04      	cmp	r2, #4
 8009612:	d802      	bhi.n	800961a <_malloc_r+0x16e>
 8009614:	0982      	lsrs	r2, r0, #6
 8009616:	3238      	adds	r2, #56	; 0x38
 8009618:	e015      	b.n	8009646 <_malloc_r+0x19a>
 800961a:	2a14      	cmp	r2, #20
 800961c:	d801      	bhi.n	8009622 <_malloc_r+0x176>
 800961e:	325b      	adds	r2, #91	; 0x5b
 8009620:	e011      	b.n	8009646 <_malloc_r+0x19a>
 8009622:	2a54      	cmp	r2, #84	; 0x54
 8009624:	d802      	bhi.n	800962c <_malloc_r+0x180>
 8009626:	0b02      	lsrs	r2, r0, #12
 8009628:	326e      	adds	r2, #110	; 0x6e
 800962a:	e00c      	b.n	8009646 <_malloc_r+0x19a>
 800962c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009630:	d802      	bhi.n	8009638 <_malloc_r+0x18c>
 8009632:	0bc2      	lsrs	r2, r0, #15
 8009634:	3277      	adds	r2, #119	; 0x77
 8009636:	e006      	b.n	8009646 <_malloc_r+0x19a>
 8009638:	f240 5754 	movw	r7, #1364	; 0x554
 800963c:	42ba      	cmp	r2, r7
 800963e:	bf9a      	itte	ls
 8009640:	0c82      	lsrls	r2, r0, #18
 8009642:	327c      	addls	r2, #124	; 0x7c
 8009644:	227e      	movhi	r2, #126	; 0x7e
 8009646:	1c57      	adds	r7, r2, #1
 8009648:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800964c:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009650:	f8df c104 	ldr.w	ip, [pc, #260]	; 8009758 <_malloc_r+0x2ac>
 8009654:	45be      	cmp	lr, r7
 8009656:	d10d      	bne.n	8009674 <_malloc_r+0x1c8>
 8009658:	2001      	movs	r0, #1
 800965a:	1092      	asrs	r2, r2, #2
 800965c:	fa00 f202 	lsl.w	r2, r0, r2
 8009660:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8009664:	4310      	orrs	r0, r2
 8009666:	f8cc 0004 	str.w	r0, [ip, #4]
 800966a:	4672      	mov	r2, lr
 800966c:	e009      	b.n	8009682 <_malloc_r+0x1d6>
 800966e:	68bf      	ldr	r7, [r7, #8]
 8009670:	45be      	cmp	lr, r7
 8009672:	d004      	beq.n	800967e <_malloc_r+0x1d2>
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	f022 0203 	bic.w	r2, r2, #3
 800967a:	4290      	cmp	r0, r2
 800967c:	d3f7      	bcc.n	800966e <_malloc_r+0x1c2>
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	46be      	mov	lr, r7
 8009682:	60f2      	str	r2, [r6, #12]
 8009684:	f8c6 e008 	str.w	lr, [r6, #8]
 8009688:	6096      	str	r6, [r2, #8]
 800968a:	f8ce 600c 	str.w	r6, [lr, #12]
 800968e:	2001      	movs	r0, #1
 8009690:	109a      	asrs	r2, r3, #2
 8009692:	fa00 f202 	lsl.w	r2, r0, r2
 8009696:	6868      	ldr	r0, [r5, #4]
 8009698:	4282      	cmp	r2, r0
 800969a:	d85f      	bhi.n	800975c <_malloc_r+0x2b0>
 800969c:	4202      	tst	r2, r0
 800969e:	d106      	bne.n	80096ae <_malloc_r+0x202>
 80096a0:	f023 0303 	bic.w	r3, r3, #3
 80096a4:	0052      	lsls	r2, r2, #1
 80096a6:	4202      	tst	r2, r0
 80096a8:	f103 0304 	add.w	r3, r3, #4
 80096ac:	d0fa      	beq.n	80096a4 <_malloc_r+0x1f8>
 80096ae:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80096b2:	46c2      	mov	sl, r8
 80096b4:	469c      	mov	ip, r3
 80096b6:	f8da 600c 	ldr.w	r6, [sl, #12]
 80096ba:	4556      	cmp	r6, sl
 80096bc:	d02c      	beq.n	8009718 <_malloc_r+0x26c>
 80096be:	6870      	ldr	r0, [r6, #4]
 80096c0:	68f7      	ldr	r7, [r6, #12]
 80096c2:	f020 0003 	bic.w	r0, r0, #3
 80096c6:	ebc4 0e00 	rsb	lr, r4, r0
 80096ca:	f1be 0f0f 	cmp.w	lr, #15
 80096ce:	dd11      	ble.n	80096f4 <_malloc_r+0x248>
 80096d0:	1933      	adds	r3, r6, r4
 80096d2:	f044 0401 	orr.w	r4, r4, #1
 80096d6:	6074      	str	r4, [r6, #4]
 80096d8:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80096dc:	60d7      	str	r7, [r2, #12]
 80096de:	60ba      	str	r2, [r7, #8]
 80096e0:	f04e 0201 	orr.w	r2, lr, #1
 80096e4:	616b      	str	r3, [r5, #20]
 80096e6:	612b      	str	r3, [r5, #16]
 80096e8:	60d9      	str	r1, [r3, #12]
 80096ea:	6099      	str	r1, [r3, #8]
 80096ec:	605a      	str	r2, [r3, #4]
 80096ee:	f843 e00e 	str.w	lr, [r3, lr]
 80096f2:	e00b      	b.n	800970c <_malloc_r+0x260>
 80096f4:	f1be 0f00 	cmp.w	lr, #0
 80096f8:	db0c      	blt.n	8009714 <_malloc_r+0x268>
 80096fa:	1833      	adds	r3, r6, r0
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	f042 0201 	orr.w	r2, r2, #1
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8009708:	60df      	str	r7, [r3, #12]
 800970a:	60bb      	str	r3, [r7, #8]
 800970c:	4648      	mov	r0, r9
 800970e:	f000 f909 	bl	8009924 <__malloc_unlock>
 8009712:	e0d8      	b.n	80098c6 <_malloc_r+0x41a>
 8009714:	463e      	mov	r6, r7
 8009716:	e7d0      	b.n	80096ba <_malloc_r+0x20e>
 8009718:	f10c 0c01 	add.w	ip, ip, #1
 800971c:	f01c 0f03 	tst.w	ip, #3
 8009720:	f10a 0a08 	add.w	sl, sl, #8
 8009724:	d1c7      	bne.n	80096b6 <_malloc_r+0x20a>
 8009726:	0798      	lsls	r0, r3, #30
 8009728:	d104      	bne.n	8009734 <_malloc_r+0x288>
 800972a:	686b      	ldr	r3, [r5, #4]
 800972c:	ea23 0302 	bic.w	r3, r3, r2
 8009730:	606b      	str	r3, [r5, #4]
 8009732:	e005      	b.n	8009740 <_malloc_r+0x294>
 8009734:	f858 0908 	ldr.w	r0, [r8], #-8
 8009738:	4580      	cmp	r8, r0
 800973a:	f103 33ff 	add.w	r3, r3, #4294967295
 800973e:	d0f2      	beq.n	8009726 <_malloc_r+0x27a>
 8009740:	6868      	ldr	r0, [r5, #4]
 8009742:	0052      	lsls	r2, r2, #1
 8009744:	4282      	cmp	r2, r0
 8009746:	d809      	bhi.n	800975c <_malloc_r+0x2b0>
 8009748:	b142      	cbz	r2, 800975c <_malloc_r+0x2b0>
 800974a:	4663      	mov	r3, ip
 800974c:	4202      	tst	r2, r0
 800974e:	d1ae      	bne.n	80096ae <_malloc_r+0x202>
 8009750:	3304      	adds	r3, #4
 8009752:	0052      	lsls	r2, r2, #1
 8009754:	e7fa      	b.n	800974c <_malloc_r+0x2a0>
 8009756:	bf00      	nop
 8009758:	20000164 	.word	0x20000164
 800975c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009760:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009764:	f026 0603 	bic.w	r6, r6, #3
 8009768:	42b4      	cmp	r4, r6
 800976a:	d803      	bhi.n	8009774 <_malloc_r+0x2c8>
 800976c:	1b33      	subs	r3, r6, r4
 800976e:	2b0f      	cmp	r3, #15
 8009770:	f300 809c 	bgt.w	80098ac <_malloc_r+0x400>
 8009774:	4a56      	ldr	r2, [pc, #344]	; (80098d0 <_malloc_r+0x424>)
 8009776:	4957      	ldr	r1, [pc, #348]	; (80098d4 <_malloc_r+0x428>)
 8009778:	6812      	ldr	r2, [r2, #0]
 800977a:	6808      	ldr	r0, [r1, #0]
 800977c:	9101      	str	r1, [sp, #4]
 800977e:	f102 0810 	add.w	r8, r2, #16
 8009782:	4a55      	ldr	r2, [pc, #340]	; (80098d8 <_malloc_r+0x42c>)
 8009784:	9203      	str	r2, [sp, #12]
 8009786:	3001      	adds	r0, #1
 8009788:	bf18      	it	ne
 800978a:	f102 31ff 	addne.w	r1, r2, #4294967295
 800978e:	44a0      	add	r8, r4
 8009790:	bf1e      	ittt	ne
 8009792:	4488      	addne	r8, r1
 8009794:	4251      	negne	r1, r2
 8009796:	ea01 0808 	andne.w	r8, r1, r8
 800979a:	eb0b 0306 	add.w	r3, fp, r6
 800979e:	4641      	mov	r1, r8
 80097a0:	4648      	mov	r0, r9
 80097a2:	9302      	str	r3, [sp, #8]
 80097a4:	f000 fd3e 	bl	800a224 <_sbrk_r>
 80097a8:	1c42      	adds	r2, r0, #1
 80097aa:	4607      	mov	r7, r0
 80097ac:	d06f      	beq.n	800988e <_malloc_r+0x3e2>
 80097ae:	9b02      	ldr	r3, [sp, #8]
 80097b0:	9a03      	ldr	r2, [sp, #12]
 80097b2:	4283      	cmp	r3, r0
 80097b4:	d901      	bls.n	80097ba <_malloc_r+0x30e>
 80097b6:	45ab      	cmp	fp, r5
 80097b8:	d169      	bne.n	800988e <_malloc_r+0x3e2>
 80097ba:	f8df a128 	ldr.w	sl, [pc, #296]	; 80098e4 <_malloc_r+0x438>
 80097be:	f8df c128 	ldr.w	ip, [pc, #296]	; 80098e8 <_malloc_r+0x43c>
 80097c2:	f8da 0000 	ldr.w	r0, [sl]
 80097c6:	42bb      	cmp	r3, r7
 80097c8:	4440      	add	r0, r8
 80097ca:	f8ca 0000 	str.w	r0, [sl]
 80097ce:	d108      	bne.n	80097e2 <_malloc_r+0x336>
 80097d0:	ea13 0f0c 	tst.w	r3, ip
 80097d4:	d105      	bne.n	80097e2 <_malloc_r+0x336>
 80097d6:	68ab      	ldr	r3, [r5, #8]
 80097d8:	4446      	add	r6, r8
 80097da:	f046 0601 	orr.w	r6, r6, #1
 80097de:	605e      	str	r6, [r3, #4]
 80097e0:	e049      	b.n	8009876 <_malloc_r+0x3ca>
 80097e2:	9901      	ldr	r1, [sp, #4]
 80097e4:	f8d1 e000 	ldr.w	lr, [r1]
 80097e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80097ec:	bf15      	itete	ne
 80097ee:	1afb      	subne	r3, r7, r3
 80097f0:	4b38      	ldreq	r3, [pc, #224]	; (80098d4 <_malloc_r+0x428>)
 80097f2:	181b      	addne	r3, r3, r0
 80097f4:	601f      	streq	r7, [r3, #0]
 80097f6:	bf18      	it	ne
 80097f8:	f8ca 3000 	strne.w	r3, [sl]
 80097fc:	f017 0307 	ands.w	r3, r7, #7
 8009800:	bf1c      	itt	ne
 8009802:	f1c3 0308 	rsbne	r3, r3, #8
 8009806:	18ff      	addne	r7, r7, r3
 8009808:	44b8      	add	r8, r7
 800980a:	441a      	add	r2, r3
 800980c:	ea08 080c 	and.w	r8, r8, ip
 8009810:	ebc8 0802 	rsb	r8, r8, r2
 8009814:	4641      	mov	r1, r8
 8009816:	4648      	mov	r0, r9
 8009818:	f000 fd04 	bl	800a224 <_sbrk_r>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	bf04      	itt	eq
 8009820:	4638      	moveq	r0, r7
 8009822:	f04f 0800 	moveq.w	r8, #0
 8009826:	f8da 3000 	ldr.w	r3, [sl]
 800982a:	60af      	str	r7, [r5, #8]
 800982c:	1bc2      	subs	r2, r0, r7
 800982e:	4442      	add	r2, r8
 8009830:	4443      	add	r3, r8
 8009832:	f042 0201 	orr.w	r2, r2, #1
 8009836:	45ab      	cmp	fp, r5
 8009838:	f8ca 3000 	str.w	r3, [sl]
 800983c:	607a      	str	r2, [r7, #4]
 800983e:	d01a      	beq.n	8009876 <_malloc_r+0x3ca>
 8009840:	2e0f      	cmp	r6, #15
 8009842:	d802      	bhi.n	800984a <_malloc_r+0x39e>
 8009844:	2301      	movs	r3, #1
 8009846:	607b      	str	r3, [r7, #4]
 8009848:	e021      	b.n	800988e <_malloc_r+0x3e2>
 800984a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800984e:	3e0c      	subs	r6, #12
 8009850:	f026 0607 	bic.w	r6, r6, #7
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	4333      	orrs	r3, r6
 800985a:	f8cb 3004 	str.w	r3, [fp, #4]
 800985e:	eb0b 0306 	add.w	r3, fp, r6
 8009862:	2205      	movs	r2, #5
 8009864:	2e0f      	cmp	r6, #15
 8009866:	605a      	str	r2, [r3, #4]
 8009868:	609a      	str	r2, [r3, #8]
 800986a:	d904      	bls.n	8009876 <_malloc_r+0x3ca>
 800986c:	f10b 0108 	add.w	r1, fp, #8
 8009870:	4648      	mov	r0, r9
 8009872:	f7ff fbe9 	bl	8009048 <_free_r>
 8009876:	4a19      	ldr	r2, [pc, #100]	; (80098dc <_malloc_r+0x430>)
 8009878:	f8da 3000 	ldr.w	r3, [sl]
 800987c:	6811      	ldr	r1, [r2, #0]
 800987e:	428b      	cmp	r3, r1
 8009880:	bf88      	it	hi
 8009882:	6013      	strhi	r3, [r2, #0]
 8009884:	4a16      	ldr	r2, [pc, #88]	; (80098e0 <_malloc_r+0x434>)
 8009886:	6811      	ldr	r1, [r2, #0]
 8009888:	428b      	cmp	r3, r1
 800988a:	bf88      	it	hi
 800988c:	6013      	strhi	r3, [r2, #0]
 800988e:	68ab      	ldr	r3, [r5, #8]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	f022 0203 	bic.w	r2, r2, #3
 8009896:	4294      	cmp	r4, r2
 8009898:	eba2 0304 	sub.w	r3, r2, r4
 800989c:	d801      	bhi.n	80098a2 <_malloc_r+0x3f6>
 800989e:	2b0f      	cmp	r3, #15
 80098a0:	dc04      	bgt.n	80098ac <_malloc_r+0x400>
 80098a2:	4648      	mov	r0, r9
 80098a4:	f000 f83e 	bl	8009924 <__malloc_unlock>
 80098a8:	2600      	movs	r6, #0
 80098aa:	e00c      	b.n	80098c6 <_malloc_r+0x41a>
 80098ac:	68ae      	ldr	r6, [r5, #8]
 80098ae:	f044 0201 	orr.w	r2, r4, #1
 80098b2:	4434      	add	r4, r6
 80098b4:	f043 0301 	orr.w	r3, r3, #1
 80098b8:	6072      	str	r2, [r6, #4]
 80098ba:	60ac      	str	r4, [r5, #8]
 80098bc:	6063      	str	r3, [r4, #4]
 80098be:	4648      	mov	r0, r9
 80098c0:	f000 f830 	bl	8009924 <__malloc_unlock>
 80098c4:	3608      	adds	r6, #8
 80098c6:	4630      	mov	r0, r6
 80098c8:	b005      	add	sp, #20
 80098ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	bf00      	nop
 80098d0:	20002bc8 	.word	0x20002bc8
 80098d4:	20000570 	.word	0x20000570
 80098d8:	00000080 	.word	0x00000080
 80098dc:	20002bc4 	.word	0x20002bc4
 80098e0:	20002bc0 	.word	0x20002bc0
 80098e4:	20002bcc 	.word	0x20002bcc
 80098e8:	0000007f 	.word	0x0000007f

080098ec <memmove>:
 80098ec:	4288      	cmp	r0, r1
 80098ee:	b510      	push	{r4, lr}
 80098f0:	eb01 0302 	add.w	r3, r1, r2
 80098f4:	d801      	bhi.n	80098fa <memmove+0xe>
 80098f6:	1e42      	subs	r2, r0, #1
 80098f8:	e00b      	b.n	8009912 <memmove+0x26>
 80098fa:	4298      	cmp	r0, r3
 80098fc:	d2fb      	bcs.n	80098f6 <memmove+0xa>
 80098fe:	1881      	adds	r1, r0, r2
 8009900:	1ad2      	subs	r2, r2, r3
 8009902:	42d3      	cmn	r3, r2
 8009904:	d004      	beq.n	8009910 <memmove+0x24>
 8009906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800990a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800990e:	e7f8      	b.n	8009902 <memmove+0x16>
 8009910:	bd10      	pop	{r4, pc}
 8009912:	4299      	cmp	r1, r3
 8009914:	d004      	beq.n	8009920 <memmove+0x34>
 8009916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800991a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800991e:	e7f8      	b.n	8009912 <memmove+0x26>
 8009920:	bd10      	pop	{r4, pc}

08009922 <__malloc_lock>:
 8009922:	4770      	bx	lr

08009924 <__malloc_unlock>:
 8009924:	4770      	bx	lr

08009926 <_Balloc>:
 8009926:	b570      	push	{r4, r5, r6, lr}
 8009928:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800992a:	4604      	mov	r4, r0
 800992c:	460e      	mov	r6, r1
 800992e:	b93d      	cbnz	r5, 8009940 <_Balloc+0x1a>
 8009930:	2010      	movs	r0, #16
 8009932:	f7ff fdb3 	bl	800949c <malloc>
 8009936:	6260      	str	r0, [r4, #36]	; 0x24
 8009938:	6045      	str	r5, [r0, #4]
 800993a:	6085      	str	r5, [r0, #8]
 800993c:	6005      	str	r5, [r0, #0]
 800993e:	60c5      	str	r5, [r0, #12]
 8009940:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009942:	68eb      	ldr	r3, [r5, #12]
 8009944:	b143      	cbz	r3, 8009958 <_Balloc+0x32>
 8009946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800994e:	b178      	cbz	r0, 8009970 <_Balloc+0x4a>
 8009950:	6802      	ldr	r2, [r0, #0]
 8009952:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009956:	e017      	b.n	8009988 <_Balloc+0x62>
 8009958:	2221      	movs	r2, #33	; 0x21
 800995a:	2104      	movs	r1, #4
 800995c:	4620      	mov	r0, r4
 800995e:	f000 fdb3 	bl	800a4c8 <_calloc_r>
 8009962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009964:	60e8      	str	r0, [r5, #12]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1ec      	bne.n	8009946 <_Balloc+0x20>
 800996c:	2000      	movs	r0, #0
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	2101      	movs	r1, #1
 8009972:	fa01 f506 	lsl.w	r5, r1, r6
 8009976:	1d6a      	adds	r2, r5, #5
 8009978:	0092      	lsls	r2, r2, #2
 800997a:	4620      	mov	r0, r4
 800997c:	f000 fda4 	bl	800a4c8 <_calloc_r>
 8009980:	2800      	cmp	r0, #0
 8009982:	d0f3      	beq.n	800996c <_Balloc+0x46>
 8009984:	6046      	str	r6, [r0, #4]
 8009986:	6085      	str	r5, [r0, #8]
 8009988:	2300      	movs	r3, #0
 800998a:	6103      	str	r3, [r0, #16]
 800998c:	60c3      	str	r3, [r0, #12]
 800998e:	bd70      	pop	{r4, r5, r6, pc}

08009990 <_Bfree>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009994:	4606      	mov	r6, r0
 8009996:	460d      	mov	r5, r1
 8009998:	b93c      	cbnz	r4, 80099aa <_Bfree+0x1a>
 800999a:	2010      	movs	r0, #16
 800999c:	f7ff fd7e 	bl	800949c <malloc>
 80099a0:	6270      	str	r0, [r6, #36]	; 0x24
 80099a2:	6044      	str	r4, [r0, #4]
 80099a4:	6084      	str	r4, [r0, #8]
 80099a6:	6004      	str	r4, [r0, #0]
 80099a8:	60c4      	str	r4, [r0, #12]
 80099aa:	b13d      	cbz	r5, 80099bc <_Bfree+0x2c>
 80099ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80099ae:	686a      	ldr	r2, [r5, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099b6:	6029      	str	r1, [r5, #0]
 80099b8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80099bc:	bd70      	pop	{r4, r5, r6, pc}

080099be <__multadd>:
 80099be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c2:	690d      	ldr	r5, [r1, #16]
 80099c4:	461f      	mov	r7, r3
 80099c6:	4606      	mov	r6, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	f101 0e14 	add.w	lr, r1, #20
 80099ce:	2300      	movs	r3, #0
 80099d0:	f8de 0000 	ldr.w	r0, [lr]
 80099d4:	b281      	uxth	r1, r0
 80099d6:	fb02 7101 	mla	r1, r2, r1, r7
 80099da:	0c0f      	lsrs	r7, r1, #16
 80099dc:	0c00      	lsrs	r0, r0, #16
 80099de:	fb02 7000 	mla	r0, r2, r0, r7
 80099e2:	b289      	uxth	r1, r1
 80099e4:	3301      	adds	r3, #1
 80099e6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80099ea:	429d      	cmp	r5, r3
 80099ec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80099f0:	f84e 1b04 	str.w	r1, [lr], #4
 80099f4:	dcec      	bgt.n	80099d0 <__multadd+0x12>
 80099f6:	b1d7      	cbz	r7, 8009a2e <__multadd+0x70>
 80099f8:	68a3      	ldr	r3, [r4, #8]
 80099fa:	429d      	cmp	r5, r3
 80099fc:	db12      	blt.n	8009a24 <__multadd+0x66>
 80099fe:	6861      	ldr	r1, [r4, #4]
 8009a00:	4630      	mov	r0, r6
 8009a02:	3101      	adds	r1, #1
 8009a04:	f7ff ff8f 	bl	8009926 <_Balloc>
 8009a08:	6922      	ldr	r2, [r4, #16]
 8009a0a:	3202      	adds	r2, #2
 8009a0c:	f104 010c 	add.w	r1, r4, #12
 8009a10:	4680      	mov	r8, r0
 8009a12:	0092      	lsls	r2, r2, #2
 8009a14:	300c      	adds	r0, #12
 8009a16:	f7fd fb9e 	bl	8007156 <memcpy>
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff ffb7 	bl	8009990 <_Bfree>
 8009a22:	4644      	mov	r4, r8
 8009a24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a28:	3501      	adds	r5, #1
 8009a2a:	615f      	str	r7, [r3, #20]
 8009a2c:	6125      	str	r5, [r4, #16]
 8009a2e:	4620      	mov	r0, r4
 8009a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a34 <__hi0bits>:
 8009a34:	0c03      	lsrs	r3, r0, #16
 8009a36:	041b      	lsls	r3, r3, #16
 8009a38:	b913      	cbnz	r3, 8009a40 <__hi0bits+0xc>
 8009a3a:	0400      	lsls	r0, r0, #16
 8009a3c:	2310      	movs	r3, #16
 8009a3e:	e000      	b.n	8009a42 <__hi0bits+0xe>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a46:	bf04      	itt	eq
 8009a48:	0200      	lsleq	r0, r0, #8
 8009a4a:	3308      	addeq	r3, #8
 8009a4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a50:	bf04      	itt	eq
 8009a52:	0100      	lsleq	r0, r0, #4
 8009a54:	3304      	addeq	r3, #4
 8009a56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a5a:	bf04      	itt	eq
 8009a5c:	0080      	lsleq	r0, r0, #2
 8009a5e:	3302      	addeq	r3, #2
 8009a60:	2800      	cmp	r0, #0
 8009a62:	db03      	blt.n	8009a6c <__hi0bits+0x38>
 8009a64:	0042      	lsls	r2, r0, #1
 8009a66:	d503      	bpl.n	8009a70 <__hi0bits+0x3c>
 8009a68:	1c58      	adds	r0, r3, #1
 8009a6a:	4770      	bx	lr
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	4770      	bx	lr
 8009a70:	2020      	movs	r0, #32
 8009a72:	4770      	bx	lr

08009a74 <__lo0bits>:
 8009a74:	6803      	ldr	r3, [r0, #0]
 8009a76:	f013 0207 	ands.w	r2, r3, #7
 8009a7a:	d00b      	beq.n	8009a94 <__lo0bits+0x20>
 8009a7c:	07d9      	lsls	r1, r3, #31
 8009a7e:	d422      	bmi.n	8009ac6 <__lo0bits+0x52>
 8009a80:	079a      	lsls	r2, r3, #30
 8009a82:	bf4b      	itete	mi
 8009a84:	085b      	lsrmi	r3, r3, #1
 8009a86:	089b      	lsrpl	r3, r3, #2
 8009a88:	6003      	strmi	r3, [r0, #0]
 8009a8a:	6003      	strpl	r3, [r0, #0]
 8009a8c:	bf4c      	ite	mi
 8009a8e:	2001      	movmi	r0, #1
 8009a90:	2002      	movpl	r0, #2
 8009a92:	4770      	bx	lr
 8009a94:	b299      	uxth	r1, r3
 8009a96:	b909      	cbnz	r1, 8009a9c <__lo0bits+0x28>
 8009a98:	0c1b      	lsrs	r3, r3, #16
 8009a9a:	2210      	movs	r2, #16
 8009a9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009aa0:	bf04      	itt	eq
 8009aa2:	0a1b      	lsreq	r3, r3, #8
 8009aa4:	3208      	addeq	r2, #8
 8009aa6:	0719      	lsls	r1, r3, #28
 8009aa8:	bf04      	itt	eq
 8009aaa:	091b      	lsreq	r3, r3, #4
 8009aac:	3204      	addeq	r2, #4
 8009aae:	0799      	lsls	r1, r3, #30
 8009ab0:	bf04      	itt	eq
 8009ab2:	089b      	lsreq	r3, r3, #2
 8009ab4:	3202      	addeq	r2, #2
 8009ab6:	07d9      	lsls	r1, r3, #31
 8009ab8:	d402      	bmi.n	8009ac0 <__lo0bits+0x4c>
 8009aba:	085b      	lsrs	r3, r3, #1
 8009abc:	d005      	beq.n	8009aca <__lo0bits+0x56>
 8009abe:	3201      	adds	r2, #1
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	4770      	bx	lr
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	4770      	bx	lr
 8009aca:	2020      	movs	r0, #32
 8009acc:	4770      	bx	lr

08009ace <__i2b>:
 8009ace:	b510      	push	{r4, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	f7ff ff27 	bl	8009926 <_Balloc>
 8009ad8:	2201      	movs	r2, #1
 8009ada:	6144      	str	r4, [r0, #20]
 8009adc:	6102      	str	r2, [r0, #16]
 8009ade:	bd10      	pop	{r4, pc}

08009ae0 <__multiply>:
 8009ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	690a      	ldr	r2, [r1, #16]
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	bfb8      	it	lt
 8009aee:	460b      	movlt	r3, r1
 8009af0:	4688      	mov	r8, r1
 8009af2:	bfbc      	itt	lt
 8009af4:	46a0      	movlt	r8, r4
 8009af6:	461c      	movlt	r4, r3
 8009af8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009afc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b08:	eb07 0609 	add.w	r6, r7, r9
 8009b0c:	429e      	cmp	r6, r3
 8009b0e:	bfc8      	it	gt
 8009b10:	3101      	addgt	r1, #1
 8009b12:	f7ff ff08 	bl	8009926 <_Balloc>
 8009b16:	f100 0514 	add.w	r5, r0, #20
 8009b1a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8009b1e:	462b      	mov	r3, r5
 8009b20:	2200      	movs	r2, #0
 8009b22:	4563      	cmp	r3, ip
 8009b24:	d202      	bcs.n	8009b2c <__multiply+0x4c>
 8009b26:	f843 2b04 	str.w	r2, [r3], #4
 8009b2a:	e7fa      	b.n	8009b22 <__multiply+0x42>
 8009b2c:	f104 0214 	add.w	r2, r4, #20
 8009b30:	f108 0114 	add.w	r1, r8, #20
 8009b34:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009b38:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	9b00      	ldr	r3, [sp, #0]
 8009b40:	9201      	str	r2, [sp, #4]
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d957      	bls.n	8009bf6 <__multiply+0x116>
 8009b46:	f8b2 b000 	ldrh.w	fp, [r2]
 8009b4a:	f1bb 0f00 	cmp.w	fp, #0
 8009b4e:	d023      	beq.n	8009b98 <__multiply+0xb8>
 8009b50:	4689      	mov	r9, r1
 8009b52:	46ae      	mov	lr, r5
 8009b54:	f04f 0800 	mov.w	r8, #0
 8009b58:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b5c:	f8be a000 	ldrh.w	sl, [lr]
 8009b60:	b2a3      	uxth	r3, r4
 8009b62:	fb0b a303 	mla	r3, fp, r3, sl
 8009b66:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b6a:	f8de 4000 	ldr.w	r4, [lr]
 8009b6e:	4443      	add	r3, r8
 8009b70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b74:	fb0b 840a 	mla	r4, fp, sl, r8
 8009b78:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009b7c:	46f2      	mov	sl, lr
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b84:	454f      	cmp	r7, r9
 8009b86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b8a:	f84a 3b04 	str.w	r3, [sl], #4
 8009b8e:	d901      	bls.n	8009b94 <__multiply+0xb4>
 8009b90:	46d6      	mov	lr, sl
 8009b92:	e7e1      	b.n	8009b58 <__multiply+0x78>
 8009b94:	f8ce 8004 	str.w	r8, [lr, #4]
 8009b98:	9b01      	ldr	r3, [sp, #4]
 8009b9a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009b9e:	3204      	adds	r2, #4
 8009ba0:	f1ba 0f00 	cmp.w	sl, #0
 8009ba4:	d021      	beq.n	8009bea <__multiply+0x10a>
 8009ba6:	682b      	ldr	r3, [r5, #0]
 8009ba8:	462c      	mov	r4, r5
 8009baa:	4689      	mov	r9, r1
 8009bac:	f04f 0800 	mov.w	r8, #0
 8009bb0:	f8b9 e000 	ldrh.w	lr, [r9]
 8009bb4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8009bb8:	fb0a be0e 	mla	lr, sl, lr, fp
 8009bbc:	44f0      	add	r8, lr
 8009bbe:	46a3      	mov	fp, r4
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8009bc6:	f84b 3b04 	str.w	r3, [fp], #4
 8009bca:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bce:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8009bd2:	0c1b      	lsrs	r3, r3, #16
 8009bd4:	fb0a e303 	mla	r3, sl, r3, lr
 8009bd8:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8009bdc:	454f      	cmp	r7, r9
 8009bde:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8009be2:	d901      	bls.n	8009be8 <__multiply+0x108>
 8009be4:	465c      	mov	r4, fp
 8009be6:	e7e3      	b.n	8009bb0 <__multiply+0xd0>
 8009be8:	6063      	str	r3, [r4, #4]
 8009bea:	3504      	adds	r5, #4
 8009bec:	e7a7      	b.n	8009b3e <__multiply+0x5e>
 8009bee:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8009bf2:	b913      	cbnz	r3, 8009bfa <__multiply+0x11a>
 8009bf4:	3e01      	subs	r6, #1
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	dcf9      	bgt.n	8009bee <__multiply+0x10e>
 8009bfa:	6106      	str	r6, [r0, #16]
 8009bfc:	b003      	add	sp, #12
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009c04 <__pow5mult>:
 8009c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c08:	4615      	mov	r5, r2
 8009c0a:	f012 0203 	ands.w	r2, r2, #3
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460f      	mov	r7, r1
 8009c12:	d007      	beq.n	8009c24 <__pow5mult+0x20>
 8009c14:	3a01      	subs	r2, #1
 8009c16:	4c21      	ldr	r4, [pc, #132]	; (8009c9c <__pow5mult+0x98>)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c1e:	f7ff fece 	bl	80099be <__multadd>
 8009c22:	4607      	mov	r7, r0
 8009c24:	10ad      	asrs	r5, r5, #2
 8009c26:	d036      	beq.n	8009c96 <__pow5mult+0x92>
 8009c28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c2a:	b93c      	cbnz	r4, 8009c3c <__pow5mult+0x38>
 8009c2c:	2010      	movs	r0, #16
 8009c2e:	f7ff fc35 	bl	800949c <malloc>
 8009c32:	6270      	str	r0, [r6, #36]	; 0x24
 8009c34:	6044      	str	r4, [r0, #4]
 8009c36:	6084      	str	r4, [r0, #8]
 8009c38:	6004      	str	r4, [r0, #0]
 8009c3a:	60c4      	str	r4, [r0, #12]
 8009c3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c44:	b94c      	cbnz	r4, 8009c5a <__pow5mult+0x56>
 8009c46:	f240 2171 	movw	r1, #625	; 0x271
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7ff ff3f 	bl	8009ace <__i2b>
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c56:	4604      	mov	r4, r0
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	f04f 0800 	mov.w	r8, #0
 8009c5e:	07eb      	lsls	r3, r5, #31
 8009c60:	d50a      	bpl.n	8009c78 <__pow5mult+0x74>
 8009c62:	4639      	mov	r1, r7
 8009c64:	4622      	mov	r2, r4
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ff3a 	bl	8009ae0 <__multiply>
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	4681      	mov	r9, r0
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7ff fe8d 	bl	8009990 <_Bfree>
 8009c76:	464f      	mov	r7, r9
 8009c78:	106d      	asrs	r5, r5, #1
 8009c7a:	d00c      	beq.n	8009c96 <__pow5mult+0x92>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	b108      	cbz	r0, 8009c84 <__pow5mult+0x80>
 8009c80:	4604      	mov	r4, r0
 8009c82:	e7ec      	b.n	8009c5e <__pow5mult+0x5a>
 8009c84:	4622      	mov	r2, r4
 8009c86:	4621      	mov	r1, r4
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7ff ff29 	bl	8009ae0 <__multiply>
 8009c8e:	6020      	str	r0, [r4, #0]
 8009c90:	f8c0 8000 	str.w	r8, [r0]
 8009c94:	e7f4      	b.n	8009c80 <__pow5mult+0x7c>
 8009c96:	4638      	mov	r0, r7
 8009c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9c:	0800bdd0 	.word	0x0800bdd0

08009ca0 <__lshift>:
 8009ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009caa:	6926      	ldr	r6, [r4, #16]
 8009cac:	6849      	ldr	r1, [r1, #4]
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	4456      	add	r6, sl
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	4691      	mov	r9, r2
 8009cb6:	1c75      	adds	r5, r6, #1
 8009cb8:	42ab      	cmp	r3, r5
 8009cba:	da02      	bge.n	8009cc2 <__lshift+0x22>
 8009cbc:	3101      	adds	r1, #1
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	e7fa      	b.n	8009cb8 <__lshift+0x18>
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	f7ff fe2f 	bl	8009926 <_Balloc>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4680      	mov	r8, r0
 8009ccc:	f100 0114 	add.w	r1, r0, #20
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4553      	cmp	r3, sl
 8009cd4:	da03      	bge.n	8009cde <__lshift+0x3e>
 8009cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	e7f9      	b.n	8009cd2 <__lshift+0x32>
 8009cde:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8009ce2:	6920      	ldr	r0, [r4, #16]
 8009ce4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009ce8:	f019 091f 	ands.w	r9, r9, #31
 8009cec:	f104 0114 	add.w	r1, r4, #20
 8009cf0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009cf4:	d014      	beq.n	8009d20 <__lshift+0x80>
 8009cf6:	f1c9 0c20 	rsb	ip, r9, #32
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	6808      	ldr	r0, [r1, #0]
 8009cfe:	fa00 f009 	lsl.w	r0, r0, r9
 8009d02:	4302      	orrs	r2, r0
 8009d04:	469a      	mov	sl, r3
 8009d06:	f843 2b04 	str.w	r2, [r3], #4
 8009d0a:	f851 2b04 	ldr.w	r2, [r1], #4
 8009d0e:	458e      	cmp	lr, r1
 8009d10:	fa22 f20c 	lsr.w	r2, r2, ip
 8009d14:	d8f2      	bhi.n	8009cfc <__lshift+0x5c>
 8009d16:	f8ca 2004 	str.w	r2, [sl, #4]
 8009d1a:	b142      	cbz	r2, 8009d2e <__lshift+0x8e>
 8009d1c:	1cb5      	adds	r5, r6, #2
 8009d1e:	e006      	b.n	8009d2e <__lshift+0x8e>
 8009d20:	3b04      	subs	r3, #4
 8009d22:	f851 2b04 	ldr.w	r2, [r1], #4
 8009d26:	f843 2f04 	str.w	r2, [r3, #4]!
 8009d2a:	458e      	cmp	lr, r1
 8009d2c:	d8f9      	bhi.n	8009d22 <__lshift+0x82>
 8009d2e:	3d01      	subs	r5, #1
 8009d30:	4638      	mov	r0, r7
 8009d32:	f8c8 5010 	str.w	r5, [r8, #16]
 8009d36:	4621      	mov	r1, r4
 8009d38:	f7ff fe2a 	bl	8009990 <_Bfree>
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009d42 <__mcmp>:
 8009d42:	6903      	ldr	r3, [r0, #16]
 8009d44:	690a      	ldr	r2, [r1, #16]
 8009d46:	1a9b      	subs	r3, r3, r2
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	d111      	bne.n	8009d70 <__mcmp+0x2e>
 8009d4c:	0092      	lsls	r2, r2, #2
 8009d4e:	3014      	adds	r0, #20
 8009d50:	3114      	adds	r1, #20
 8009d52:	1883      	adds	r3, r0, r2
 8009d54:	440a      	add	r2, r1
 8009d56:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009d5a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009d5e:	428c      	cmp	r4, r1
 8009d60:	d002      	beq.n	8009d68 <__mcmp+0x26>
 8009d62:	d307      	bcc.n	8009d74 <__mcmp+0x32>
 8009d64:	2001      	movs	r0, #1
 8009d66:	bd10      	pop	{r4, pc}
 8009d68:	4298      	cmp	r0, r3
 8009d6a:	d3f4      	bcc.n	8009d56 <__mcmp+0x14>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	bd10      	pop	{r4, pc}
 8009d70:	4618      	mov	r0, r3
 8009d72:	bd10      	pop	{r4, pc}
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295
 8009d78:	bd10      	pop	{r4, pc}

08009d7a <__mdiff>:
 8009d7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4607      	mov	r7, r0
 8009d82:	4611      	mov	r1, r2
 8009d84:	4620      	mov	r0, r4
 8009d86:	4615      	mov	r5, r2
 8009d88:	f7ff ffdb 	bl	8009d42 <__mcmp>
 8009d8c:	1e06      	subs	r6, r0, #0
 8009d8e:	d108      	bne.n	8009da2 <__mdiff+0x28>
 8009d90:	4631      	mov	r1, r6
 8009d92:	4638      	mov	r0, r7
 8009d94:	f7ff fdc7 	bl	8009926 <_Balloc>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	6103      	str	r3, [r0, #16]
 8009d9c:	6146      	str	r6, [r0, #20]
 8009d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da2:	bfbc      	itt	lt
 8009da4:	4623      	movlt	r3, r4
 8009da6:	462c      	movlt	r4, r5
 8009da8:	4638      	mov	r0, r7
 8009daa:	6861      	ldr	r1, [r4, #4]
 8009dac:	bfba      	itte	lt
 8009dae:	461d      	movlt	r5, r3
 8009db0:	2601      	movlt	r6, #1
 8009db2:	2600      	movge	r6, #0
 8009db4:	f7ff fdb7 	bl	8009926 <_Balloc>
 8009db8:	692b      	ldr	r3, [r5, #16]
 8009dba:	60c6      	str	r6, [r0, #12]
 8009dbc:	6926      	ldr	r6, [r4, #16]
 8009dbe:	f105 0914 	add.w	r9, r5, #20
 8009dc2:	3414      	adds	r4, #20
 8009dc4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8009dc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009dcc:	f100 0514 	add.w	r5, r0, #20
 8009dd0:	f04f 0c00 	mov.w	ip, #0
 8009dd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8009dd8:	f859 2b04 	ldr.w	r2, [r9], #4
 8009ddc:	fa1c f183 	uxtah	r1, ip, r3
 8009de0:	fa1f fe82 	uxth.w	lr, r2
 8009de4:	0c12      	lsrs	r2, r2, #16
 8009de6:	ebce 0101 	rsb	r1, lr, r1
 8009dea:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8009dee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009df2:	b289      	uxth	r1, r1
 8009df4:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009df8:	45c8      	cmp	r8, r9
 8009dfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009dfe:	46a6      	mov	lr, r4
 8009e00:	f845 3b04 	str.w	r3, [r5], #4
 8009e04:	d8e6      	bhi.n	8009dd4 <__mdiff+0x5a>
 8009e06:	45be      	cmp	lr, r7
 8009e08:	d20e      	bcs.n	8009e28 <__mdiff+0xae>
 8009e0a:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009e0e:	fa1c f281 	uxtah	r2, ip, r1
 8009e12:	1413      	asrs	r3, r2, #16
 8009e14:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8009e18:	b292      	uxth	r2, r2
 8009e1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009e22:	f845 2b04 	str.w	r2, [r5], #4
 8009e26:	e7ee      	b.n	8009e06 <__mdiff+0x8c>
 8009e28:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009e2c:	b90b      	cbnz	r3, 8009e32 <__mdiff+0xb8>
 8009e2e:	3e01      	subs	r6, #1
 8009e30:	e7fa      	b.n	8009e28 <__mdiff+0xae>
 8009e32:	6106      	str	r6, [r0, #16]
 8009e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009e38 <__d2b>:
 8009e38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	461c      	mov	r4, r3
 8009e40:	4690      	mov	r8, r2
 8009e42:	9e08      	ldr	r6, [sp, #32]
 8009e44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e46:	f7ff fd6e 	bl	8009926 <_Balloc>
 8009e4a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009e4e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009e52:	4607      	mov	r7, r0
 8009e54:	b10c      	cbz	r4, 8009e5a <__d2b+0x22>
 8009e56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009e5a:	9201      	str	r2, [sp, #4]
 8009e5c:	f1b8 0f00 	cmp.w	r8, #0
 8009e60:	d019      	beq.n	8009e96 <__d2b+0x5e>
 8009e62:	a802      	add	r0, sp, #8
 8009e64:	f840 8d08 	str.w	r8, [r0, #-8]!
 8009e68:	f7ff fe04 	bl	8009a74 <__lo0bits>
 8009e6c:	9b00      	ldr	r3, [sp, #0]
 8009e6e:	b148      	cbz	r0, 8009e84 <__d2b+0x4c>
 8009e70:	9a01      	ldr	r2, [sp, #4]
 8009e72:	f1c0 0120 	rsb	r1, r0, #32
 8009e76:	fa02 f101 	lsl.w	r1, r2, r1
 8009e7a:	430b      	orrs	r3, r1
 8009e7c:	40c2      	lsrs	r2, r0
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	9201      	str	r2, [sp, #4]
 8009e82:	e000      	b.n	8009e86 <__d2b+0x4e>
 8009e84:	617b      	str	r3, [r7, #20]
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	61bb      	str	r3, [r7, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bf14      	ite	ne
 8009e8e:	2102      	movne	r1, #2
 8009e90:	2101      	moveq	r1, #1
 8009e92:	6139      	str	r1, [r7, #16]
 8009e94:	e007      	b.n	8009ea6 <__d2b+0x6e>
 8009e96:	a801      	add	r0, sp, #4
 8009e98:	f7ff fdec 	bl	8009a74 <__lo0bits>
 8009e9c:	9b01      	ldr	r3, [sp, #4]
 8009e9e:	617b      	str	r3, [r7, #20]
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	6139      	str	r1, [r7, #16]
 8009ea4:	3020      	adds	r0, #32
 8009ea6:	b134      	cbz	r4, 8009eb6 <__d2b+0x7e>
 8009ea8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009eac:	4404      	add	r4, r0
 8009eae:	6034      	str	r4, [r6, #0]
 8009eb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009eb4:	e009      	b.n	8009eca <__d2b+0x92>
 8009eb6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009eba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ebe:	6030      	str	r0, [r6, #0]
 8009ec0:	6918      	ldr	r0, [r3, #16]
 8009ec2:	f7ff fdb7 	bl	8009a34 <__hi0bits>
 8009ec6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009eca:	6028      	str	r0, [r5, #0]
 8009ecc:	4638      	mov	r0, r7
 8009ece:	b002      	add	sp, #8
 8009ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ed4 <_realloc_r>:
 8009ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed8:	4681      	mov	r9, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	b929      	cbnz	r1, 8009eea <_realloc_r+0x16>
 8009ede:	4611      	mov	r1, r2
 8009ee0:	b003      	add	sp, #12
 8009ee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee6:	f7ff bae1 	b.w	80094ac <_malloc_r>
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	f7ff fd19 	bl	8009922 <__malloc_lock>
 8009ef0:	9a01      	ldr	r2, [sp, #4]
 8009ef2:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8009ef6:	f102 080b 	add.w	r8, r2, #11
 8009efa:	f1b8 0f16 	cmp.w	r8, #22
 8009efe:	f1a4 0b08 	sub.w	fp, r4, #8
 8009f02:	f02e 0503 	bic.w	r5, lr, #3
 8009f06:	d903      	bls.n	8009f10 <_realloc_r+0x3c>
 8009f08:	f038 0807 	bics.w	r8, r8, #7
 8009f0c:	d502      	bpl.n	8009f14 <_realloc_r+0x40>
 8009f0e:	e003      	b.n	8009f18 <_realloc_r+0x44>
 8009f10:	f04f 0810 	mov.w	r8, #16
 8009f14:	4590      	cmp	r8, r2
 8009f16:	d204      	bcs.n	8009f22 <_realloc_r+0x4e>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	f8c9 3000 	str.w	r3, [r9]
 8009f1e:	2000      	movs	r0, #0
 8009f20:	e17d      	b.n	800a21e <_realloc_r+0x34a>
 8009f22:	45a8      	cmp	r8, r5
 8009f24:	f340 8150 	ble.w	800a1c8 <_realloc_r+0x2f4>
 8009f28:	4ba6      	ldr	r3, [pc, #664]	; (800a1c4 <_realloc_r+0x2f0>)
 8009f2a:	6898      	ldr	r0, [r3, #8]
 8009f2c:	eb0b 0105 	add.w	r1, fp, r5
 8009f30:	4281      	cmp	r1, r0
 8009f32:	684f      	ldr	r7, [r1, #4]
 8009f34:	d005      	beq.n	8009f42 <_realloc_r+0x6e>
 8009f36:	f027 0601 	bic.w	r6, r7, #1
 8009f3a:	440e      	add	r6, r1
 8009f3c:	6876      	ldr	r6, [r6, #4]
 8009f3e:	07f6      	lsls	r6, r6, #31
 8009f40:	d426      	bmi.n	8009f90 <_realloc_r+0xbc>
 8009f42:	f027 0a03 	bic.w	sl, r7, #3
 8009f46:	4281      	cmp	r1, r0
 8009f48:	eb05 070a 	add.w	r7, r5, sl
 8009f4c:	d118      	bne.n	8009f80 <_realloc_r+0xac>
 8009f4e:	f108 0610 	add.w	r6, r8, #16
 8009f52:	42b7      	cmp	r7, r6
 8009f54:	db1f      	blt.n	8009f96 <_realloc_r+0xc2>
 8009f56:	eb0b 0008 	add.w	r0, fp, r8
 8009f5a:	ebc8 0707 	rsb	r7, r8, r7
 8009f5e:	f047 0701 	orr.w	r7, r7, #1
 8009f62:	6098      	str	r0, [r3, #8]
 8009f64:	6047      	str	r7, [r0, #4]
 8009f66:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	ea43 0308 	orr.w	r3, r3, r8
 8009f72:	4648      	mov	r0, r9
 8009f74:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f78:	f7ff fcd4 	bl	8009924 <__malloc_unlock>
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	e14e      	b.n	800a21e <_realloc_r+0x34a>
 8009f80:	45b8      	cmp	r8, r7
 8009f82:	dc08      	bgt.n	8009f96 <_realloc_r+0xc2>
 8009f84:	68cb      	ldr	r3, [r1, #12]
 8009f86:	688a      	ldr	r2, [r1, #8]
 8009f88:	463d      	mov	r5, r7
 8009f8a:	60d3      	str	r3, [r2, #12]
 8009f8c:	609a      	str	r2, [r3, #8]
 8009f8e:	e11b      	b.n	800a1c8 <_realloc_r+0x2f4>
 8009f90:	f04f 0a00 	mov.w	sl, #0
 8009f94:	4651      	mov	r1, sl
 8009f96:	f01e 0f01 	tst.w	lr, #1
 8009f9a:	f040 80c3 	bne.w	800a124 <_realloc_r+0x250>
 8009f9e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8009fa2:	ebc7 070b 	rsb	r7, r7, fp
 8009fa6:	687e      	ldr	r6, [r7, #4]
 8009fa8:	f026 0603 	bic.w	r6, r6, #3
 8009fac:	442e      	add	r6, r5
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	f000 8083 	beq.w	800a0ba <_realloc_r+0x1e6>
 8009fb4:	4281      	cmp	r1, r0
 8009fb6:	44b2      	add	sl, r6
 8009fb8:	d147      	bne.n	800a04a <_realloc_r+0x176>
 8009fba:	f108 0110 	add.w	r1, r8, #16
 8009fbe:	458a      	cmp	sl, r1
 8009fc0:	db7b      	blt.n	800a0ba <_realloc_r+0x1e6>
 8009fc2:	463e      	mov	r6, r7
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8009fca:	60ca      	str	r2, [r1, #12]
 8009fcc:	6091      	str	r1, [r2, #8]
 8009fce:	1f2a      	subs	r2, r5, #4
 8009fd0:	2a24      	cmp	r2, #36	; 0x24
 8009fd2:	d825      	bhi.n	800a020 <_realloc_r+0x14c>
 8009fd4:	2a13      	cmp	r2, #19
 8009fd6:	d91b      	bls.n	800a010 <_realloc_r+0x13c>
 8009fd8:	6821      	ldr	r1, [r4, #0]
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	6861      	ldr	r1, [r4, #4]
 8009fde:	60f9      	str	r1, [r7, #12]
 8009fe0:	2a1b      	cmp	r2, #27
 8009fe2:	d803      	bhi.n	8009fec <_realloc_r+0x118>
 8009fe4:	f107 0210 	add.w	r2, r7, #16
 8009fe8:	3408      	adds	r4, #8
 8009fea:	e012      	b.n	800a012 <_realloc_r+0x13e>
 8009fec:	68a1      	ldr	r1, [r4, #8]
 8009fee:	6139      	str	r1, [r7, #16]
 8009ff0:	68e1      	ldr	r1, [r4, #12]
 8009ff2:	6179      	str	r1, [r7, #20]
 8009ff4:	2a24      	cmp	r2, #36	; 0x24
 8009ff6:	bf01      	itttt	eq
 8009ff8:	6922      	ldreq	r2, [r4, #16]
 8009ffa:	61ba      	streq	r2, [r7, #24]
 8009ffc:	6961      	ldreq	r1, [r4, #20]
 8009ffe:	61f9      	streq	r1, [r7, #28]
 800a000:	bf19      	ittee	ne
 800a002:	f107 0218 	addne.w	r2, r7, #24
 800a006:	3410      	addne	r4, #16
 800a008:	f107 0220 	addeq.w	r2, r7, #32
 800a00c:	3418      	addeq	r4, #24
 800a00e:	e000      	b.n	800a012 <_realloc_r+0x13e>
 800a010:	4632      	mov	r2, r6
 800a012:	6821      	ldr	r1, [r4, #0]
 800a014:	6011      	str	r1, [r2, #0]
 800a016:	6861      	ldr	r1, [r4, #4]
 800a018:	6051      	str	r1, [r2, #4]
 800a01a:	68a1      	ldr	r1, [r4, #8]
 800a01c:	6091      	str	r1, [r2, #8]
 800a01e:	e005      	b.n	800a02c <_realloc_r+0x158>
 800a020:	4621      	mov	r1, r4
 800a022:	4630      	mov	r0, r6
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	f7ff fc61 	bl	80098ec <memmove>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	eb07 0208 	add.w	r2, r7, r8
 800a030:	ebc8 0a0a 	rsb	sl, r8, sl
 800a034:	609a      	str	r2, [r3, #8]
 800a036:	f04a 0301 	orr.w	r3, sl, #1
 800a03a:	6053      	str	r3, [r2, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	ea43 0308 	orr.w	r3, r3, r8
 800a046:	607b      	str	r3, [r7, #4]
 800a048:	e0b6      	b.n	800a1b8 <_realloc_r+0x2e4>
 800a04a:	45d0      	cmp	r8, sl
 800a04c:	dc35      	bgt.n	800a0ba <_realloc_r+0x1e6>
 800a04e:	68cb      	ldr	r3, [r1, #12]
 800a050:	688a      	ldr	r2, [r1, #8]
 800a052:	4638      	mov	r0, r7
 800a054:	60d3      	str	r3, [r2, #12]
 800a056:	609a      	str	r2, [r3, #8]
 800a058:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	60d3      	str	r3, [r2, #12]
 800a060:	609a      	str	r2, [r3, #8]
 800a062:	1f2a      	subs	r2, r5, #4
 800a064:	2a24      	cmp	r2, #36	; 0x24
 800a066:	d823      	bhi.n	800a0b0 <_realloc_r+0x1dc>
 800a068:	2a13      	cmp	r2, #19
 800a06a:	d91a      	bls.n	800a0a2 <_realloc_r+0x1ce>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	60bb      	str	r3, [r7, #8]
 800a070:	6863      	ldr	r3, [r4, #4]
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	2a1b      	cmp	r2, #27
 800a076:	d803      	bhi.n	800a080 <_realloc_r+0x1ac>
 800a078:	f107 0010 	add.w	r0, r7, #16
 800a07c:	3408      	adds	r4, #8
 800a07e:	e010      	b.n	800a0a2 <_realloc_r+0x1ce>
 800a080:	68a3      	ldr	r3, [r4, #8]
 800a082:	613b      	str	r3, [r7, #16]
 800a084:	68e3      	ldr	r3, [r4, #12]
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	2a24      	cmp	r2, #36	; 0x24
 800a08a:	bf01      	itttt	eq
 800a08c:	6923      	ldreq	r3, [r4, #16]
 800a08e:	61bb      	streq	r3, [r7, #24]
 800a090:	6963      	ldreq	r3, [r4, #20]
 800a092:	61fb      	streq	r3, [r7, #28]
 800a094:	bf19      	ittee	ne
 800a096:	f107 0018 	addne.w	r0, r7, #24
 800a09a:	3410      	addne	r4, #16
 800a09c:	f107 0020 	addeq.w	r0, r7, #32
 800a0a0:	3418      	addeq	r4, #24
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	6003      	str	r3, [r0, #0]
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	6043      	str	r3, [r0, #4]
 800a0aa:	68a3      	ldr	r3, [r4, #8]
 800a0ac:	6083      	str	r3, [r0, #8]
 800a0ae:	e002      	b.n	800a0b6 <_realloc_r+0x1e2>
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f7ff fc1b 	bl	80098ec <memmove>
 800a0b6:	4655      	mov	r5, sl
 800a0b8:	e02e      	b.n	800a118 <_realloc_r+0x244>
 800a0ba:	45b0      	cmp	r8, r6
 800a0bc:	dc32      	bgt.n	800a124 <_realloc_r+0x250>
 800a0be:	4638      	mov	r0, r7
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a0c6:	60d3      	str	r3, [r2, #12]
 800a0c8:	609a      	str	r2, [r3, #8]
 800a0ca:	1f2a      	subs	r2, r5, #4
 800a0cc:	2a24      	cmp	r2, #36	; 0x24
 800a0ce:	d825      	bhi.n	800a11c <_realloc_r+0x248>
 800a0d0:	2a13      	cmp	r2, #19
 800a0d2:	d91a      	bls.n	800a10a <_realloc_r+0x236>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	60bb      	str	r3, [r7, #8]
 800a0d8:	6863      	ldr	r3, [r4, #4]
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	2a1b      	cmp	r2, #27
 800a0de:	d803      	bhi.n	800a0e8 <_realloc_r+0x214>
 800a0e0:	f107 0010 	add.w	r0, r7, #16
 800a0e4:	3408      	adds	r4, #8
 800a0e6:	e010      	b.n	800a10a <_realloc_r+0x236>
 800a0e8:	68a3      	ldr	r3, [r4, #8]
 800a0ea:	613b      	str	r3, [r7, #16]
 800a0ec:	68e3      	ldr	r3, [r4, #12]
 800a0ee:	617b      	str	r3, [r7, #20]
 800a0f0:	2a24      	cmp	r2, #36	; 0x24
 800a0f2:	bf01      	itttt	eq
 800a0f4:	6923      	ldreq	r3, [r4, #16]
 800a0f6:	61bb      	streq	r3, [r7, #24]
 800a0f8:	6963      	ldreq	r3, [r4, #20]
 800a0fa:	61fb      	streq	r3, [r7, #28]
 800a0fc:	bf19      	ittee	ne
 800a0fe:	f107 0018 	addne.w	r0, r7, #24
 800a102:	3410      	addne	r4, #16
 800a104:	f107 0020 	addeq.w	r0, r7, #32
 800a108:	3418      	addeq	r4, #24
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	6863      	ldr	r3, [r4, #4]
 800a110:	6043      	str	r3, [r0, #4]
 800a112:	68a3      	ldr	r3, [r4, #8]
 800a114:	6083      	str	r3, [r0, #8]
 800a116:	4635      	mov	r5, r6
 800a118:	46bb      	mov	fp, r7
 800a11a:	e055      	b.n	800a1c8 <_realloc_r+0x2f4>
 800a11c:	4621      	mov	r1, r4
 800a11e:	f7ff fbe5 	bl	80098ec <memmove>
 800a122:	e7f8      	b.n	800a116 <_realloc_r+0x242>
 800a124:	4611      	mov	r1, r2
 800a126:	4648      	mov	r0, r9
 800a128:	f7ff f9c0 	bl	80094ac <_malloc_r>
 800a12c:	4606      	mov	r6, r0
 800a12e:	2800      	cmp	r0, #0
 800a130:	d042      	beq.n	800a1b8 <_realloc_r+0x2e4>
 800a132:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a136:	f023 0301 	bic.w	r3, r3, #1
 800a13a:	f1a0 0208 	sub.w	r2, r0, #8
 800a13e:	445b      	add	r3, fp
 800a140:	429a      	cmp	r2, r3
 800a142:	d105      	bne.n	800a150 <_realloc_r+0x27c>
 800a144:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a148:	f023 0303 	bic.w	r3, r3, #3
 800a14c:	441d      	add	r5, r3
 800a14e:	e03b      	b.n	800a1c8 <_realloc_r+0x2f4>
 800a150:	1f2a      	subs	r2, r5, #4
 800a152:	2a24      	cmp	r2, #36	; 0x24
 800a154:	d829      	bhi.n	800a1aa <_realloc_r+0x2d6>
 800a156:	2a13      	cmp	r2, #19
 800a158:	d91e      	bls.n	800a198 <_realloc_r+0x2c4>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	6863      	ldr	r3, [r4, #4]
 800a160:	6043      	str	r3, [r0, #4]
 800a162:	2a1b      	cmp	r2, #27
 800a164:	d804      	bhi.n	800a170 <_realloc_r+0x29c>
 800a166:	f100 0308 	add.w	r3, r0, #8
 800a16a:	f104 0208 	add.w	r2, r4, #8
 800a16e:	e015      	b.n	800a19c <_realloc_r+0x2c8>
 800a170:	68a3      	ldr	r3, [r4, #8]
 800a172:	6083      	str	r3, [r0, #8]
 800a174:	68e3      	ldr	r3, [r4, #12]
 800a176:	60c3      	str	r3, [r0, #12]
 800a178:	2a24      	cmp	r2, #36	; 0x24
 800a17a:	bf01      	itttt	eq
 800a17c:	6923      	ldreq	r3, [r4, #16]
 800a17e:	6103      	streq	r3, [r0, #16]
 800a180:	6961      	ldreq	r1, [r4, #20]
 800a182:	6141      	streq	r1, [r0, #20]
 800a184:	bf19      	ittee	ne
 800a186:	f100 0310 	addne.w	r3, r0, #16
 800a18a:	f104 0210 	addne.w	r2, r4, #16
 800a18e:	f100 0318 	addeq.w	r3, r0, #24
 800a192:	f104 0218 	addeq.w	r2, r4, #24
 800a196:	e001      	b.n	800a19c <_realloc_r+0x2c8>
 800a198:	4603      	mov	r3, r0
 800a19a:	4622      	mov	r2, r4
 800a19c:	6811      	ldr	r1, [r2, #0]
 800a19e:	6019      	str	r1, [r3, #0]
 800a1a0:	6851      	ldr	r1, [r2, #4]
 800a1a2:	6059      	str	r1, [r3, #4]
 800a1a4:	6892      	ldr	r2, [r2, #8]
 800a1a6:	609a      	str	r2, [r3, #8]
 800a1a8:	e002      	b.n	800a1b0 <_realloc_r+0x2dc>
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	f7ff fb9e 	bl	80098ec <memmove>
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4648      	mov	r0, r9
 800a1b4:	f7fe ff48 	bl	8009048 <_free_r>
 800a1b8:	4648      	mov	r0, r9
 800a1ba:	f7ff fbb3 	bl	8009924 <__malloc_unlock>
 800a1be:	4630      	mov	r0, r6
 800a1c0:	e02d      	b.n	800a21e <_realloc_r+0x34a>
 800a1c2:	bf00      	nop
 800a1c4:	20000164 	.word	0x20000164
 800a1c8:	ebc8 0205 	rsb	r2, r8, r5
 800a1cc:	2a0f      	cmp	r2, #15
 800a1ce:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a1d2:	d914      	bls.n	800a1fe <_realloc_r+0x32a>
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	eb0b 0108 	add.w	r1, fp, r8
 800a1dc:	ea43 0308 	orr.w	r3, r3, r8
 800a1e0:	f8cb 3004 	str.w	r3, [fp, #4]
 800a1e4:	f042 0301 	orr.w	r3, r2, #1
 800a1e8:	440a      	add	r2, r1
 800a1ea:	604b      	str	r3, [r1, #4]
 800a1ec:	6853      	ldr	r3, [r2, #4]
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	6053      	str	r3, [r2, #4]
 800a1f4:	3108      	adds	r1, #8
 800a1f6:	4648      	mov	r0, r9
 800a1f8:	f7fe ff26 	bl	8009048 <_free_r>
 800a1fc:	e00a      	b.n	800a214 <_realloc_r+0x340>
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	432b      	orrs	r3, r5
 800a204:	eb0b 0205 	add.w	r2, fp, r5
 800a208:	f8cb 3004 	str.w	r3, [fp, #4]
 800a20c:	6853      	ldr	r3, [r2, #4]
 800a20e:	f043 0301 	orr.w	r3, r3, #1
 800a212:	6053      	str	r3, [r2, #4]
 800a214:	4648      	mov	r0, r9
 800a216:	f7ff fb85 	bl	8009924 <__malloc_unlock>
 800a21a:	f10b 0008 	add.w	r0, fp, #8
 800a21e:	b003      	add	sp, #12
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a224 <_sbrk_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4c06      	ldr	r4, [pc, #24]	; (800a240 <_sbrk_r+0x1c>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4605      	mov	r5, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	f7fc fa20 	bl	8006674 <_sbrk>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_sbrk_r+0x1a>
 800a238:	6823      	ldr	r3, [r4, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_sbrk_r+0x1a>
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	200085f8 	.word	0x200085f8

0800a244 <__sread>:
 800a244:	b510      	push	{r4, lr}
 800a246:	460c      	mov	r4, r1
 800a248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24c:	f000 fb00 	bl	800a850 <_read_r>
 800a250:	2800      	cmp	r0, #0
 800a252:	bfab      	itete	ge
 800a254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a256:	89a3      	ldrhlt	r3, [r4, #12]
 800a258:	181b      	addge	r3, r3, r0
 800a25a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a25e:	bfac      	ite	ge
 800a260:	6563      	strge	r3, [r4, #84]	; 0x54
 800a262:	81a3      	strhlt	r3, [r4, #12]
 800a264:	bd10      	pop	{r4, pc}

0800a266 <__swrite>:
 800a266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26a:	461f      	mov	r7, r3
 800a26c:	898b      	ldrh	r3, [r1, #12]
 800a26e:	05db      	lsls	r3, r3, #23
 800a270:	4605      	mov	r5, r0
 800a272:	460c      	mov	r4, r1
 800a274:	4616      	mov	r6, r2
 800a276:	d505      	bpl.n	800a284 <__swrite+0x1e>
 800a278:	2302      	movs	r3, #2
 800a27a:	2200      	movs	r2, #0
 800a27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a280:	f000 fa6c 	bl	800a75c <_lseek_r>
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a28a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a28e:	81a3      	strh	r3, [r4, #12]
 800a290:	4632      	mov	r2, r6
 800a292:	463b      	mov	r3, r7
 800a294:	4628      	mov	r0, r5
 800a296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a29a:	f000 b895 	b.w	800a3c8 <_write_r>

0800a29e <__sseek>:
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a6:	f000 fa59 	bl	800a75c <_lseek_r>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	bf15      	itete	ne
 800a2b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2ba:	81a3      	strheq	r3, [r4, #12]
 800a2bc:	bf18      	it	ne
 800a2be:	81a3      	strhne	r3, [r4, #12]
 800a2c0:	bd10      	pop	{r4, pc}

0800a2c2 <__sclose>:
 800a2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c6:	f000 b92d 	b.w	800a524 <_close_r>

0800a2ca <__ssprint_r>:
 800a2ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ce:	4693      	mov	fp, r2
 800a2d0:	6892      	ldr	r2, [r2, #8]
 800a2d2:	4681      	mov	r9, r0
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	b34a      	cbz	r2, 800a32c <__ssprint_r+0x62>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f8db a000 	ldr.w	sl, [fp]
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	461f      	mov	r7, r3
 800a2e2:	e006      	b.n	800a2f2 <__ssprint_r+0x28>
 800a2e4:	f8da 3000 	ldr.w	r3, [sl]
 800a2e8:	f8da 7004 	ldr.w	r7, [sl, #4]
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	f10a 0a08 	add.w	sl, sl, #8
 800a2f2:	2f00      	cmp	r7, #0
 800a2f4:	d0f6      	beq.n	800a2e4 <__ssprint_r+0x1a>
 800a2f6:	68a6      	ldr	r6, [r4, #8]
 800a2f8:	42b7      	cmp	r7, r6
 800a2fa:	d360      	bcc.n	800a3be <__ssprint_r+0xf4>
 800a2fc:	89a0      	ldrh	r0, [r4, #12]
 800a2fe:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800a302:	d117      	bne.n	800a334 <__ssprint_r+0x6a>
 800a304:	42b7      	cmp	r7, r6
 800a306:	d35a      	bcc.n	800a3be <__ssprint_r+0xf4>
 800a308:	4632      	mov	r2, r6
 800a30a:	9901      	ldr	r1, [sp, #4]
 800a30c:	6820      	ldr	r0, [r4, #0]
 800a30e:	f7ff faed 	bl	80098ec <memmove>
 800a312:	68a2      	ldr	r2, [r4, #8]
 800a314:	1b92      	subs	r2, r2, r6
 800a316:	60a2      	str	r2, [r4, #8]
 800a318:	6822      	ldr	r2, [r4, #0]
 800a31a:	4416      	add	r6, r2
 800a31c:	f8db 2008 	ldr.w	r2, [fp, #8]
 800a320:	6026      	str	r6, [r4, #0]
 800a322:	1bd7      	subs	r7, r2, r7
 800a324:	f8cb 7008 	str.w	r7, [fp, #8]
 800a328:	2f00      	cmp	r7, #0
 800a32a:	d1db      	bne.n	800a2e4 <__ssprint_r+0x1a>
 800a32c:	2000      	movs	r0, #0
 800a32e:	f8cb 0004 	str.w	r0, [fp, #4]
 800a332:	e046      	b.n	800a3c2 <__ssprint_r+0xf8>
 800a334:	6825      	ldr	r5, [r4, #0]
 800a336:	6921      	ldr	r1, [r4, #16]
 800a338:	ebc1 0805 	rsb	r8, r1, r5
 800a33c:	f108 0201 	add.w	r2, r8, #1
 800a340:	6965      	ldr	r5, [r4, #20]
 800a342:	443a      	add	r2, r7
 800a344:	2302      	movs	r3, #2
 800a346:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a34a:	fb95 f5f3 	sdiv	r5, r5, r3
 800a34e:	4295      	cmp	r5, r2
 800a350:	bf38      	it	cc
 800a352:	4615      	movcc	r5, r2
 800a354:	0543      	lsls	r3, r0, #21
 800a356:	d510      	bpl.n	800a37a <__ssprint_r+0xb0>
 800a358:	4629      	mov	r1, r5
 800a35a:	4648      	mov	r0, r9
 800a35c:	f7ff f8a6 	bl	80094ac <_malloc_r>
 800a360:	4606      	mov	r6, r0
 800a362:	b1a0      	cbz	r0, 800a38e <__ssprint_r+0xc4>
 800a364:	4642      	mov	r2, r8
 800a366:	6921      	ldr	r1, [r4, #16]
 800a368:	f7fc fef5 	bl	8007156 <memcpy>
 800a36c:	89a2      	ldrh	r2, [r4, #12]
 800a36e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a376:	81a2      	strh	r2, [r4, #12]
 800a378:	e018      	b.n	800a3ac <__ssprint_r+0xe2>
 800a37a:	462a      	mov	r2, r5
 800a37c:	4648      	mov	r0, r9
 800a37e:	f7ff fda9 	bl	8009ed4 <_realloc_r>
 800a382:	4606      	mov	r6, r0
 800a384:	b990      	cbnz	r0, 800a3ac <__ssprint_r+0xe2>
 800a386:	6921      	ldr	r1, [r4, #16]
 800a388:	4648      	mov	r0, r9
 800a38a:	f7fe fe5d 	bl	8009048 <_free_r>
 800a38e:	220c      	movs	r2, #12
 800a390:	f8c9 2000 	str.w	r2, [r9]
 800a394:	89a2      	ldrh	r2, [r4, #12]
 800a396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a39a:	81a2      	strh	r2, [r4, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8cb 2008 	str.w	r2, [fp, #8]
 800a3a2:	f8cb 2004 	str.w	r2, [fp, #4]
 800a3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3aa:	e00a      	b.n	800a3c2 <__ssprint_r+0xf8>
 800a3ac:	6126      	str	r6, [r4, #16]
 800a3ae:	6165      	str	r5, [r4, #20]
 800a3b0:	4446      	add	r6, r8
 800a3b2:	ebc8 0505 	rsb	r5, r8, r5
 800a3b6:	6026      	str	r6, [r4, #0]
 800a3b8:	60a5      	str	r5, [r4, #8]
 800a3ba:	463e      	mov	r6, r7
 800a3bc:	e7a2      	b.n	800a304 <__ssprint_r+0x3a>
 800a3be:	463e      	mov	r6, r7
 800a3c0:	e7a2      	b.n	800a308 <__ssprint_r+0x3e>
 800a3c2:	b003      	add	sp, #12
 800a3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3c8 <_write_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4c07      	ldr	r4, [pc, #28]	; (800a3e8 <_write_r+0x20>)
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	4608      	mov	r0, r1
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	6022      	str	r2, [r4, #0]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f7fc f93d 	bl	8006656 <_write>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d102      	bne.n	800a3e6 <_write_r+0x1e>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	b103      	cbz	r3, 800a3e6 <_write_r+0x1e>
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	200085f8 	.word	0x200085f8

0800a3ec <__swsetup_r>:
 800a3ec:	4b32      	ldr	r3, [pc, #200]	; (800a4b8 <__swsetup_r+0xcc>)
 800a3ee:	b570      	push	{r4, r5, r6, lr}
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	b125      	cbz	r5, 800a402 <__swsetup_r+0x16>
 800a3f8:	69ab      	ldr	r3, [r5, #24]
 800a3fa:	b913      	cbnz	r3, 800a402 <__swsetup_r+0x16>
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f7fe fd5b 	bl	8008eb8 <__sinit>
 800a402:	4b2e      	ldr	r3, [pc, #184]	; (800a4bc <__swsetup_r+0xd0>)
 800a404:	429c      	cmp	r4, r3
 800a406:	d101      	bne.n	800a40c <__swsetup_r+0x20>
 800a408:	686c      	ldr	r4, [r5, #4]
 800a40a:	e008      	b.n	800a41e <__swsetup_r+0x32>
 800a40c:	4b2c      	ldr	r3, [pc, #176]	; (800a4c0 <__swsetup_r+0xd4>)
 800a40e:	429c      	cmp	r4, r3
 800a410:	d101      	bne.n	800a416 <__swsetup_r+0x2a>
 800a412:	68ac      	ldr	r4, [r5, #8]
 800a414:	e003      	b.n	800a41e <__swsetup_r+0x32>
 800a416:	4b2b      	ldr	r3, [pc, #172]	; (800a4c4 <__swsetup_r+0xd8>)
 800a418:	429c      	cmp	r4, r3
 800a41a:	bf08      	it	eq
 800a41c:	68ec      	ldreq	r4, [r5, #12]
 800a41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a422:	b29a      	uxth	r2, r3
 800a424:	0715      	lsls	r5, r2, #28
 800a426:	d41d      	bmi.n	800a464 <__swsetup_r+0x78>
 800a428:	06d0      	lsls	r0, r2, #27
 800a42a:	d402      	bmi.n	800a432 <__swsetup_r+0x46>
 800a42c:	2209      	movs	r2, #9
 800a42e:	6032      	str	r2, [r6, #0]
 800a430:	e03a      	b.n	800a4a8 <__swsetup_r+0xbc>
 800a432:	0751      	lsls	r1, r2, #29
 800a434:	d512      	bpl.n	800a45c <__swsetup_r+0x70>
 800a436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a438:	b141      	cbz	r1, 800a44c <__swsetup_r+0x60>
 800a43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a43e:	4299      	cmp	r1, r3
 800a440:	d002      	beq.n	800a448 <__swsetup_r+0x5c>
 800a442:	4630      	mov	r0, r6
 800a444:	f7fe fe00 	bl	8009048 <_free_r>
 800a448:	2300      	movs	r3, #0
 800a44a:	6363      	str	r3, [r4, #52]	; 0x34
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	2300      	movs	r3, #0
 800a456:	6063      	str	r3, [r4, #4]
 800a458:	6923      	ldr	r3, [r4, #16]
 800a45a:	6023      	str	r3, [r4, #0]
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	f043 0308 	orr.w	r3, r3, #8
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	b94b      	cbnz	r3, 800a47c <__swsetup_r+0x90>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a46e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a472:	d003      	beq.n	800a47c <__swsetup_r+0x90>
 800a474:	4621      	mov	r1, r4
 800a476:	4630      	mov	r0, r6
 800a478:	f000 f9ae 	bl	800a7d8 <__smakebuf_r>
 800a47c:	89a2      	ldrh	r2, [r4, #12]
 800a47e:	f012 0301 	ands.w	r3, r2, #1
 800a482:	d005      	beq.n	800a490 <__swsetup_r+0xa4>
 800a484:	2300      	movs	r3, #0
 800a486:	60a3      	str	r3, [r4, #8]
 800a488:	6963      	ldr	r3, [r4, #20]
 800a48a:	425b      	negs	r3, r3
 800a48c:	61a3      	str	r3, [r4, #24]
 800a48e:	e003      	b.n	800a498 <__swsetup_r+0xac>
 800a490:	0792      	lsls	r2, r2, #30
 800a492:	bf58      	it	pl
 800a494:	6963      	ldrpl	r3, [r4, #20]
 800a496:	60a3      	str	r3, [r4, #8]
 800a498:	6923      	ldr	r3, [r4, #16]
 800a49a:	b95b      	cbnz	r3, 800a4b4 <__swsetup_r+0xc8>
 800a49c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a0:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800a4a4:	b280      	uxth	r0, r0
 800a4a6:	b130      	cbz	r0, 800a4b6 <__swsetup_r+0xca>
 800a4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ac:	81a3      	strh	r3, [r4, #12]
 800a4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	20000128 	.word	0x20000128
 800a4bc:	0800bc6c 	.word	0x0800bc6c
 800a4c0:	0800bc8c 	.word	0x0800bc8c
 800a4c4:	0800bcac 	.word	0x0800bcac

0800a4c8 <_calloc_r>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	4351      	muls	r1, r2
 800a4cc:	f7fe ffee 	bl	80094ac <_malloc_r>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	b320      	cbz	r0, 800a51e <_calloc_r+0x56>
 800a4d4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a4d8:	f022 0203 	bic.w	r2, r2, #3
 800a4dc:	3a04      	subs	r2, #4
 800a4de:	2a24      	cmp	r2, #36	; 0x24
 800a4e0:	d81a      	bhi.n	800a518 <_calloc_r+0x50>
 800a4e2:	2a13      	cmp	r2, #19
 800a4e4:	d912      	bls.n	800a50c <_calloc_r+0x44>
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	2a1b      	cmp	r2, #27
 800a4ea:	6001      	str	r1, [r0, #0]
 800a4ec:	6041      	str	r1, [r0, #4]
 800a4ee:	d802      	bhi.n	800a4f6 <_calloc_r+0x2e>
 800a4f0:	f100 0308 	add.w	r3, r0, #8
 800a4f4:	e00b      	b.n	800a50e <_calloc_r+0x46>
 800a4f6:	2a24      	cmp	r2, #36	; 0x24
 800a4f8:	6081      	str	r1, [r0, #8]
 800a4fa:	60c1      	str	r1, [r0, #12]
 800a4fc:	bf11      	iteee	ne
 800a4fe:	f100 0310 	addne.w	r3, r0, #16
 800a502:	6101      	streq	r1, [r0, #16]
 800a504:	f100 0318 	addeq.w	r3, r0, #24
 800a508:	6141      	streq	r1, [r0, #20]
 800a50a:	e000      	b.n	800a50e <_calloc_r+0x46>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	605a      	str	r2, [r3, #4]
 800a514:	609a      	str	r2, [r3, #8]
 800a516:	e002      	b.n	800a51e <_calloc_r+0x56>
 800a518:	2100      	movs	r1, #0
 800a51a:	f7fc fe27 	bl	800716c <memset>
 800a51e:	4620      	mov	r0, r4
 800a520:	bd10      	pop	{r4, pc}
	...

0800a524 <_close_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4c06      	ldr	r4, [pc, #24]	; (800a540 <_close_r+0x1c>)
 800a528:	2300      	movs	r3, #0
 800a52a:	4605      	mov	r5, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	f7fc f8ba 	bl	80066a8 <_close>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d102      	bne.n	800a53e <_close_r+0x1a>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	b103      	cbz	r3, 800a53e <_close_r+0x1a>
 800a53c:	602b      	str	r3, [r5, #0]
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	200085f8 	.word	0x200085f8

0800a544 <_fclose_r>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	4605      	mov	r5, r0
 800a548:	460c      	mov	r4, r1
 800a54a:	b909      	cbnz	r1, 800a550 <_fclose_r+0xc>
 800a54c:	2000      	movs	r0, #0
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	b118      	cbz	r0, 800a55a <_fclose_r+0x16>
 800a552:	6983      	ldr	r3, [r0, #24]
 800a554:	b90b      	cbnz	r3, 800a55a <_fclose_r+0x16>
 800a556:	f7fe fcaf 	bl	8008eb8 <__sinit>
 800a55a:	4b20      	ldr	r3, [pc, #128]	; (800a5dc <_fclose_r+0x98>)
 800a55c:	429c      	cmp	r4, r3
 800a55e:	d101      	bne.n	800a564 <_fclose_r+0x20>
 800a560:	686c      	ldr	r4, [r5, #4]
 800a562:	e008      	b.n	800a576 <_fclose_r+0x32>
 800a564:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <_fclose_r+0x9c>)
 800a566:	429c      	cmp	r4, r3
 800a568:	d101      	bne.n	800a56e <_fclose_r+0x2a>
 800a56a:	68ac      	ldr	r4, [r5, #8]
 800a56c:	e003      	b.n	800a576 <_fclose_r+0x32>
 800a56e:	4b1d      	ldr	r3, [pc, #116]	; (800a5e4 <_fclose_r+0xa0>)
 800a570:	429c      	cmp	r4, r3
 800a572:	bf08      	it	eq
 800a574:	68ec      	ldreq	r4, [r5, #12]
 800a576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0e6      	beq.n	800a54c <_fclose_r+0x8>
 800a57e:	4621      	mov	r1, r4
 800a580:	4628      	mov	r0, r5
 800a582:	f000 f831 	bl	800a5e8 <__sflush_r>
 800a586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a588:	4606      	mov	r6, r0
 800a58a:	b133      	cbz	r3, 800a59a <_fclose_r+0x56>
 800a58c:	6a21      	ldr	r1, [r4, #32]
 800a58e:	4628      	mov	r0, r5
 800a590:	4798      	blx	r3
 800a592:	2800      	cmp	r0, #0
 800a594:	bfb8      	it	lt
 800a596:	f04f 36ff 	movlt.w	r6, #4294967295
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	061b      	lsls	r3, r3, #24
 800a59e:	d503      	bpl.n	800a5a8 <_fclose_r+0x64>
 800a5a0:	6921      	ldr	r1, [r4, #16]
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f7fe fd50 	bl	8009048 <_free_r>
 800a5a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5aa:	b141      	cbz	r1, 800a5be <_fclose_r+0x7a>
 800a5ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	d002      	beq.n	800a5ba <_fclose_r+0x76>
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	f7fe fd47 	bl	8009048 <_free_r>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a5be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a5c0:	b121      	cbz	r1, 800a5cc <_fclose_r+0x88>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f7fe fd40 	bl	8009048 <_free_r>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	64a3      	str	r3, [r4, #72]	; 0x48
 800a5cc:	f7fe fce4 	bl	8008f98 <__sfp_lock_acquire>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	f7fe fce1 	bl	8008f9a <__sfp_lock_release>
 800a5d8:	4630      	mov	r0, r6
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	0800bc6c 	.word	0x0800bc6c
 800a5e0:	0800bc8c 	.word	0x0800bc8c
 800a5e4:	0800bcac 	.word	0x0800bcac

0800a5e8 <__sflush_r>:
 800a5e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5ec:	b293      	uxth	r3, r2
 800a5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	0718      	lsls	r0, r3, #28
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	d460      	bmi.n	800a6bc <__sflush_r+0xd4>
 800a5fa:	684b      	ldr	r3, [r1, #4]
 800a5fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a600:	2b00      	cmp	r3, #0
 800a602:	818a      	strh	r2, [r1, #12]
 800a604:	dc02      	bgt.n	800a60c <__sflush_r+0x24>
 800a606:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a608:	2b00      	cmp	r3, #0
 800a60a:	dd17      	ble.n	800a63c <__sflush_r+0x54>
 800a60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a60e:	b1ae      	cbz	r6, 800a63c <__sflush_r+0x54>
 800a610:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a614:	2300      	movs	r3, #0
 800a616:	b292      	uxth	r2, r2
 800a618:	682f      	ldr	r7, [r5, #0]
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	b10a      	cbz	r2, 800a622 <__sflush_r+0x3a>
 800a61e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a620:	e015      	b.n	800a64e <__sflush_r+0x66>
 800a622:	6a21      	ldr	r1, [r4, #32]
 800a624:	2301      	movs	r3, #1
 800a626:	4628      	mov	r0, r5
 800a628:	47b0      	blx	r6
 800a62a:	1c41      	adds	r1, r0, #1
 800a62c:	d10f      	bne.n	800a64e <__sflush_r+0x66>
 800a62e:	682b      	ldr	r3, [r5, #0]
 800a630:	b16b      	cbz	r3, 800a64e <__sflush_r+0x66>
 800a632:	2b1d      	cmp	r3, #29
 800a634:	d001      	beq.n	800a63a <__sflush_r+0x52>
 800a636:	2b16      	cmp	r3, #22
 800a638:	d103      	bne.n	800a642 <__sflush_r+0x5a>
 800a63a:	602f      	str	r7, [r5, #0]
 800a63c:	2000      	movs	r0, #0
 800a63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	075a      	lsls	r2, r3, #29
 800a652:	d505      	bpl.n	800a660 <__sflush_r+0x78>
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	1ac0      	subs	r0, r0, r3
 800a658:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a65a:	b10b      	cbz	r3, 800a660 <__sflush_r+0x78>
 800a65c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a65e:	1ac0      	subs	r0, r0, r3
 800a660:	2300      	movs	r3, #0
 800a662:	4602      	mov	r2, r0
 800a664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a666:	6a21      	ldr	r1, [r4, #32]
 800a668:	4628      	mov	r0, r5
 800a66a:	47b0      	blx	r6
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	d106      	bne.n	800a680 <__sflush_r+0x98>
 800a672:	6829      	ldr	r1, [r5, #0]
 800a674:	291d      	cmp	r1, #29
 800a676:	d83e      	bhi.n	800a6f6 <__sflush_r+0x10e>
 800a678:	4a22      	ldr	r2, [pc, #136]	; (800a704 <__sflush_r+0x11c>)
 800a67a:	40ca      	lsrs	r2, r1
 800a67c:	07d6      	lsls	r6, r2, #31
 800a67e:	d53a      	bpl.n	800a6f6 <__sflush_r+0x10e>
 800a680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a684:	b21b      	sxth	r3, r3
 800a686:	2200      	movs	r2, #0
 800a688:	6062      	str	r2, [r4, #4]
 800a68a:	04d9      	lsls	r1, r3, #19
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	81a3      	strh	r3, [r4, #12]
 800a690:	6022      	str	r2, [r4, #0]
 800a692:	d504      	bpl.n	800a69e <__sflush_r+0xb6>
 800a694:	1c42      	adds	r2, r0, #1
 800a696:	d101      	bne.n	800a69c <__sflush_r+0xb4>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b903      	cbnz	r3, 800a69e <__sflush_r+0xb6>
 800a69c:	6560      	str	r0, [r4, #84]	; 0x54
 800a69e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6a0:	602f      	str	r7, [r5, #0]
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	d0ca      	beq.n	800a63c <__sflush_r+0x54>
 800a6a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6aa:	4299      	cmp	r1, r3
 800a6ac:	d002      	beq.n	800a6b4 <__sflush_r+0xcc>
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f7fe fcca 	bl	8009048 <_free_r>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	6360      	str	r0, [r4, #52]	; 0x34
 800a6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6bc:	690f      	ldr	r7, [r1, #16]
 800a6be:	2f00      	cmp	r7, #0
 800a6c0:	d0bc      	beq.n	800a63c <__sflush_r+0x54>
 800a6c2:	079b      	lsls	r3, r3, #30
 800a6c4:	680e      	ldr	r6, [r1, #0]
 800a6c6:	bf08      	it	eq
 800a6c8:	694b      	ldreq	r3, [r1, #20]
 800a6ca:	600f      	str	r7, [r1, #0]
 800a6cc:	bf18      	it	ne
 800a6ce:	2300      	movne	r3, #0
 800a6d0:	ebc7 0806 	rsb	r8, r7, r6
 800a6d4:	608b      	str	r3, [r1, #8]
 800a6d6:	e002      	b.n	800a6de <__sflush_r+0xf6>
 800a6d8:	4407      	add	r7, r0
 800a6da:	ebc0 0808 	rsb	r8, r0, r8
 800a6de:	f1b8 0f00 	cmp.w	r8, #0
 800a6e2:	ddab      	ble.n	800a63c <__sflush_r+0x54>
 800a6e4:	4643      	mov	r3, r8
 800a6e6:	463a      	mov	r2, r7
 800a6e8:	6a21      	ldr	r1, [r4, #32]
 800a6ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	47b0      	blx	r6
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	dcf1      	bgt.n	800a6d8 <__sflush_r+0xf0>
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a704:	20400001 	.word	0x20400001

0800a708 <_fflush_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	690b      	ldr	r3, [r1, #16]
 800a70c:	4605      	mov	r5, r0
 800a70e:	460c      	mov	r4, r1
 800a710:	b1db      	cbz	r3, 800a74a <_fflush_r+0x42>
 800a712:	b118      	cbz	r0, 800a71c <_fflush_r+0x14>
 800a714:	6983      	ldr	r3, [r0, #24]
 800a716:	b90b      	cbnz	r3, 800a71c <_fflush_r+0x14>
 800a718:	f7fe fbce 	bl	8008eb8 <__sinit>
 800a71c:	4b0c      	ldr	r3, [pc, #48]	; (800a750 <_fflush_r+0x48>)
 800a71e:	429c      	cmp	r4, r3
 800a720:	d101      	bne.n	800a726 <_fflush_r+0x1e>
 800a722:	686c      	ldr	r4, [r5, #4]
 800a724:	e008      	b.n	800a738 <_fflush_r+0x30>
 800a726:	4b0b      	ldr	r3, [pc, #44]	; (800a754 <_fflush_r+0x4c>)
 800a728:	429c      	cmp	r4, r3
 800a72a:	d101      	bne.n	800a730 <_fflush_r+0x28>
 800a72c:	68ac      	ldr	r4, [r5, #8]
 800a72e:	e003      	b.n	800a738 <_fflush_r+0x30>
 800a730:	4b09      	ldr	r3, [pc, #36]	; (800a758 <_fflush_r+0x50>)
 800a732:	429c      	cmp	r4, r3
 800a734:	bf08      	it	eq
 800a736:	68ec      	ldreq	r4, [r5, #12]
 800a738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a73c:	b12b      	cbz	r3, 800a74a <_fflush_r+0x42>
 800a73e:	4621      	mov	r1, r4
 800a740:	4628      	mov	r0, r5
 800a742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a746:	f7ff bf4f 	b.w	800a5e8 <__sflush_r>
 800a74a:	2000      	movs	r0, #0
 800a74c:	bd38      	pop	{r3, r4, r5, pc}
 800a74e:	bf00      	nop
 800a750:	0800bc6c 	.word	0x0800bc6c
 800a754:	0800bc8c 	.word	0x0800bc8c
 800a758:	0800bcac 	.word	0x0800bcac

0800a75c <_lseek_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	4c07      	ldr	r4, [pc, #28]	; (800a77c <_lseek_r+0x20>)
 800a760:	4605      	mov	r5, r0
 800a762:	4608      	mov	r0, r1
 800a764:	4611      	mov	r1, r2
 800a766:	2200      	movs	r2, #0
 800a768:	6022      	str	r2, [r4, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	f7fb ffa6 	bl	80066bc <_lseek>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_lseek_r+0x1e>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	b103      	cbz	r3, 800a77a <_lseek_r+0x1e>
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	200085f8 	.word	0x200085f8

0800a780 <__swhatbuf_r>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	460e      	mov	r6, r1
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	2900      	cmp	r1, #0
 800a78a:	b090      	sub	sp, #64	; 0x40
 800a78c:	4614      	mov	r4, r2
 800a78e:	461d      	mov	r5, r3
 800a790:	da0a      	bge.n	800a7a8 <__swhatbuf_r+0x28>
 800a792:	89b3      	ldrh	r3, [r6, #12]
 800a794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a798:	2200      	movs	r2, #0
 800a79a:	b298      	uxth	r0, r3
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	b1b0      	cbz	r0, 800a7ce <__swhatbuf_r+0x4e>
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	e015      	b.n	800a7d4 <__swhatbuf_r+0x54>
 800a7a8:	aa01      	add	r2, sp, #4
 800a7aa:	f000 f863 	bl	800a874 <_fstat_r>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	dbef      	blt.n	800a792 <__swhatbuf_r+0x12>
 800a7b2:	9a02      	ldr	r2, [sp, #8]
 800a7b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7bc:	425a      	negs	r2, r3
 800a7be:	415a      	adcs	r2, r3
 800a7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7c4:	602a      	str	r2, [r5, #0]
 800a7c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a7ca:	6023      	str	r3, [r4, #0]
 800a7cc:	e002      	b.n	800a7d4 <__swhatbuf_r+0x54>
 800a7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d2:	6023      	str	r3, [r4, #0]
 800a7d4:	b010      	add	sp, #64	; 0x40
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}

0800a7d8 <__smakebuf_r>:
 800a7d8:	898b      	ldrh	r3, [r1, #12]
 800a7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7dc:	079e      	lsls	r6, r3, #30
 800a7de:	4605      	mov	r5, r0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	d410      	bmi.n	800a806 <__smakebuf_r+0x2e>
 800a7e4:	ab01      	add	r3, sp, #4
 800a7e6:	466a      	mov	r2, sp
 800a7e8:	f7ff ffca 	bl	800a780 <__swhatbuf_r>
 800a7ec:	9900      	ldr	r1, [sp, #0]
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f7fe fe5b 	bl	80094ac <_malloc_r>
 800a7f6:	b968      	cbnz	r0, 800a814 <__smakebuf_r+0x3c>
 800a7f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7fc:	059a      	lsls	r2, r3, #22
 800a7fe:	d422      	bmi.n	800a846 <__smakebuf_r+0x6e>
 800a800:	f043 0302 	orr.w	r3, r3, #2
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a80a:	6023      	str	r3, [r4, #0]
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	2301      	movs	r3, #1
 800a810:	6163      	str	r3, [r4, #20]
 800a812:	e018      	b.n	800a846 <__smakebuf_r+0x6e>
 800a814:	4b0d      	ldr	r3, [pc, #52]	; (800a84c <__smakebuf_r+0x74>)
 800a816:	62ab      	str	r3, [r5, #40]	; 0x28
 800a818:	89a3      	ldrh	r3, [r4, #12]
 800a81a:	6020      	str	r0, [r4, #0]
 800a81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	9b00      	ldr	r3, [sp, #0]
 800a824:	6163      	str	r3, [r4, #20]
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	6120      	str	r0, [r4, #16]
 800a82a:	b14b      	cbz	r3, 800a840 <__smakebuf_r+0x68>
 800a82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a830:	4628      	mov	r0, r5
 800a832:	f000 f831 	bl	800a898 <_isatty_r>
 800a836:	b118      	cbz	r0, 800a840 <__smakebuf_r+0x68>
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	89a0      	ldrh	r0, [r4, #12]
 800a842:	4330      	orrs	r0, r6
 800a844:	81a0      	strh	r0, [r4, #12]
 800a846:	b002      	add	sp, #8
 800a848:	bd70      	pop	{r4, r5, r6, pc}
 800a84a:	bf00      	nop
 800a84c:	08008e39 	.word	0x08008e39

0800a850 <_read_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4c07      	ldr	r4, [pc, #28]	; (800a870 <_read_r+0x20>)
 800a854:	4605      	mov	r5, r0
 800a856:	4608      	mov	r0, r1
 800a858:	4611      	mov	r1, r2
 800a85a:	2200      	movs	r2, #0
 800a85c:	6022      	str	r2, [r4, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	f7fb feeb 	bl	800663a <_read>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d102      	bne.n	800a86e <_read_r+0x1e>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	b103      	cbz	r3, 800a86e <_read_r+0x1e>
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	200085f8 	.word	0x200085f8

0800a874 <_fstat_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4c07      	ldr	r4, [pc, #28]	; (800a894 <_fstat_r+0x20>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4605      	mov	r5, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	4611      	mov	r1, r2
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	f7fb ff14 	bl	80066ae <_fstat>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d102      	bne.n	800a890 <_fstat_r+0x1c>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	b103      	cbz	r3, 800a890 <_fstat_r+0x1c>
 800a88e:	602b      	str	r3, [r5, #0]
 800a890:	bd38      	pop	{r3, r4, r5, pc}
 800a892:	bf00      	nop
 800a894:	200085f8 	.word	0x200085f8

0800a898 <_isatty_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4c06      	ldr	r4, [pc, #24]	; (800a8b4 <_isatty_r+0x1c>)
 800a89c:	2300      	movs	r3, #0
 800a89e:	4605      	mov	r5, r0
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	f7fb ff08 	bl	80066b8 <_isatty>
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	d102      	bne.n	800a8b2 <_isatty_r+0x1a>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	b103      	cbz	r3, 800a8b2 <_isatty_r+0x1a>
 800a8b0:	602b      	str	r3, [r5, #0]
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	200085f8 	.word	0x200085f8

0800a8b8 <_init>:
 800a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ba:	bf00      	nop
 800a8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8be:	bc08      	pop	{r3}
 800a8c0:	469e      	mov	lr, r3
 800a8c2:	4770      	bx	lr

0800a8c4 <_fini>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	bf00      	nop
 800a8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ca:	bc08      	pop	{r3}
 800a8cc:	469e      	mov	lr, r3
 800a8ce:	4770      	bx	lr
